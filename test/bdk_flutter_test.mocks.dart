// Mocks generated by Mockito 5.4.4 from annotations
// in bdk_flutter/test/bdk_flutter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i7;

import 'package:bdk_flutter/bdk_flutter.dart' as _i3;
import 'package:bdk_flutter/src/generated/api/types.dart' as _i5;
import 'package:bdk_flutter/src/generated/lib.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMutexWalletAnyDatabase_0 extends _i1.SmartFake
    implements _i2.MutexWalletAnyDatabase {
  _FakeMutexWalletAnyDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressInfo_1 extends _i1.SmartFake implements _i3.AddressInfo {
  _FakeAddressInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBalance_2 extends _i1.SmartFake implements _i3.Balance {
  _FakeBalance_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptor_3 extends _i1.SmartFake implements _i3.Descriptor {
  _FakeDescriptor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInput_4 extends _i1.SmartFake implements _i3.Input {
  _FakeInput_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnyBlockchain_5 extends _i1.SmartFake implements _i2.AnyBlockchain {
  _FakeAnyBlockchain_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeeRate_6 extends _i1.SmartFake implements _i3.FeeRate {
  _FakeFeeRate_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorSecretKey_7 extends _i1.SmartFake
    implements _i2.DescriptorSecretKey {
  _FakeDescriptorSecretKey_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorSecretKey_8 extends _i1.SmartFake
    implements _i3.DescriptorSecretKey {
  _FakeDescriptorSecretKey_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorPublicKey_9 extends _i1.SmartFake
    implements _i3.DescriptorPublicKey {
  _FakeDescriptorPublicKey_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorPublicKey_10 extends _i1.SmartFake
    implements _i2.DescriptorPublicKey {
  _FakeDescriptorPublicKey_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMutexPartiallySignedTransaction_11 extends _i1.SmartFake
    implements _i2.MutexPartiallySignedTransaction {
  _FakeMutexPartiallySignedTransaction_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_12 extends _i1.SmartFake implements _i3.Transaction {
  _FakeTransaction_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePartiallySignedTransaction_13 extends _i1.SmartFake
    implements _i3.PartiallySignedTransaction {
  _FakePartiallySignedTransaction_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTxBuilder_14 extends _i1.SmartFake implements _i3.TxBuilder {
  _FakeTxBuilder_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionDetails_15 extends _i1.SmartFake
    implements _i3.TransactionDetails {
  _FakeTransactionDetails_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBumpFeeTxBuilder_16 extends _i1.SmartFake
    implements _i3.BumpFeeTxBuilder {
  _FakeBumpFeeTxBuilder_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddress_17 extends _i1.SmartFake implements _i2.Address {
  _FakeAddress_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScriptBuf_18 extends _i1.SmartFake implements _i3.ScriptBuf {
  _FakeScriptBuf_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDerivationPath_19 extends _i1.SmartFake
    implements _i2.DerivationPath {
  _FakeDerivationPath_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutPoint_20 extends _i1.SmartFake implements _i3.OutPoint {
  _FakeOutPoint_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTxOut_21 extends _i1.SmartFake implements _i3.TxOut {
  _FakeTxOut_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Wallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallet extends _i1.Mock implements _i3.Wallet {
  @override
  _i2.MutexWalletAnyDatabase get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeMutexWalletAnyDatabase_0(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeMutexWalletAnyDatabase_0(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.MutexWalletAnyDatabase);

  @override
  _i3.AddressInfo getAddress({
    required _i3.AddressIndex? addressIndex,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddress,
          [],
          {
            #addressIndex: addressIndex,
            #hint: hint,
          },
        ),
        returnValue: _FakeAddressInfo_1(
          this,
          Invocation.method(
            #getAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        ),
        returnValueForMissingStub: _FakeAddressInfo_1(
          this,
          Invocation.method(
            #getAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        ),
      ) as _i3.AddressInfo);

  @override
  _i3.Balance getBalance({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #getBalance,
          [],
          {#hint: hint},
        ),
        returnValue: _FakeBalance_2(
          this,
          Invocation.method(
            #getBalance,
            [],
            {#hint: hint},
          ),
        ),
        returnValueForMissingStub: _FakeBalance_2(
          this,
          Invocation.method(
            #getBalance,
            [],
            {#hint: hint},
          ),
        ),
      ) as _i3.Balance);

  @override
  _i4.Future<_i3.Descriptor> getDescriptorForKeychain({
    required _i3.KeychainKind? keychain,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDescriptorForKeychain,
          [],
          {
            #keychain: keychain,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<_i3.Descriptor>.value(_FakeDescriptor_3(
          this,
          Invocation.method(
            #getDescriptorForKeychain,
            [],
            {
              #keychain: keychain,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Descriptor>.value(_FakeDescriptor_3(
          this,
          Invocation.method(
            #getDescriptorForKeychain,
            [],
            {
              #keychain: keychain,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<_i3.Descriptor>);

  @override
  _i3.AddressInfo getInternalAddress({
    required _i3.AddressIndex? addressIndex,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInternalAddress,
          [],
          {
            #addressIndex: addressIndex,
            #hint: hint,
          },
        ),
        returnValue: _FakeAddressInfo_1(
          this,
          Invocation.method(
            #getInternalAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        ),
        returnValueForMissingStub: _FakeAddressInfo_1(
          this,
          Invocation.method(
            #getInternalAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        ),
      ) as _i3.AddressInfo);

  @override
  _i4.Future<_i3.Input> getPsbtInput({
    required _i3.LocalUtxo? utxo,
    required bool? onlyWitnessUtxo,
    _i3.PsbtSigHashType? sighashType,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPsbtInput,
          [],
          {
            #utxo: utxo,
            #onlyWitnessUtxo: onlyWitnessUtxo,
            #sighashType: sighashType,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<_i3.Input>.value(_FakeInput_4(
          this,
          Invocation.method(
            #getPsbtInput,
            [],
            {
              #utxo: utxo,
              #onlyWitnessUtxo: onlyWitnessUtxo,
              #sighashType: sighashType,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.Input>.value(_FakeInput_4(
          this,
          Invocation.method(
            #getPsbtInput,
            [],
            {
              #utxo: utxo,
              #onlyWitnessUtxo: onlyWitnessUtxo,
              #sighashType: sighashType,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<_i3.Input>);

  @override
  bool isMine({
    required _i5.BdkScriptBuf? script,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMine,
          [],
          {
            #script: script,
            #hint: hint,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i3.TransactionDetails> listTransactions({
    required bool? includeRaw,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listTransactions,
          [],
          {
            #includeRaw: includeRaw,
            #hint: hint,
          },
        ),
        returnValue: <_i3.TransactionDetails>[],
        returnValueForMissingStub: <_i3.TransactionDetails>[],
      ) as List<_i3.TransactionDetails>);

  @override
  List<_i3.LocalUtxo> listUnspent({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #listUnspent,
          [],
          {#hint: hint},
        ),
        returnValue: <_i3.LocalUtxo>[],
        returnValueForMissingStub: <_i3.LocalUtxo>[],
      ) as List<_i3.LocalUtxo>);

  @override
  _i3.Network network({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #network,
          [],
          {#hint: hint},
        ),
        returnValue: _i3.Network.testnet,
        returnValueForMissingStub: _i3.Network.testnet,
      ) as _i3.Network);

  @override
  _i4.Future<bool> sign({
    required _i3.PartiallySignedTransaction? psbt,
    _i3.SignOptions? signOptions,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [],
          {
            #psbt: psbt,
            #signOptions: signOptions,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> sync({
    required _i3.Blockchain? blockchain,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sync,
          [],
          {
            #blockchain: blockchain,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Transaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransaction extends _i1.Mock implements _i3.Transaction {
  @override
  String get s => (super.noSuchMethod(
        Invocation.getter(#s),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#s),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#s),
        ),
      ) as String);

  @override
  _i4.Future<List<_i3.TxIn>> input() => (super.noSuchMethod(
        Invocation.method(
          #input,
          [],
        ),
        returnValue: _i4.Future<List<_i3.TxIn>>.value(<_i3.TxIn>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.TxIn>>.value(<_i3.TxIn>[]),
      ) as _i4.Future<List<_i3.TxIn>>);

  @override
  _i4.Future<bool> isCoinBase() => (super.noSuchMethod(
        Invocation.method(
          #isCoinBase,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isExplicitlyRbf() => (super.noSuchMethod(
        Invocation.method(
          #isExplicitlyRbf,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isLockTimeEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLockTimeEnabled,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i3.LockTime> lockTime() => (super.noSuchMethod(
        Invocation.method(
          #lockTime,
          [],
        ),
        returnValue:
            _i4.Future<_i3.LockTime>.value(_i6.dummyValue<_i3.LockTime>(
          this,
          Invocation.method(
            #lockTime,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.LockTime>.value(_i6.dummyValue<_i3.LockTime>(
          this,
          Invocation.method(
            #lockTime,
            [],
          ),
        )),
      ) as _i4.Future<_i3.LockTime>);

  @override
  _i4.Future<List<_i3.TxOut>> output() => (super.noSuchMethod(
        Invocation.method(
          #output,
          [],
        ),
        returnValue: _i4.Future<List<_i3.TxOut>>.value(<_i3.TxOut>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.TxOut>>.value(<_i3.TxOut>[]),
      ) as _i4.Future<List<_i3.TxOut>>);

  @override
  _i4.Future<_i7.Uint8List> serialize() => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [],
        ),
        returnValue: _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub:
            _i4.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
      ) as _i4.Future<_i7.Uint8List>);

  @override
  _i4.Future<BigInt> size() => (super.noSuchMethod(
        Invocation.method(
          #size,
          [],
        ),
        returnValue: _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #size,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #size,
            [],
          ),
        )),
      ) as _i4.Future<BigInt>);

  @override
  _i4.Future<String> txid() => (super.noSuchMethod(
        Invocation.method(
          #txid,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<int> version() => (super.noSuchMethod(
        Invocation.method(
          #version,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<BigInt> vsize() => (super.noSuchMethod(
        Invocation.method(
          #vsize,
          [],
        ),
        returnValue: _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #vsize,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #vsize,
            [],
          ),
        )),
      ) as _i4.Future<BigInt>);

  @override
  _i4.Future<BigInt> weight() => (super.noSuchMethod(
        Invocation.method(
          #weight,
          [],
        ),
        returnValue: _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #weight,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<BigInt>.value(_i6.dummyValue<BigInt>(
          this,
          Invocation.method(
            #weight,
            [],
          ),
        )),
      ) as _i4.Future<BigInt>);
}

/// A class which mocks [Blockchain].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockchain extends _i1.Mock implements _i3.Blockchain {
  @override
  _i2.AnyBlockchain get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeAnyBlockchain_5(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeAnyBlockchain_5(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.AnyBlockchain);

  @override
  _i4.Future<_i3.FeeRate> estimateFee({
    required BigInt? target,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFee,
          [],
          {
            #target: target,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<_i3.FeeRate>.value(_FakeFeeRate_6(
          this,
          Invocation.method(
            #estimateFee,
            [],
            {
              #target: target,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.FeeRate>.value(_FakeFeeRate_6(
          this,
          Invocation.method(
            #estimateFee,
            [],
            {
              #target: target,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<_i3.FeeRate>);

  @override
  _i4.Future<String> broadcast({
    required _i5.BdkTransaction? transaction,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcast,
          [],
          {
            #transaction: transaction,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #broadcast,
            [],
            {
              #transaction: transaction,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #broadcast,
            [],
            {
              #transaction: transaction,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> getBlockHash({
    required int? height,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockHash,
          [],
          {
            #height: height,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockHash,
            [],
            {
              #height: height,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockHash,
            [],
            {
              #height: height,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<int> getHeight({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #getHeight,
          [],
          {#hint: hint},
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [DescriptorSecretKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescriptorSecretKey extends _i1.Mock
    implements _i3.DescriptorSecretKey {
  @override
  _i2.DescriptorSecretKey get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeDescriptorSecretKey_7(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeDescriptorSecretKey_7(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.DescriptorSecretKey);

  @override
  _i4.Future<_i3.DescriptorSecretKey> derive(_i3.DerivationPath? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #derive,
          [path],
        ),
        returnValue: _i4.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #derive,
            [path],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #derive,
            [path],
          ),
        )),
      ) as _i4.Future<_i3.DescriptorSecretKey>);

  @override
  _i4.Future<_i3.DescriptorSecretKey> extend(_i3.DerivationPath? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #extend,
          [path],
        ),
        returnValue: _i4.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #extend,
            [path],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #extend,
            [path],
          ),
        )),
      ) as _i4.Future<_i3.DescriptorSecretKey>);

  @override
  _i3.DescriptorPublicKey toPublic() => (super.noSuchMethod(
        Invocation.method(
          #toPublic,
          [],
        ),
        returnValue: _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #toPublic,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #toPublic,
            [],
          ),
        ),
      ) as _i3.DescriptorPublicKey);

  @override
  _i7.Uint8List secretBytes({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #secretBytes,
          [],
          {#hint: hint},
        ),
        returnValue: _i7.Uint8List(0),
        returnValueForMissingStub: _i7.Uint8List(0),
      ) as _i7.Uint8List);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [DescriptorPublicKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescriptorPublicKey extends _i1.Mock
    implements _i3.DescriptorPublicKey {
  @override
  _i2.DescriptorPublicKey get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeDescriptorPublicKey_10(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeDescriptorPublicKey_10(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.DescriptorPublicKey);

  @override
  _i4.Future<_i3.DescriptorPublicKey> derive({
    required _i3.DerivationPath? path,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #derive,
          [],
          {
            #path: path,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #derive,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #derive,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<_i3.DescriptorPublicKey>);

  @override
  _i4.Future<_i3.DescriptorPublicKey> extend({
    required _i3.DerivationPath? path,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #extend,
          [],
          {
            #path: path,
            #hint: hint,
          },
        ),
        returnValue: _i4.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #extend,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #extend,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
      ) as _i4.Future<_i3.DescriptorPublicKey>);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [PartiallySignedTransaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartiallySignedTransaction extends _i1.Mock
    implements _i3.PartiallySignedTransaction {
  @override
  _i2.MutexPartiallySignedTransaction get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeMutexPartiallySignedTransaction_11(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeMutexPartiallySignedTransaction_11(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.MutexPartiallySignedTransaction);

  @override
  String jsonSerialize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #jsonSerialize,
          [],
          {#hint: hint},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #jsonSerialize,
            [],
            {#hint: hint},
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #jsonSerialize,
            [],
            {#hint: hint},
          ),
        ),
      ) as String);

  @override
  _i7.Uint8List serialize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [],
          {#hint: hint},
        ),
        returnValue: _i7.Uint8List(0),
        returnValueForMissingStub: _i7.Uint8List(0),
      ) as _i7.Uint8List);

  @override
  _i3.Transaction extractTx() => (super.noSuchMethod(
        Invocation.method(
          #extractTx,
          [],
        ),
        returnValue: _FakeTransaction_12(
          this,
          Invocation.method(
            #extractTx,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTransaction_12(
          this,
          Invocation.method(
            #extractTx,
            [],
          ),
        ),
      ) as _i3.Transaction);

  @override
  _i4.Future<_i3.PartiallySignedTransaction> combine(
          _i3.PartiallySignedTransaction? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #combine,
          [other],
        ),
        returnValue: _i4.Future<_i3.PartiallySignedTransaction>.value(
            _FakePartiallySignedTransaction_13(
          this,
          Invocation.method(
            #combine,
            [other],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.PartiallySignedTransaction>.value(
                _FakePartiallySignedTransaction_13(
          this,
          Invocation.method(
            #combine,
            [other],
          ),
        )),
      ) as _i4.Future<_i3.PartiallySignedTransaction>);

  @override
  String txid({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #txid,
          [],
          {#hint: hint},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        ),
      ) as String);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [TxBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockTxBuilder extends _i1.Mock implements _i3.TxBuilder {
  @override
  _i3.TxBuilder addData({required List<int>? data}) => (super.noSuchMethod(
        Invocation.method(
          #addData,
          [],
          {#data: data},
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addData,
            [],
            {#data: data},
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addData,
            [],
            {#data: data},
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addRecipient(
    _i3.ScriptBuf? script,
    BigInt? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecipient,
          [
            script,
            amount,
          ],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addRecipient,
            [
              script,
              amount,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addRecipient,
            [
              script,
              amount,
            ],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder unSpendable(List<_i3.OutPoint>? outpoints) =>
      (super.noSuchMethod(
        Invocation.method(
          #unSpendable,
          [outpoints],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #unSpendable,
            [outpoints],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #unSpendable,
            [outpoints],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUtxo(_i3.OutPoint? outpoint) => (super.noSuchMethod(
        Invocation.method(
          #addUtxo,
          [outpoint],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxo,
            [outpoint],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxo,
            [outpoint],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUtxos(List<_i3.OutPoint>? outpoints) => (super.noSuchMethod(
        Invocation.method(
          #addUtxos,
          [outpoints],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxos,
            [outpoints],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxos,
            [outpoints],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addForeignUtxo(
    _i3.Input? psbtInput,
    _i3.OutPoint? outPoint,
    BigInt? satisfactionWeight,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addForeignUtxo,
          [
            psbtInput,
            outPoint,
            satisfactionWeight,
          ],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addForeignUtxo,
            [
              psbtInput,
              outPoint,
              satisfactionWeight,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addForeignUtxo,
            [
              psbtInput,
              outPoint,
              satisfactionWeight,
            ],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder doNotSpendChange() => (super.noSuchMethod(
        Invocation.method(
          #doNotSpendChange,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #doNotSpendChange,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #doNotSpendChange,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder drainWallet() => (super.noSuchMethod(
        Invocation.method(
          #drainWallet,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainWallet,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainWallet,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder drainTo(_i3.ScriptBuf? script) => (super.noSuchMethod(
        Invocation.method(
          #drainTo,
          [script],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainTo,
            [script],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainTo,
            [script],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder enableRbfWithSequence(int? nSequence) => (super.noSuchMethod(
        Invocation.method(
          #enableRbfWithSequence,
          [nSequence],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder enableRbf() => (super.noSuchMethod(
        Invocation.method(
          #enableRbf,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder feeAbsolute(BigInt? feeAmount) => (super.noSuchMethod(
        Invocation.method(
          #feeAbsolute,
          [feeAmount],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeAbsolute,
            [feeAmount],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeAbsolute,
            [feeAmount],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder feeRate(double? satPerVbyte) => (super.noSuchMethod(
        Invocation.method(
          #feeRate,
          [satPerVbyte],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeRate,
            [satPerVbyte],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeRate,
            [satPerVbyte],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder setRecipients(List<_i3.ScriptAmount>? recipients) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRecipients,
          [recipients],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #setRecipients,
            [recipients],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #setRecipients,
            [recipients],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder manuallySelectedOnly() => (super.noSuchMethod(
        Invocation.method(
          #manuallySelectedOnly,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #manuallySelectedOnly,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #manuallySelectedOnly,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUnSpendable(_i3.OutPoint? unSpendable) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUnSpendable,
          [unSpendable],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUnSpendable,
            [unSpendable],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUnSpendable,
            [unSpendable],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder onlySpendChange() => (super.noSuchMethod(
        Invocation.method(
          #onlySpendChange,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #onlySpendChange,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #onlySpendChange,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i4.Future<(_i3.PartiallySignedTransaction, _i3.TransactionDetails)> finish(
          _i3.Wallet? wallet) =>
      (super.noSuchMethod(
        Invocation.method(
          #finish,
          [wallet],
        ),
        returnValue: _i4.Future<
            (_i3.PartiallySignedTransaction, _i3.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
        returnValueForMissingStub: _i4.Future<
            (_i3.PartiallySignedTransaction, _i3.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
      ) as _i4
          .Future<(_i3.PartiallySignedTransaction, _i3.TransactionDetails)>);
}

/// A class which mocks [BumpFeeTxBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockBumpFeeTxBuilder extends _i1.Mock implements _i3.BumpFeeTxBuilder {
  @override
  String get txid => (super.noSuchMethod(
        Invocation.getter(#txid),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
      ) as String);

  @override
  double get feeRate => (super.noSuchMethod(
        Invocation.getter(#feeRate),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i3.BumpFeeTxBuilder allowShrinking(_i3.Address? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #allowShrinking,
          [address],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #allowShrinking,
            [address],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #allowShrinking,
            [address],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i3.BumpFeeTxBuilder enableRbf() => (super.noSuchMethod(
        Invocation.method(
          #enableRbf,
          [],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i3.BumpFeeTxBuilder enableRbfWithSequence(int? nSequence) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableRbfWithSequence,
          [nSequence],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i4.Future<(_i3.PartiallySignedTransaction, _i3.TransactionDetails)> finish(
          _i3.Wallet? wallet) =>
      (super.noSuchMethod(
        Invocation.method(
          #finish,
          [wallet],
        ),
        returnValue: _i4.Future<
            (_i3.PartiallySignedTransaction, _i3.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
        returnValueForMissingStub: _i4.Future<
            (_i3.PartiallySignedTransaction, _i3.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
      ) as _i4
          .Future<(_i3.PartiallySignedTransaction, _i3.TransactionDetails)>);
}

/// A class which mocks [ScriptBuf].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptBuf extends _i1.Mock implements _i3.ScriptBuf {
  @override
  _i7.Uint8List get bytes => (super.noSuchMethod(
        Invocation.getter(#bytes),
        returnValue: _i7.Uint8List(0),
        returnValueForMissingStub: _i7.Uint8List(0),
      ) as _i7.Uint8List);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [Address].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddress extends _i1.Mock implements _i3.Address {
  @override
  _i2.Address get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeAddress_17(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeAddress_17(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.Address);

  @override
  _i3.ScriptBuf scriptPubkey() => (super.noSuchMethod(
        Invocation.method(
          #scriptPubkey,
          [],
        ),
        returnValue: _FakeScriptBuf_18(
          this,
          Invocation.method(
            #scriptPubkey,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeScriptBuf_18(
          this,
          Invocation.method(
            #scriptPubkey,
            [],
          ),
        ),
      ) as _i3.ScriptBuf);

  @override
  String toQrUri() => (super.noSuchMethod(
        Invocation.method(
          #toQrUri,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toQrUri,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toQrUri,
            [],
          ),
        ),
      ) as String);

  @override
  bool isValidForNetwork({required _i3.Network? network}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isValidForNetwork,
          [],
          {#network: network},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Network network() => (super.noSuchMethod(
        Invocation.method(
          #network,
          [],
        ),
        returnValue: _i3.Network.testnet,
        returnValueForMissingStub: _i3.Network.testnet,
      ) as _i3.Network);

  @override
  _i3.Payload payload() => (super.noSuchMethod(
        Invocation.method(
          #payload,
          [],
        ),
        returnValue: _i6.dummyValue<_i3.Payload>(
          this,
          Invocation.method(
            #payload,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<_i3.Payload>(
          this,
          Invocation.method(
            #payload,
            [],
          ),
        ),
      ) as _i3.Payload);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [DerivationPath].
///
/// See the documentation for Mockito's code generation for more information.
class MockDerivationPath extends _i1.Mock implements _i3.DerivationPath {
  @override
  _i2.DerivationPath get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeDerivationPath_19(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeDerivationPath_19(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.DerivationPath);

  @override
  String asString() => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [FeeRate].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeeRate extends _i1.Mock implements _i3.FeeRate {
  @override
  double get satPerVb => (super.noSuchMethod(
        Invocation.getter(#satPerVb),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [LocalUtxo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalUtxo extends _i1.Mock implements _i3.LocalUtxo {
  @override
  _i3.OutPoint get outpoint => (super.noSuchMethod(
        Invocation.getter(#outpoint),
        returnValue: _FakeOutPoint_20(
          this,
          Invocation.getter(#outpoint),
        ),
        returnValueForMissingStub: _FakeOutPoint_20(
          this,
          Invocation.getter(#outpoint),
        ),
      ) as _i3.OutPoint);

  @override
  _i3.TxOut get txout => (super.noSuchMethod(
        Invocation.getter(#txout),
        returnValue: _FakeTxOut_21(
          this,
          Invocation.getter(#txout),
        ),
        returnValueForMissingStub: _FakeTxOut_21(
          this,
          Invocation.getter(#txout),
        ),
      ) as _i3.TxOut);

  @override
  _i3.KeychainKind get keychain => (super.noSuchMethod(
        Invocation.getter(#keychain),
        returnValue: _i3.KeychainKind.externalChain,
        returnValueForMissingStub: _i3.KeychainKind.externalChain,
      ) as _i3.KeychainKind);

  @override
  bool get isSpent => (super.noSuchMethod(
        Invocation.getter(#isSpent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [TransactionDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDetails extends _i1.Mock
    implements _i3.TransactionDetails {
  @override
  String get txid => (super.noSuchMethod(
        Invocation.getter(#txid),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
      ) as String);

  @override
  BigInt get received => (super.noSuchMethod(
        Invocation.getter(#received),
        returnValue: _i6.dummyValue<BigInt>(
          this,
          Invocation.getter(#received),
        ),
        returnValueForMissingStub: _i6.dummyValue<BigInt>(
          this,
          Invocation.getter(#received),
        ),
      ) as BigInt);

  @override
  BigInt get sent => (super.noSuchMethod(
        Invocation.getter(#sent),
        returnValue: _i6.dummyValue<BigInt>(
          this,
          Invocation.getter(#sent),
        ),
        returnValueForMissingStub: _i6.dummyValue<BigInt>(
          this,
          Invocation.getter(#sent),
        ),
      ) as BigInt);
}
