// Mocks generated by Mockito 5.4.4 from annotations
// in bdk_flutter/test/bdk_flutter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:typed_data' as _i11;

import 'package:bdk_flutter/src/generated/api/blockchain.dart' as _i5;
import 'package:bdk_flutter/src/generated/api/descriptor.dart' as _i6;
import 'package:bdk_flutter/src/generated/api/key.dart' as _i8;
import 'package:bdk_flutter/src/generated/api/psbt.dart' as _i7;
import 'package:bdk_flutter/src/generated/api/types.dart' as _i4;
import 'package:bdk_flutter/src/generated/api/wallet.dart' as _i2;
import 'package:bdk_flutter/src/root.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMutexBdkWalletAnyDatabase_0 extends _i1.SmartFake
    implements _i2.MutexBdkWalletAnyDatabase {
  _FakeMutexBdkWalletAnyDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressInfo_1 extends _i1.SmartFake implements _i3.AddressInfo {
  _FakeAddressInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBalance_2 extends _i1.SmartFake implements _i4.Balance {
  _FakeBalance_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptor_3 extends _i1.SmartFake implements _i3.Descriptor {
  _FakeDescriptor_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInput_4 extends _i1.SmartFake implements _i4.Input {
  _FakeInput_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAnyBlockchain_5 extends _i1.SmartFake implements _i5.AnyBlockchain {
  _FakeAnyBlockchain_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeeRate_6 extends _i1.SmartFake implements _i4.FeeRate {
  _FakeFeeRate_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeysDescriptorSecretKey_7 extends _i1.SmartFake
    implements _i6.KeysDescriptorSecretKey {
  _FakeKeysDescriptorSecretKey_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorSecretKey_8 extends _i1.SmartFake
    implements _i3.DescriptorSecretKey {
  _FakeDescriptorSecretKey_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDescriptorPublicKey_9 extends _i1.SmartFake
    implements _i3.DescriptorPublicKey {
  _FakeDescriptorPublicKey_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeysDescriptorPublicKey_10 extends _i1.SmartFake
    implements _i6.KeysDescriptorPublicKey {
  _FakeKeysDescriptorPublicKey_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMutexPartiallySignedTransaction_11 extends _i1.SmartFake
    implements _i7.MutexPartiallySignedTransaction {
  _FakeMutexPartiallySignedTransaction_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_12 extends _i1.SmartFake implements _i3.Transaction {
  _FakeTransaction_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePartiallySignedTransaction_13 extends _i1.SmartFake
    implements _i3.PartiallySignedTransaction {
  _FakePartiallySignedTransaction_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTxBuilder_14 extends _i1.SmartFake implements _i3.TxBuilder {
  _FakeTxBuilder_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionDetails_15 extends _i1.SmartFake
    implements _i4.TransactionDetails {
  _FakeTransactionDetails_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBumpFeeTxBuilder_16 extends _i1.SmartFake
    implements _i3.BumpFeeTxBuilder {
  _FakeBumpFeeTxBuilder_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBdkBitcoinAddress_17 extends _i1.SmartFake
    implements _i4.BdkBitcoinAddress {
  _FakeBdkBitcoinAddress_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScriptBuf_18 extends _i1.SmartFake implements _i3.ScriptBuf {
  _FakeScriptBuf_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBitcoinBip32DerivationPath_19 extends _i1.SmartFake
    implements _i8.BitcoinBip32DerivationPath {
  _FakeBitcoinBip32DerivationPath_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutPoint_20 extends _i1.SmartFake implements _i4.OutPoint {
  _FakeOutPoint_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTxOut_21 extends _i1.SmartFake implements _i4.TxOut {
  _FakeTxOut_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Wallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallet extends _i1.Mock implements _i3.Wallet {
  @override
  _i2.MutexBdkWalletAnyDatabase get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeMutexBdkWalletAnyDatabase_0(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeMutexBdkWalletAnyDatabase_0(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i2.MutexBdkWalletAnyDatabase);

  @override
  _i9.Future<_i3.AddressInfo> getAddress({
    required _i4.AddressIndex? addressIndex,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddress,
          [],
          {
            #addressIndex: addressIndex,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i3.AddressInfo>.value(_FakeAddressInfo_1(
          this,
          Invocation.method(
            #getAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.AddressInfo>.value(_FakeAddressInfo_1(
          this,
          Invocation.method(
            #getAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i3.AddressInfo>);

  @override
  _i9.Future<_i4.Balance> getBalance({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #getBalance,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i4.Balance>.value(_FakeBalance_2(
          this,
          Invocation.method(
            #getBalance,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.Balance>.value(_FakeBalance_2(
          this,
          Invocation.method(
            #getBalance,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<_i4.Balance>);

  @override
  _i9.Future<_i3.Descriptor> getDescriptorForKeychain({
    required _i4.KeychainKind? keychain,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDescriptorForKeychain,
          [],
          {
            #keychain: keychain,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i3.Descriptor>.value(_FakeDescriptor_3(
          this,
          Invocation.method(
            #getDescriptorForKeychain,
            [],
            {
              #keychain: keychain,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.Descriptor>.value(_FakeDescriptor_3(
          this,
          Invocation.method(
            #getDescriptorForKeychain,
            [],
            {
              #keychain: keychain,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i3.Descriptor>);

  @override
  _i9.Future<_i3.AddressInfo> getInternalAddress({
    required _i4.AddressIndex? addressIndex,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInternalAddress,
          [],
          {
            #addressIndex: addressIndex,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i3.AddressInfo>.value(_FakeAddressInfo_1(
          this,
          Invocation.method(
            #getInternalAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.AddressInfo>.value(_FakeAddressInfo_1(
          this,
          Invocation.method(
            #getInternalAddress,
            [],
            {
              #addressIndex: addressIndex,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i3.AddressInfo>);

  @override
  _i9.Future<_i4.Input> getPsbtInput({
    required _i4.LocalUtxo? utxo,
    required bool? onlyWitnessUtxo,
    _i4.PsbtSigHashType? sighashType,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPsbtInput,
          [],
          {
            #utxo: utxo,
            #onlyWitnessUtxo: onlyWitnessUtxo,
            #sighashType: sighashType,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i4.Input>.value(_FakeInput_4(
          this,
          Invocation.method(
            #getPsbtInput,
            [],
            {
              #utxo: utxo,
              #onlyWitnessUtxo: onlyWitnessUtxo,
              #sighashType: sighashType,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.Input>.value(_FakeInput_4(
          this,
          Invocation.method(
            #getPsbtInput,
            [],
            {
              #utxo: utxo,
              #onlyWitnessUtxo: onlyWitnessUtxo,
              #sighashType: sighashType,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i4.Input>);

  @override
  _i9.Future<bool> isMine({
    required _i4.BdkScriptBuf? script,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isMine,
          [],
          {
            #script: script,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<List<_i4.TransactionDetails>> listTransactions({
    required bool? includeRaw,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listTransactions,
          [],
          {
            #includeRaw: includeRaw,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<List<_i4.TransactionDetails>>.value(
            <_i4.TransactionDetails>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.TransactionDetails>>.value(
                <_i4.TransactionDetails>[]),
      ) as _i9.Future<List<_i4.TransactionDetails>>);

  @override
  _i9.Future<List<_i4.LocalUtxo>> listUnspent({dynamic hint}) =>
      (super.noSuchMethod(
        Invocation.method(
          #listUnspent,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<List<_i4.LocalUtxo>>.value(<_i4.LocalUtxo>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.LocalUtxo>>.value(<_i4.LocalUtxo>[]),
      ) as _i9.Future<List<_i4.LocalUtxo>>);

  @override
  _i9.Future<_i4.Network> network({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #network,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i4.Network>.value(_i4.Network.testnet),
        returnValueForMissingStub:
            _i9.Future<_i4.Network>.value(_i4.Network.testnet),
      ) as _i9.Future<_i4.Network>);

  @override
  _i9.Future<bool> sign({
    required _i3.PartiallySignedTransaction? psbt,
    _i4.SignOptions? signOptions,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sign,
          [],
          {
            #psbt: psbt,
            #signOptions: signOptions,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> sync({
    required _i3.Blockchain? blockchain,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sync,
          [],
          {
            #blockchain: blockchain,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [Transaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransaction extends _i1.Mock implements _i3.Transaction {
  @override
  String get inner => (super.noSuchMethod(
        Invocation.getter(#inner),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#inner),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#inner),
        ),
      ) as String);

  @override
  _i9.Future<List<_i4.TxIn>> input({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #input,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<List<_i4.TxIn>>.value(<_i4.TxIn>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.TxIn>>.value(<_i4.TxIn>[]),
      ) as _i9.Future<List<_i4.TxIn>>);

  @override
  _i9.Future<bool> isCoinBase({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #isCoinBase,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> isExplicitlyRbf({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #isExplicitlyRbf,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> isLockTimeEnabled({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #isLockTimeEnabled,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i4.LockTime> lockTime({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #lockTime,
          [],
          {#hint: hint},
        ),
        returnValue:
            _i9.Future<_i4.LockTime>.value(_i10.dummyValue<_i4.LockTime>(
          this,
          Invocation.method(
            #lockTime,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i4.LockTime>.value(_i10.dummyValue<_i4.LockTime>(
          this,
          Invocation.method(
            #lockTime,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<_i4.LockTime>);

  @override
  _i9.Future<List<_i4.TxOut>> output({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #output,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<List<_i4.TxOut>>.value(<_i4.TxOut>[]),
        returnValueForMissingStub:
            _i9.Future<List<_i4.TxOut>>.value(<_i4.TxOut>[]),
      ) as _i9.Future<List<_i4.TxOut>>);

  @override
  _i9.Future<_i11.Uint8List> serialize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
        returnValueForMissingStub:
            _i9.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i9.Future<_i11.Uint8List>);

  @override
  _i9.Future<int> size({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #size,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<String> txid({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #txid,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<int> version({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #version,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> vsize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #vsize,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> weight({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #weight,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);
}

/// A class which mocks [Blockchain].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockchain extends _i1.Mock implements _i3.Blockchain {
  @override
  _i5.AnyBlockchain get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeAnyBlockchain_5(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeAnyBlockchain_5(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i5.AnyBlockchain);

  @override
  _i9.Future<_i4.FeeRate> estimateFee({
    required int? target,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFee,
          [],
          {
            #target: target,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i4.FeeRate>.value(_FakeFeeRate_6(
          this,
          Invocation.method(
            #estimateFee,
            [],
            {
              #target: target,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i4.FeeRate>.value(_FakeFeeRate_6(
          this,
          Invocation.method(
            #estimateFee,
            [],
            {
              #target: target,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i4.FeeRate>);

  @override
  _i9.Future<String> broadcast({
    required _i4.BdkTransaction? transaction,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcast,
          [],
          {
            #transaction: transaction,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #broadcast,
            [],
            {
              #transaction: transaction,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #broadcast,
            [],
            {
              #transaction: transaction,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> getBlockHash({
    required int? height,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBlockHash,
          [],
          {
            #height: height,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockHash,
            [],
            {
              #height: height,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getBlockHash,
            [],
            {
              #height: height,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<int> getHeight({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #getHeight,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int>.value(0),
        returnValueForMissingStub: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);
}

/// A class which mocks [DescriptorSecretKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescriptorSecretKey extends _i1.Mock
    implements _i3.DescriptorSecretKey {
  @override
  _i6.KeysDescriptorSecretKey get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeKeysDescriptorSecretKey_7(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeKeysDescriptorSecretKey_7(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i6.KeysDescriptorSecretKey);

  @override
  _i9.Future<_i3.DescriptorSecretKey> derive(_i8.BdkDerivationPath? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #derive,
          [path],
        ),
        returnValue: _i9.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #derive,
            [path],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #derive,
            [path],
          ),
        )),
      ) as _i9.Future<_i3.DescriptorSecretKey>);

  @override
  _i9.Future<_i3.DescriptorSecretKey> extend(_i8.BdkDerivationPath? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #extend,
          [path],
        ),
        returnValue: _i9.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #extend,
            [path],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.DescriptorSecretKey>.value(
            _FakeDescriptorSecretKey_8(
          this,
          Invocation.method(
            #extend,
            [path],
          ),
        )),
      ) as _i9.Future<_i3.DescriptorSecretKey>);

  @override
  _i9.Future<_i3.DescriptorPublicKey> asPublic() => (super.noSuchMethod(
        Invocation.method(
          #asPublic,
          [],
        ),
        returnValue: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #asPublic,
            [],
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #asPublic,
            [],
          ),
        )),
      ) as _i9.Future<_i3.DescriptorPublicKey>);

  @override
  _i9.Future<String> asString({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i11.Uint8List> secretBytes({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #secretBytes,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
        returnValueForMissingStub:
            _i9.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i9.Future<_i11.Uint8List>);
}

/// A class which mocks [DescriptorPublicKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescriptorPublicKey extends _i1.Mock
    implements _i3.DescriptorPublicKey {
  @override
  _i6.KeysDescriptorPublicKey get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeKeysDescriptorPublicKey_10(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeKeysDescriptorPublicKey_10(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i6.KeysDescriptorPublicKey);

  @override
  _i9.Future<String> asString({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i3.DescriptorPublicKey> derive({
    required _i8.BdkDerivationPath? path,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #derive,
          [],
          {
            #path: path,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #derive,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #derive,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i3.DescriptorPublicKey>);

  @override
  _i9.Future<_i3.DescriptorPublicKey> extend({
    required _i8.BdkDerivationPath? path,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #extend,
          [],
          {
            #path: path,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #extend,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
        returnValueForMissingStub: _i9.Future<_i3.DescriptorPublicKey>.value(
            _FakeDescriptorPublicKey_9(
          this,
          Invocation.method(
            #extend,
            [],
            {
              #path: path,
              #hint: hint,
            },
          ),
        )),
      ) as _i9.Future<_i3.DescriptorPublicKey>);
}

/// A class which mocks [PartiallySignedTransaction].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartiallySignedTransaction extends _i1.Mock
    implements _i3.PartiallySignedTransaction {
  @override
  _i7.MutexPartiallySignedTransaction get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeMutexPartiallySignedTransaction_11(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeMutexPartiallySignedTransaction_11(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i7.MutexPartiallySignedTransaction);

  @override
  _i9.Future<int?> feeAmount({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #feeAmount,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<int?>.value(),
        returnValueForMissingStub: _i9.Future<int?>.value(),
      ) as _i9.Future<int?>);

  @override
  _i9.Future<_i4.FeeRate?> feeRate({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #feeRate,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i4.FeeRate?>.value(),
        returnValueForMissingStub: _i9.Future<_i4.FeeRate?>.value(),
      ) as _i9.Future<_i4.FeeRate?>);

  @override
  _i9.Future<String> jsonSerialize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #jsonSerialize,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #jsonSerialize,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #jsonSerialize,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<String> serialize({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #serialize,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #serialize,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #serialize,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<_i3.Transaction> extractTx() => (super.noSuchMethod(
        Invocation.method(
          #extractTx,
          [],
        ),
        returnValue: _i9.Future<_i3.Transaction>.value(_FakeTransaction_12(
          this,
          Invocation.method(
            #extractTx,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.Transaction>.value(_FakeTransaction_12(
          this,
          Invocation.method(
            #extractTx,
            [],
          ),
        )),
      ) as _i9.Future<_i3.Transaction>);

  @override
  _i9.Future<_i3.PartiallySignedTransaction> combine(
          _i3.PartiallySignedTransaction? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #combine,
          [other],
        ),
        returnValue: _i9.Future<_i3.PartiallySignedTransaction>.value(
            _FakePartiallySignedTransaction_13(
          this,
          Invocation.method(
            #combine,
            [other],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.PartiallySignedTransaction>.value(
                _FakePartiallySignedTransaction_13(
          this,
          Invocation.method(
            #combine,
            [other],
          ),
        )),
      ) as _i9.Future<_i3.PartiallySignedTransaction>);

  @override
  _i9.Future<String> txid({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #txid,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #txid,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);
}

/// A class which mocks [TxBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockTxBuilder extends _i1.Mock implements _i3.TxBuilder {
  @override
  _i3.TxBuilder addData({required List<int>? data}) => (super.noSuchMethod(
        Invocation.method(
          #addData,
          [],
          {#data: data},
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addData,
            [],
            {#data: data},
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addData,
            [],
            {#data: data},
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addRecipient(
    _i3.ScriptBuf? script,
    int? amount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecipient,
          [
            script,
            amount,
          ],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addRecipient,
            [
              script,
              amount,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addRecipient,
            [
              script,
              amount,
            ],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder unSpendable(List<_i4.OutPoint>? outpoints) =>
      (super.noSuchMethod(
        Invocation.method(
          #unSpendable,
          [outpoints],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #unSpendable,
            [outpoints],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #unSpendable,
            [outpoints],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUtxo(_i4.OutPoint? outpoint) => (super.noSuchMethod(
        Invocation.method(
          #addUtxo,
          [outpoint],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxo,
            [outpoint],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxo,
            [outpoint],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUtxos(List<_i4.OutPoint>? outpoints) => (super.noSuchMethod(
        Invocation.method(
          #addUtxos,
          [outpoints],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxos,
            [outpoints],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUtxos,
            [outpoints],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addForeignUtxo(
    _i4.Input? psbtInput,
    _i4.OutPoint? outPoint,
    int? satisfactionWeight,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addForeignUtxo,
          [
            psbtInput,
            outPoint,
            satisfactionWeight,
          ],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addForeignUtxo,
            [
              psbtInput,
              outPoint,
              satisfactionWeight,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addForeignUtxo,
            [
              psbtInput,
              outPoint,
              satisfactionWeight,
            ],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder doNotSpendChange() => (super.noSuchMethod(
        Invocation.method(
          #doNotSpendChange,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #doNotSpendChange,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #doNotSpendChange,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder drainWallet() => (super.noSuchMethod(
        Invocation.method(
          #drainWallet,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainWallet,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainWallet,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder drainTo(_i3.ScriptBuf? script) => (super.noSuchMethod(
        Invocation.method(
          #drainTo,
          [script],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainTo,
            [script],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #drainTo,
            [script],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder enableRbfWithSequence(int? nSequence) => (super.noSuchMethod(
        Invocation.method(
          #enableRbfWithSequence,
          [nSequence],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder enableRbf() => (super.noSuchMethod(
        Invocation.method(
          #enableRbf,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder feeAbsolute(int? feeAmount) => (super.noSuchMethod(
        Invocation.method(
          #feeAbsolute,
          [feeAmount],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeAbsolute,
            [feeAmount],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeAbsolute,
            [feeAmount],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder feeRate(double? satPerVbyte) => (super.noSuchMethod(
        Invocation.method(
          #feeRate,
          [satPerVbyte],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeRate,
            [satPerVbyte],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #feeRate,
            [satPerVbyte],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder setRecipients(List<_i4.ScriptAmount>? recipients) =>
      (super.noSuchMethod(
        Invocation.method(
          #setRecipients,
          [recipients],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #setRecipients,
            [recipients],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #setRecipients,
            [recipients],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder manuallySelectedOnly() => (super.noSuchMethod(
        Invocation.method(
          #manuallySelectedOnly,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #manuallySelectedOnly,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #manuallySelectedOnly,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder addUnSpendable(_i4.OutPoint? unSpendable) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUnSpendable,
          [unSpendable],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUnSpendable,
            [unSpendable],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #addUnSpendable,
            [unSpendable],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i3.TxBuilder onlySpendChange() => (super.noSuchMethod(
        Invocation.method(
          #onlySpendChange,
          [],
        ),
        returnValue: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #onlySpendChange,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTxBuilder_14(
          this,
          Invocation.method(
            #onlySpendChange,
            [],
          ),
        ),
      ) as _i3.TxBuilder);

  @override
  _i9.Future<(_i3.PartiallySignedTransaction, _i4.TransactionDetails)> finish(
          _i3.Wallet? wallet) =>
      (super.noSuchMethod(
        Invocation.method(
          #finish,
          [wallet],
        ),
        returnValue: _i9.Future<
            (_i3.PartiallySignedTransaction, _i4.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
        returnValueForMissingStub: _i9.Future<
            (_i3.PartiallySignedTransaction, _i4.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
      ) as _i9
          .Future<(_i3.PartiallySignedTransaction, _i4.TransactionDetails)>);
}

/// A class which mocks [BumpFeeTxBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockBumpFeeTxBuilder extends _i1.Mock implements _i3.BumpFeeTxBuilder {
  @override
  String get txid => (super.noSuchMethod(
        Invocation.getter(#txid),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
      ) as String);

  @override
  double get feeRate => (super.noSuchMethod(
        Invocation.getter(#feeRate),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i3.BumpFeeTxBuilder allowShrinking(_i3.Address? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #allowShrinking,
          [address],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #allowShrinking,
            [address],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #allowShrinking,
            [address],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i3.BumpFeeTxBuilder enableRbf() => (super.noSuchMethod(
        Invocation.method(
          #enableRbf,
          [],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbf,
            [],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i3.BumpFeeTxBuilder enableRbfWithSequence(int? nSequence) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableRbfWithSequence,
          [nSequence],
        ),
        returnValue: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
        returnValueForMissingStub: _FakeBumpFeeTxBuilder_16(
          this,
          Invocation.method(
            #enableRbfWithSequence,
            [nSequence],
          ),
        ),
      ) as _i3.BumpFeeTxBuilder);

  @override
  _i9.Future<(_i3.PartiallySignedTransaction, _i4.TransactionDetails)> finish(
          _i3.Wallet? wallet) =>
      (super.noSuchMethod(
        Invocation.method(
          #finish,
          [wallet],
        ),
        returnValue: _i9.Future<
            (_i3.PartiallySignedTransaction, _i4.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
        returnValueForMissingStub: _i9.Future<
            (_i3.PartiallySignedTransaction, _i4.TransactionDetails)>.value((
          _FakePartiallySignedTransaction_13(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          ),
          _FakeTransactionDetails_15(
            this,
            Invocation.method(
              #finish,
              [wallet],
            ),
          )
        )),
      ) as _i9
          .Future<(_i3.PartiallySignedTransaction, _i4.TransactionDetails)>);
}

/// A class which mocks [ScriptBuf].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptBuf extends _i1.Mock implements _i3.ScriptBuf {
  @override
  _i11.Uint8List get bytes => (super.noSuchMethod(
        Invocation.getter(#bytes),
        returnValue: _i11.Uint8List(0),
        returnValueForMissingStub: _i11.Uint8List(0),
      ) as _i11.Uint8List);
}

/// A class which mocks [Address].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddress extends _i1.Mock implements _i3.Address {
  @override
  _i4.BdkBitcoinAddress get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeBdkBitcoinAddress_17(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeBdkBitcoinAddress_17(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i4.BdkBitcoinAddress);

  @override
  _i9.Future<_i3.ScriptBuf> scriptPubkey() => (super.noSuchMethod(
        Invocation.method(
          #scriptPubkey,
          [],
        ),
        returnValue: _i9.Future<_i3.ScriptBuf>.value(_FakeScriptBuf_18(
          this,
          Invocation.method(
            #scriptPubkey,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i3.ScriptBuf>.value(_FakeScriptBuf_18(
          this,
          Invocation.method(
            #scriptPubkey,
            [],
          ),
        )),
      ) as _i9.Future<_i3.ScriptBuf>);

  @override
  _i9.Future<String> asString({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #asString,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #asString,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);

  @override
  _i9.Future<bool> isValidForNetwork({
    required _i4.Network? network,
    dynamic hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isValidForNetwork,
          [],
          {
            #network: network,
            #hint: hint,
          },
        ),
        returnValue: _i9.Future<bool>.value(false),
        returnValueForMissingStub: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i4.Network> network({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #network,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i4.Network>.value(_i4.Network.testnet),
        returnValueForMissingStub:
            _i9.Future<_i4.Network>.value(_i4.Network.testnet),
      ) as _i9.Future<_i4.Network>);

  @override
  _i9.Future<_i4.Payload> payload({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #payload,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<_i4.Payload>.value(_i10.dummyValue<_i4.Payload>(
          this,
          Invocation.method(
            #payload,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<_i4.Payload>.value(_i10.dummyValue<_i4.Payload>(
          this,
          Invocation.method(
            #payload,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<_i4.Payload>);

  @override
  _i9.Future<String> toQrUri({dynamic hint}) => (super.noSuchMethod(
        Invocation.method(
          #toQrUri,
          [],
          {#hint: hint},
        ),
        returnValue: _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #toQrUri,
            [],
            {#hint: hint},
          ),
        )),
        returnValueForMissingStub:
            _i9.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #toQrUri,
            [],
            {#hint: hint},
          ),
        )),
      ) as _i9.Future<String>);
}

/// A class which mocks [DerivationPath].
///
/// See the documentation for Mockito's code generation for more information.
class MockDerivationPath extends _i1.Mock implements _i3.DerivationPath {
  @override
  _i8.BitcoinBip32DerivationPath get ptr => (super.noSuchMethod(
        Invocation.getter(#ptr),
        returnValue: _FakeBitcoinBip32DerivationPath_19(
          this,
          Invocation.getter(#ptr),
        ),
        returnValueForMissingStub: _FakeBitcoinBip32DerivationPath_19(
          this,
          Invocation.getter(#ptr),
        ),
      ) as _i8.BitcoinBip32DerivationPath);
}

/// A class which mocks [FeeRate].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeeRate extends _i1.Mock implements _i4.FeeRate {
  @override
  double get satPerVb => (super.noSuchMethod(
        Invocation.getter(#satPerVb),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [LocalUtxo].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalUtxo extends _i1.Mock implements _i4.LocalUtxo {
  @override
  _i4.OutPoint get outpoint => (super.noSuchMethod(
        Invocation.getter(#outpoint),
        returnValue: _FakeOutPoint_20(
          this,
          Invocation.getter(#outpoint),
        ),
        returnValueForMissingStub: _FakeOutPoint_20(
          this,
          Invocation.getter(#outpoint),
        ),
      ) as _i4.OutPoint);

  @override
  _i4.TxOut get txout => (super.noSuchMethod(
        Invocation.getter(#txout),
        returnValue: _FakeTxOut_21(
          this,
          Invocation.getter(#txout),
        ),
        returnValueForMissingStub: _FakeTxOut_21(
          this,
          Invocation.getter(#txout),
        ),
      ) as _i4.TxOut);

  @override
  _i4.KeychainKind get keychain => (super.noSuchMethod(
        Invocation.getter(#keychain),
        returnValue: _i4.KeychainKind.externalChain,
        returnValueForMissingStub: _i4.KeychainKind.externalChain,
      ) as _i4.KeychainKind);

  @override
  bool get isSpent => (super.noSuchMethod(
        Invocation.getter(#isSpent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [TransactionDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDetails extends _i1.Mock
    implements _i4.TransactionDetails {
  @override
  String get txid => (super.noSuchMethod(
        Invocation.getter(#txid),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#txid),
        ),
      ) as String);

  @override
  int get received => (super.noSuchMethod(
        Invocation.getter(#received),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get sent => (super.noSuchMethod(
        Invocation.getter(#sent),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
