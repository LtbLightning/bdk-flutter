// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.30.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/blockchain.dart';
import 'api/descriptor.dart';
import 'api/error.dart';
import 'api/key.dart';
import 'api/psbt.dart';
import 'api/types.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class BdkCoreApiImplPlatform extends BaseApiImpl<BdkCoreWire> {
  BdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AnyBlockchainPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_AnyBlockchain;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtendedDescriptorPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_ExtendedDescriptor;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexPartiallySignedTransactionPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexPartiallySignedTransaction;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexBdkWalletAnyDatabasePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexbdkWalletAnyDatabase;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkBitcoinAddressPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BitcoinBip32DerivationPathPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_bitcoinbip32DerivationPath;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_KeysDescriptorPublicKeyPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_keysDescriptorPublicKey;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_KeysDescriptorSecretKeyPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_keysDescriptorSecretKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeysKeyMapPtr =>
      wire.rust_arc_decrement_strong_count_RustOpaque_keysKeyMap;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_KeysBip39MnemonicPtr =>
          wire.rust_arc_decrement_strong_count_RustOpaque_keysbip39Mnemonic;

  @protected
  AnyBlockchain dco_decode_RustOpaque_AnyBlockchain(dynamic raw);

  @protected
  ExtendedDescriptor dco_decode_RustOpaque_ExtendedDescriptor(dynamic raw);

  @protected
  MutexPartiallySignedTransaction
      dco_decode_RustOpaque_MutexPartiallySignedTransaction(dynamic raw);

  @protected
  MutexBdkWalletAnyDatabase dco_decode_RustOpaque_MutexbdkWalletAnyDatabase(
      dynamic raw);

  @protected
  BdkBitcoinAddress dco_decode_RustOpaque_bdkbitcoinAddress(dynamic raw);

  @protected
  BitcoinBip32DerivationPath dco_decode_RustOpaque_bitcoinbip32DerivationPath(
      dynamic raw);

  @protected
  KeysDescriptorPublicKey dco_decode_RustOpaque_keysDescriptorPublicKey(
      dynamic raw);

  @protected
  KeysDescriptorSecretKey dco_decode_RustOpaque_keysDescriptorSecretKey(
      dynamic raw);

  @protected
  KeysKeyMap dco_decode_RustOpaque_keysKeyMap(dynamic raw);

  @protected
  KeysBip39Mnemonic dco_decode_RustOpaque_keysbip39Mnemonic(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressError dco_decode_address_error(dynamic raw);

  @protected
  AddressIndex dco_decode_address_index(dynamic raw);

  @protected
  Auth dco_decode_auth(dynamic raw);

  @protected
  Balance dco_decode_balance(dynamic raw);

  @protected
  BdkAddress dco_decode_bdk_address(dynamic raw);

  @protected
  BdkBlockchain dco_decode_bdk_blockchain(dynamic raw);

  @protected
  BdkDerivationPath dco_decode_bdk_derivation_path(dynamic raw);

  @protected
  BdkDescriptor dco_decode_bdk_descriptor(dynamic raw);

  @protected
  BdkDescriptorPublicKey dco_decode_bdk_descriptor_public_key(dynamic raw);

  @protected
  BdkDescriptorSecretKey dco_decode_bdk_descriptor_secret_key(dynamic raw);

  @protected
  BdkError dco_decode_bdk_error(dynamic raw);

  @protected
  BdkMnemonic dco_decode_bdk_mnemonic(dynamic raw);

  @protected
  BdkPsbt dco_decode_bdk_psbt(dynamic raw);

  @protected
  BdkScriptBuf dco_decode_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction dco_decode_bdk_transaction(dynamic raw);

  @protected
  BdkWallet dco_decode_bdk_wallet(dynamic raw);

  @protected
  BlockTime dco_decode_block_time(dynamic raw);

  @protected
  BlockchainConfig dco_decode_blockchain_config(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AddressError dco_decode_box_autoadd_address_error(dynamic raw);

  @protected
  AddressIndex dco_decode_box_autoadd_address_index(dynamic raw);

  @protected
  BdkAddress dco_decode_box_autoadd_bdk_address(dynamic raw);

  @protected
  BdkBlockchain dco_decode_box_autoadd_bdk_blockchain(dynamic raw);

  @protected
  BdkDerivationPath dco_decode_box_autoadd_bdk_derivation_path(dynamic raw);

  @protected
  BdkDescriptor dco_decode_box_autoadd_bdk_descriptor(dynamic raw);

  @protected
  BdkDescriptorPublicKey dco_decode_box_autoadd_bdk_descriptor_public_key(
      dynamic raw);

  @protected
  BdkDescriptorSecretKey dco_decode_box_autoadd_bdk_descriptor_secret_key(
      dynamic raw);

  @protected
  BdkMnemonic dco_decode_box_autoadd_bdk_mnemonic(dynamic raw);

  @protected
  BdkPsbt dco_decode_box_autoadd_bdk_psbt(dynamic raw);

  @protected
  BdkScriptBuf dco_decode_box_autoadd_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction dco_decode_box_autoadd_bdk_transaction(dynamic raw);

  @protected
  BdkWallet dco_decode_box_autoadd_bdk_wallet(dynamic raw);

  @protected
  BlockTime dco_decode_box_autoadd_block_time(dynamic raw);

  @protected
  BlockchainConfig dco_decode_box_autoadd_blockchain_config(dynamic raw);

  @protected
  ConsensusError dco_decode_box_autoadd_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_box_autoadd_database_config(dynamic raw);

  @protected
  DescriptorError dco_decode_box_autoadd_descriptor_error(dynamic raw);

  @protected
  ElectrumConfig dco_decode_box_autoadd_electrum_config(dynamic raw);

  @protected
  EsploraConfig dco_decode_box_autoadd_esplora_config(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  FeeRate dco_decode_box_autoadd_fee_rate(dynamic raw);

  @protected
  HexError dco_decode_box_autoadd_hex_error(dynamic raw);

  @protected
  Input dco_decode_box_autoadd_input(dynamic raw);

  @protected
  LocalUtxo dco_decode_box_autoadd_local_utxo(dynamic raw);

  @protected
  LockTime dco_decode_box_autoadd_lock_time(dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  PsbtSigHashType dco_decode_box_autoadd_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue dco_decode_box_autoadd_rbf_value(dynamic raw);

  @protected
  (OutPoint, Input, int) dco_decode_box_autoadd_record_out_point_input_usize(
      dynamic raw);

  @protected
  RpcConfig dco_decode_box_autoadd_rpc_config(dynamic raw);

  @protected
  RpcSyncParams dco_decode_box_autoadd_rpc_sync_params(dynamic raw);

  @protected
  SignOptions dco_decode_box_autoadd_sign_options(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_box_autoadd_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_box_autoadd_sqlite_db_configuration(
      dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  ChangeSpendPolicy dco_decode_change_spend_policy(dynamic raw);

  @protected
  ConsensusError dco_decode_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_database_config(dynamic raw);

  @protected
  DescriptorError dco_decode_descriptor_error(dynamic raw);

  @protected
  ElectrumConfig dco_decode_electrum_config(dynamic raw);

  @protected
  EsploraConfig dco_decode_esplora_config(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  FeeRate dco_decode_fee_rate(dynamic raw);

  @protected
  HexError dco_decode_hex_error(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Input dco_decode_input(dynamic raw);

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<LocalUtxo> dco_decode_list_local_utxo(dynamic raw);

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<ScriptAmount> dco_decode_list_script_amount(dynamic raw);

  @protected
  List<TransactionDetails> dco_decode_list_transaction_details(dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  LocalUtxo dco_decode_local_utxo(dynamic raw);

  @protected
  LockTime dco_decode_lock_time(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  BdkAddress? dco_decode_opt_box_autoadd_bdk_address(dynamic raw);

  @protected
  BdkDescriptor? dco_decode_opt_box_autoadd_bdk_descriptor(dynamic raw);

  @protected
  BdkScriptBuf? dco_decode_opt_box_autoadd_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction? dco_decode_opt_box_autoadd_bdk_transaction(dynamic raw);

  @protected
  BlockTime? dco_decode_opt_box_autoadd_block_time(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  FeeRate? dco_decode_opt_box_autoadd_fee_rate(dynamic raw);

  @protected
  PsbtSigHashType? dco_decode_opt_box_autoadd_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue? dco_decode_opt_box_autoadd_rbf_value(dynamic raw);

  @protected
  (OutPoint, Input, int)?
      dco_decode_opt_box_autoadd_record_out_point_input_usize(dynamic raw);

  @protected
  RpcSyncParams? dco_decode_opt_box_autoadd_rpc_sync_params(dynamic raw);

  @protected
  SignOptions? dco_decode_opt_box_autoadd_sign_options(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  Payload dco_decode_payload(dynamic raw);

  @protected
  PsbtSigHashType dco_decode_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue dco_decode_rbf_value(dynamic raw);

  @protected
  (BdkAddress, int) dco_decode_record_bdk_address_u_32(dynamic raw);

  @protected
  (BdkPsbt, TransactionDetails) dco_decode_record_bdk_psbt_transaction_details(
      dynamic raw);

  @protected
  (OutPoint, Input, int) dco_decode_record_out_point_input_usize(dynamic raw);

  @protected
  RpcConfig dco_decode_rpc_config(dynamic raw);

  @protected
  RpcSyncParams dco_decode_rpc_sync_params(dynamic raw);

  @protected
  ScriptAmount dco_decode_script_amount(dynamic raw);

  @protected
  SignOptions dco_decode_sign_options(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_sqlite_db_configuration(dynamic raw);

  @protected
  TransactionDetails dco_decode_transaction_details(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  Variant dco_decode_variant(dynamic raw);

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw);

  @protected
  WordCount dco_decode_word_count(dynamic raw);

  @protected
  AnyBlockchain sse_decode_RustOpaque_AnyBlockchain(
      SseDeserializer deserializer);

  @protected
  ExtendedDescriptor sse_decode_RustOpaque_ExtendedDescriptor(
      SseDeserializer deserializer);

  @protected
  MutexPartiallySignedTransaction
      sse_decode_RustOpaque_MutexPartiallySignedTransaction(
          SseDeserializer deserializer);

  @protected
  MutexBdkWalletAnyDatabase sse_decode_RustOpaque_MutexbdkWalletAnyDatabase(
      SseDeserializer deserializer);

  @protected
  BdkBitcoinAddress sse_decode_RustOpaque_bdkbitcoinAddress(
      SseDeserializer deserializer);

  @protected
  BitcoinBip32DerivationPath sse_decode_RustOpaque_bitcoinbip32DerivationPath(
      SseDeserializer deserializer);

  @protected
  KeysDescriptorPublicKey sse_decode_RustOpaque_keysDescriptorPublicKey(
      SseDeserializer deserializer);

  @protected
  KeysDescriptorSecretKey sse_decode_RustOpaque_keysDescriptorSecretKey(
      SseDeserializer deserializer);

  @protected
  KeysKeyMap sse_decode_RustOpaque_keysKeyMap(SseDeserializer deserializer);

  @protected
  KeysBip39Mnemonic sse_decode_RustOpaque_keysbip39Mnemonic(
      SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_address_error(SseDeserializer deserializer);

  @protected
  AddressIndex sse_decode_address_index(SseDeserializer deserializer);

  @protected
  Auth sse_decode_auth(SseDeserializer deserializer);

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer);

  @protected
  BdkAddress sse_decode_bdk_address(SseDeserializer deserializer);

  @protected
  BdkBlockchain sse_decode_bdk_blockchain(SseDeserializer deserializer);

  @protected
  BdkDerivationPath sse_decode_bdk_derivation_path(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor sse_decode_bdk_descriptor(SseDeserializer deserializer);

  @protected
  BdkDescriptorPublicKey sse_decode_bdk_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorSecretKey sse_decode_bdk_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer);

  @protected
  BdkMnemonic sse_decode_bdk_mnemonic(SseDeserializer deserializer);

  @protected
  BdkPsbt sse_decode_bdk_psbt(SseDeserializer deserializer);

  @protected
  BdkScriptBuf sse_decode_bdk_script_buf(SseDeserializer deserializer);

  @protected
  BdkTransaction sse_decode_bdk_transaction(SseDeserializer deserializer);

  @protected
  BdkWallet sse_decode_bdk_wallet(SseDeserializer deserializer);

  @protected
  BlockTime sse_decode_block_time(SseDeserializer deserializer);

  @protected
  BlockchainConfig sse_decode_blockchain_config(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_box_autoadd_address_error(
      SseDeserializer deserializer);

  @protected
  AddressIndex sse_decode_box_autoadd_address_index(
      SseDeserializer deserializer);

  @protected
  BdkAddress sse_decode_box_autoadd_bdk_address(SseDeserializer deserializer);

  @protected
  BdkBlockchain sse_decode_box_autoadd_bdk_blockchain(
      SseDeserializer deserializer);

  @protected
  BdkDerivationPath sse_decode_box_autoadd_bdk_derivation_path(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor sse_decode_box_autoadd_bdk_descriptor(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorPublicKey sse_decode_box_autoadd_bdk_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorSecretKey sse_decode_box_autoadd_bdk_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  BdkMnemonic sse_decode_box_autoadd_bdk_mnemonic(SseDeserializer deserializer);

  @protected
  BdkPsbt sse_decode_box_autoadd_bdk_psbt(SseDeserializer deserializer);

  @protected
  BdkScriptBuf sse_decode_box_autoadd_bdk_script_buf(
      SseDeserializer deserializer);

  @protected
  BdkTransaction sse_decode_box_autoadd_bdk_transaction(
      SseDeserializer deserializer);

  @protected
  BdkWallet sse_decode_box_autoadd_bdk_wallet(SseDeserializer deserializer);

  @protected
  BlockTime sse_decode_box_autoadd_block_time(SseDeserializer deserializer);

  @protected
  BlockchainConfig sse_decode_box_autoadd_blockchain_config(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_box_autoadd_consensus_error(
      SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_box_autoadd_database_config(
      SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_box_autoadd_descriptor_error(
      SseDeserializer deserializer);

  @protected
  ElectrumConfig sse_decode_box_autoadd_electrum_config(
      SseDeserializer deserializer);

  @protected
  EsploraConfig sse_decode_box_autoadd_esplora_config(
      SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  HexError sse_decode_box_autoadd_hex_error(SseDeserializer deserializer);

  @protected
  Input sse_decode_box_autoadd_input(SseDeserializer deserializer);

  @protected
  LocalUtxo sse_decode_box_autoadd_local_utxo(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_box_autoadd_lock_time(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PsbtSigHashType sse_decode_box_autoadd_psbt_sig_hash_type(
      SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  (OutPoint, Input, int) sse_decode_box_autoadd_record_out_point_input_usize(
      SseDeserializer deserializer);

  @protected
  RpcConfig sse_decode_box_autoadd_rpc_config(SseDeserializer deserializer);

  @protected
  RpcSyncParams sse_decode_box_autoadd_rpc_sync_params(
      SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_box_autoadd_sign_options(SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_box_autoadd_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_box_autoadd_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  ChangeSpendPolicy sse_decode_change_spend_policy(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_consensus_error(SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_database_config(SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_descriptor_error(SseDeserializer deserializer);

  @protected
  ElectrumConfig sse_decode_electrum_config(SseDeserializer deserializer);

  @protected
  EsploraConfig sse_decode_esplora_config(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_fee_rate(SseDeserializer deserializer);

  @protected
  HexError sse_decode_hex_error(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Input sse_decode_input(SseDeserializer deserializer);

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<LocalUtxo> sse_decode_list_local_utxo(SseDeserializer deserializer);

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<ScriptAmount> sse_decode_list_script_amount(
      SseDeserializer deserializer);

  @protected
  List<TransactionDetails> sse_decode_list_transaction_details(
      SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  LocalUtxo sse_decode_local_utxo(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_lock_time(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  BdkAddress? sse_decode_opt_box_autoadd_bdk_address(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor? sse_decode_opt_box_autoadd_bdk_descriptor(
      SseDeserializer deserializer);

  @protected
  BdkScriptBuf? sse_decode_opt_box_autoadd_bdk_script_buf(
      SseDeserializer deserializer);

  @protected
  BdkTransaction? sse_decode_opt_box_autoadd_bdk_transaction(
      SseDeserializer deserializer);

  @protected
  BlockTime? sse_decode_opt_box_autoadd_block_time(
      SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  FeeRate? sse_decode_opt_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  PsbtSigHashType? sse_decode_opt_box_autoadd_psbt_sig_hash_type(
      SseDeserializer deserializer);

  @protected
  RbfValue? sse_decode_opt_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  (OutPoint, Input, int)?
      sse_decode_opt_box_autoadd_record_out_point_input_usize(
          SseDeserializer deserializer);

  @protected
  RpcSyncParams? sse_decode_opt_box_autoadd_rpc_sync_params(
      SseDeserializer deserializer);

  @protected
  SignOptions? sse_decode_opt_box_autoadd_sign_options(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer);

  @protected
  PsbtSigHashType sse_decode_psbt_sig_hash_type(SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_rbf_value(SseDeserializer deserializer);

  @protected
  (BdkAddress, int) sse_decode_record_bdk_address_u_32(
      SseDeserializer deserializer);

  @protected
  (BdkPsbt, TransactionDetails) sse_decode_record_bdk_psbt_transaction_details(
      SseDeserializer deserializer);

  @protected
  (OutPoint, Input, int) sse_decode_record_out_point_input_usize(
      SseDeserializer deserializer);

  @protected
  RpcConfig sse_decode_rpc_config(SseDeserializer deserializer);

  @protected
  RpcSyncParams sse_decode_rpc_sync_params(SseDeserializer deserializer);

  @protected
  ScriptAmount sse_decode_script_amount(SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_sign_options(SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  TransactionDetails sse_decode_transaction_details(
      SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer);

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer);

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_address_error(AddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is AddressError_Base58) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is AddressError_Bech32) {
      return [1, cst_encode_String(raw.field0)];
    }
    if (raw is AddressError_EmptyBech32Payload) {
      return [2];
    }
    if (raw is AddressError_InvalidBech32Variant) {
      return [
        3,
        cst_encode_variant(raw.expected),
        cst_encode_variant(raw.found)
      ];
    }
    if (raw is AddressError_InvalidWitnessVersion) {
      return [4, cst_encode_u_8(raw.field0)];
    }
    if (raw is AddressError_UnparsableWitnessVersion) {
      return [5, cst_encode_String(raw.field0)];
    }
    if (raw is AddressError_MalformedWitnessVersion) {
      return [6];
    }
    if (raw is AddressError_InvalidWitnessProgramLength) {
      return [7, cst_encode_usize(raw.field0)];
    }
    if (raw is AddressError_InvalidSegwitV0ProgramLength) {
      return [8, cst_encode_usize(raw.field0)];
    }
    if (raw is AddressError_UncompressedPubkey) {
      return [9];
    }
    if (raw is AddressError_ExcessiveScriptSize) {
      return [10];
    }
    if (raw is AddressError_UnrecognizedScript) {
      return [11];
    }
    if (raw is AddressError_UnknownAddressType) {
      return [12, cst_encode_String(raw.field0)];
    }
    if (raw is AddressError_NetworkValidation) {
      return [
        13,
        cst_encode_network(raw.networkRequired),
        cst_encode_network(raw.networkFound),
        cst_encode_String(raw.address)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_address_index(AddressIndex raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is AddressIndex_Increase) {
      return [0];
    }
    if (raw is AddressIndex_LastUnused) {
      return [1];
    }
    if (raw is AddressIndex_Peek) {
      return [2, cst_encode_u_32(raw.index)];
    }
    if (raw is AddressIndex_Reset) {
      return [3, cst_encode_u_32(raw.index)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_auth(Auth raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is Auth_None) {
      return [0];
    }
    if (raw is Auth_UserPass) {
      return [
        1,
        cst_encode_String(raw.username),
        cst_encode_String(raw.password)
      ];
    }
    if (raw is Auth_Cookie) {
      return [2, cst_encode_String(raw.file)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_balance(Balance raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_64(raw.immature),
      cst_encode_u_64(raw.trustedPending),
      cst_encode_u_64(raw.untrustedPending),
      cst_encode_u_64(raw.confirmed),
      cst_encode_u_64(raw.spendable),
      cst_encode_u_64(raw.total)
    ];
  }

  @protected
  List<dynamic> cst_encode_bdk_address(BdkAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_bdkbitcoinAddress(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_blockchain(BdkBlockchain raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_AnyBlockchain(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_derivation_path(BdkDerivationPath raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_bitcoinbip32DerivationPath(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_descriptor(BdkDescriptor raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_RustOpaque_ExtendedDescriptor(raw.extendedDescriptor),
      cst_encode_RustOpaque_keysKeyMap(raw.keyMap)
    ];
  }

  @protected
  List<dynamic> cst_encode_bdk_descriptor_public_key(
      BdkDescriptorPublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_keysDescriptorPublicKey(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_keysDescriptorSecretKey(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_error(BdkError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BdkError_Hex) {
      return [0, cst_encode_box_autoadd_hex_error(raw.field0)];
    }
    if (raw is BdkError_Consensus) {
      return [1, cst_encode_box_autoadd_consensus_error(raw.field0)];
    }
    if (raw is BdkError_Address) {
      return [2, cst_encode_box_autoadd_address_error(raw.field0)];
    }
    if (raw is BdkError_Descriptor) {
      return [3, cst_encode_box_autoadd_descriptor_error(raw.field0)];
    }
    if (raw is BdkError_InvalidU32Bytes) {
      return [4, cst_encode_list_prim_u_8_strict(raw.field0)];
    }
    if (raw is BdkError_Generic) {
      return [5, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_ScriptDoesntHaveAddressForm) {
      return [6];
    }
    if (raw is BdkError_NoRecipients) {
      return [7];
    }
    if (raw is BdkError_NoUtxosSelected) {
      return [8];
    }
    if (raw is BdkError_OutputBelowDustLimit) {
      return [9, cst_encode_usize(raw.field0)];
    }
    if (raw is BdkError_InsufficientFunds) {
      return [10, cst_encode_u_64(raw.needed), cst_encode_u_64(raw.available)];
    }
    if (raw is BdkError_BnBTotalTriesExceeded) {
      return [11];
    }
    if (raw is BdkError_BnBNoExactMatch) {
      return [12];
    }
    if (raw is BdkError_UnknownUtxo) {
      return [13];
    }
    if (raw is BdkError_TransactionNotFound) {
      return [14];
    }
    if (raw is BdkError_TransactionConfirmed) {
      return [15];
    }
    if (raw is BdkError_IrreplaceableTransaction) {
      return [16];
    }
    if (raw is BdkError_FeeRateTooLow) {
      return [17, cst_encode_f_32(raw.needed)];
    }
    if (raw is BdkError_FeeTooLow) {
      return [18, cst_encode_u_64(raw.needed)];
    }
    if (raw is BdkError_FeeRateUnavailable) {
      return [19];
    }
    if (raw is BdkError_MissingKeyOrigin) {
      return [20, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Key) {
      return [21, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_ChecksumMismatch) {
      return [22];
    }
    if (raw is BdkError_SpendingPolicyRequired) {
      return [23, cst_encode_keychain_kind(raw.field0)];
    }
    if (raw is BdkError_InvalidPolicyPathError) {
      return [24, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Signer) {
      return [25, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_InvalidNetwork) {
      return [
        26,
        cst_encode_network(raw.requested),
        cst_encode_network(raw.found)
      ];
    }
    if (raw is BdkError_InvalidOutpoint) {
      return [27, cst_encode_box_autoadd_out_point(raw.field0)];
    }
    if (raw is BdkError_Encode) {
      return [28, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Miniscript) {
      return [29, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_MiniscriptPsbt) {
      return [30, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Bip32) {
      return [31, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Bip39) {
      return [32, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Secp256k1) {
      return [33, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Json) {
      return [34, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Psbt) {
      return [35, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_PsbtParse) {
      return [36, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_MissingCachedScripts) {
      return [37, cst_encode_usize(raw.field0), cst_encode_usize(raw.field1)];
    }
    if (raw is BdkError_Electrum) {
      return [38, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Esplora) {
      return [39, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Sled) {
      return [40, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Rpc) {
      return [41, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_Rusqlite) {
      return [42, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_InvalidInput) {
      return [43, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_InvalidLockTime) {
      return [44, cst_encode_String(raw.field0)];
    }
    if (raw is BdkError_InvalidTransaction) {
      return [45, cst_encode_String(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_bdk_mnemonic(BdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_keysbip39Mnemonic(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_psbt(BdkPsbt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_MutexPartiallySignedTransaction(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_bdk_script_buf(BdkScriptBuf raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_list_prim_u_8_strict(raw.bytes)];
  }

  @protected
  List<dynamic> cst_encode_bdk_transaction(BdkTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.inner)];
  }

  @protected
  List<dynamic> cst_encode_bdk_wallet(BdkWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_RustOpaque_MutexbdkWalletAnyDatabase(raw.ptr)];
  }

  @protected
  List<dynamic> cst_encode_block_time(BlockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_32(raw.height), cst_encode_u_64(raw.timestamp)];
  }

  @protected
  List<dynamic> cst_encode_blockchain_config(BlockchainConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BlockchainConfig_Electrum) {
      return [0, cst_encode_box_autoadd_electrum_config(raw.config)];
    }
    if (raw is BlockchainConfig_Esplora) {
      return [1, cst_encode_box_autoadd_esplora_config(raw.config)];
    }
    if (raw is BlockchainConfig_Rpc) {
      return [2, cst_encode_box_autoadd_rpc_config(raw.config)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_address_error(AddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_address_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_address_index(AddressIndex raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_address_index(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_address(BdkAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_address(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_blockchain(BdkBlockchain raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_blockchain(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_derivation_path(
      BdkDerivationPath raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_derivation_path(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_descriptor(BdkDescriptor raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_descriptor(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_descriptor_public_key(
      BdkDescriptorPublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_descriptor_public_key(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_descriptor_secret_key(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_mnemonic(BdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_mnemonic(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_psbt(BdkPsbt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_psbt(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_script_buf(BdkScriptBuf raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_script_buf(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_transaction(BdkTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_transaction(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bdk_wallet(BdkWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bdk_wallet(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_block_time(BlockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_block_time(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_blockchain_config(BlockchainConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_blockchain_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_consensus_error(ConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_consensus_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_database_config(DatabaseConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_database_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_descriptor_error(DescriptorError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_descriptor_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_electrum_config(ElectrumConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_electrum_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_esplora_config(EsploraConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_esplora_config(raw);
  }

  @protected
  double cst_encode_box_autoadd_f_32(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_f_32(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_fee_rate(FeeRate raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_fee_rate(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_hex_error(HexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_hex_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_input(Input raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_input(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_local_utxo(LocalUtxo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_local_utxo(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_lock_time(LockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_lock_time(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_out_point(OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_out_point(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_psbt_sig_hash_type(PsbtSigHashType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_psbt_sig_hash_type(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_rbf_value(RbfValue raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_rbf_value(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, int) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_record_out_point_input_usize(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_rpc_config(RpcConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_rpc_config(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_rpc_sync_params(RpcSyncParams raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_rpc_sync_params(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sign_options(SignOptions raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_sign_options(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sled_db_configuration(
      SledDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_sled_db_configuration(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_sqlite_db_configuration(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_32(raw);
  }

  @protected
  Object cst_encode_box_autoadd_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_64(raw);
  }

  @protected
  int cst_encode_box_autoadd_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_u_8(raw);
  }

  @protected
  List<dynamic> cst_encode_consensus_error(ConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is ConsensusError_Io) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is ConsensusError_OversizedVectorAllocation) {
      return [1, cst_encode_usize(raw.requested), cst_encode_usize(raw.max)];
    }
    if (raw is ConsensusError_InvalidChecksum) {
      return [
        2,
        cst_encode_u_8_array_4(raw.expected),
        cst_encode_u_8_array_4(raw.actual)
      ];
    }
    if (raw is ConsensusError_NonMinimalVarInt) {
      return [3];
    }
    if (raw is ConsensusError_ParseFailed) {
      return [4, cst_encode_String(raw.field0)];
    }
    if (raw is ConsensusError_UnsupportedSegwitFlag) {
      return [5, cst_encode_u_8(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_database_config(DatabaseConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is DatabaseConfig_Memory) {
      return [0];
    }
    if (raw is DatabaseConfig_Sqlite) {
      return [1, cst_encode_box_autoadd_sqlite_db_configuration(raw.config)];
    }
    if (raw is DatabaseConfig_Sled) {
      return [2, cst_encode_box_autoadd_sled_db_configuration(raw.config)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_descriptor_error(DescriptorError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is DescriptorError_InvalidHdKeyPath) {
      return [0];
    }
    if (raw is DescriptorError_InvalidDescriptorChecksum) {
      return [1];
    }
    if (raw is DescriptorError_HardenedDerivationXpub) {
      return [2];
    }
    if (raw is DescriptorError_MultiPath) {
      return [3];
    }
    if (raw is DescriptorError_Key) {
      return [4, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_Policy) {
      return [5, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_InvalidDescriptorCharacter) {
      return [6, cst_encode_u_8(raw.field0)];
    }
    if (raw is DescriptorError_Bip32) {
      return [7, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_Base58) {
      return [8, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_Pk) {
      return [9, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_Miniscript) {
      return [10, cst_encode_String(raw.field0)];
    }
    if (raw is DescriptorError_Hex) {
      return [11, cst_encode_String(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_electrum_config(ElectrumConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.url),
      cst_encode_opt_String(raw.socks5),
      cst_encode_u_8(raw.retry),
      cst_encode_opt_box_autoadd_u_8(raw.timeout),
      cst_encode_u_64(raw.stopGap),
      cst_encode_bool(raw.validateDomain)
    ];
  }

  @protected
  List<dynamic> cst_encode_esplora_config(EsploraConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.baseUrl),
      cst_encode_opt_String(raw.proxy),
      cst_encode_opt_box_autoadd_u_8(raw.concurrency),
      cst_encode_u_64(raw.stopGap),
      cst_encode_opt_box_autoadd_u_64(raw.timeout)
    ];
  }

  @protected
  List<dynamic> cst_encode_fee_rate(FeeRate raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_f_32(raw.satPerVb)];
  }

  @protected
  List<dynamic> cst_encode_hex_error(HexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is HexError_InvalidChar) {
      return [0, cst_encode_u_8(raw.field0)];
    }
    if (raw is HexError_OddLengthString) {
      return [1, cst_encode_usize(raw.field0)];
    }
    if (raw is HexError_InvalidLength) {
      return [2, cst_encode_usize(raw.field0), cst_encode_usize(raw.field1)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_input(Input raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.s)];
  }

  @protected
  List<dynamic> cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_list_prim_u_8_strict).toList();
  }

  @protected
  List<dynamic> cst_encode_list_local_utxo(List<LocalUtxo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_local_utxo).toList();
  }

  @protected
  List<dynamic> cst_encode_list_out_point(List<OutPoint> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_out_point).toList();
  }

  @protected
  List<int> cst_encode_list_prim_u_8_loose(List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_script_amount(List<ScriptAmount> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_script_amount).toList();
  }

  @protected
  List<dynamic> cst_encode_list_transaction_details(
      List<TransactionDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_transaction_details).toList();
  }

  @protected
  List<dynamic> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_tx_in).toList();
  }

  @protected
  List<dynamic> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_tx_out).toList();
  }

  @protected
  List<dynamic> cst_encode_local_utxo(LocalUtxo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_out_point(raw.outpoint),
      cst_encode_tx_out(raw.txout),
      cst_encode_keychain_kind(raw.keychain),
      cst_encode_bool(raw.isSpent)
    ];
  }

  @protected
  List<dynamic> cst_encode_lock_time(LockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is LockTime_Blocks) {
      return [0, cst_encode_u_32(raw.field0)];
    }
    if (raw is LockTime_Seconds) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_bdk_address(BdkAddress? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bdk_address(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_bdk_descriptor(BdkDescriptor? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bdk_descriptor(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_bdk_script_buf(BdkScriptBuf? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bdk_script_buf(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_bdk_transaction(
      BdkTransaction? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_bdk_transaction(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_block_time(BlockTime? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_block_time(raw);
  }

  @protected
  double? cst_encode_opt_box_autoadd_f_32(double? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_fee_rate(FeeRate? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_fee_rate(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_psbt_sig_hash_type(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_rbf_value(RbfValue? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_rbf_value(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, int)? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? null
        : cst_encode_box_autoadd_record_out_point_input_usize(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_rpc_sync_params(
      RpcSyncParams? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_rpc_sync_params(raw);
  }

  @protected
  List<dynamic>? cst_encode_opt_box_autoadd_sign_options(SignOptions? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_sign_options(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  Object? cst_encode_opt_box_autoadd_u_64(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  int? cst_encode_opt_box_autoadd_u_8(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? null : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  List<dynamic> cst_encode_out_point(OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.txid), cst_encode_u_32(raw.vout)];
  }

  @protected
  List<dynamic> cst_encode_payload(Payload raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is Payload_PubkeyHash) {
      return [0, cst_encode_String(raw.pubkeyHash)];
    }
    if (raw is Payload_ScriptHash) {
      return [1, cst_encode_String(raw.scriptHash)];
    }
    if (raw is Payload_WitnessProgram) {
      return [
        2,
        cst_encode_witness_version(raw.version),
        cst_encode_list_prim_u_8_strict(raw.program)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_psbt_sig_hash_type(PsbtSigHashType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_u_32(raw.inner)];
  }

  @protected
  List<dynamic> cst_encode_rbf_value(RbfValue raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is RbfValue_RbfDefault) {
      return [0];
    }
    if (raw is RbfValue_Value) {
      return [1, cst_encode_u_32(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_record_bdk_address_u_32((BdkAddress, int) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_bdk_address(raw.$1), cst_encode_u_32(raw.$2)];
  }

  @protected
  List<dynamic> cst_encode_record_bdk_psbt_transaction_details(
      (BdkPsbt, TransactionDetails) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_bdk_psbt(raw.$1),
      cst_encode_transaction_details(raw.$2)
    ];
  }

  @protected
  List<dynamic> cst_encode_record_out_point_input_usize(
      (OutPoint, Input, int) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_out_point(raw.$1),
      cst_encode_input(raw.$2),
      cst_encode_usize(raw.$3)
    ];
  }

  @protected
  List<dynamic> cst_encode_rpc_config(RpcConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.url),
      cst_encode_auth(raw.auth),
      cst_encode_network(raw.network),
      cst_encode_String(raw.walletName),
      cst_encode_opt_box_autoadd_rpc_sync_params(raw.syncParams)
    ];
  }

  @protected
  List<dynamic> cst_encode_rpc_sync_params(RpcSyncParams raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_64(raw.startScriptCount),
      cst_encode_u_64(raw.startTime),
      cst_encode_bool(raw.forceStartTime),
      cst_encode_u_64(raw.pollRateSec)
    ];
  }

  @protected
  List<dynamic> cst_encode_script_amount(ScriptAmount raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_bdk_script_buf(raw.script), cst_encode_u_64(raw.amount)];
  }

  @protected
  List<dynamic> cst_encode_sign_options(SignOptions raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_bool(raw.multiSig),
      cst_encode_bool(raw.trustWitnessUtxo),
      cst_encode_opt_box_autoadd_u_32(raw.assumeHeight),
      cst_encode_bool(raw.allowAllSighashes),
      cst_encode_bool(raw.removePartialSigs),
      cst_encode_bool(raw.tryFinalize),
      cst_encode_bool(raw.signWithTapInternalKey),
      cst_encode_bool(raw.allowGrinding)
    ];
  }

  @protected
  List<dynamic> cst_encode_sled_db_configuration(SledDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.path), cst_encode_String(raw.treeName)];
  }

  @protected
  List<dynamic> cst_encode_sqlite_db_configuration(SqliteDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.path)];
  }

  @protected
  List<dynamic> cst_encode_transaction_details(TransactionDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_opt_box_autoadd_bdk_transaction(raw.transaction),
      cst_encode_String(raw.txid),
      cst_encode_u_64(raw.received),
      cst_encode_u_64(raw.sent),
      cst_encode_opt_box_autoadd_u_64(raw.fee),
      cst_encode_opt_box_autoadd_block_time(raw.confirmationTime)
    ];
  }

  @protected
  List<dynamic> cst_encode_tx_in(TxIn raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_out_point(raw.previousOutput),
      cst_encode_bdk_script_buf(raw.scriptSig),
      cst_encode_u_32(raw.sequence),
      cst_encode_list_list_prim_u_8_strict(raw.witness)
    ];
  }

  @protected
  List<dynamic> cst_encode_tx_out(TxOut raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_64(raw.value),
      cst_encode_bdk_script_buf(raw.scriptPubkey)
    ];
  }

  @protected
  Object cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_4(U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  int cst_encode_RustOpaque_AnyBlockchain(AnyBlockchain raw);

  @protected
  int cst_encode_RustOpaque_ExtendedDescriptor(ExtendedDescriptor raw);

  @protected
  int cst_encode_RustOpaque_MutexPartiallySignedTransaction(
      MutexPartiallySignedTransaction raw);

  @protected
  int cst_encode_RustOpaque_MutexbdkWalletAnyDatabase(
      MutexBdkWalletAnyDatabase raw);

  @protected
  int cst_encode_RustOpaque_bdkbitcoinAddress(BdkBitcoinAddress raw);

  @protected
  int cst_encode_RustOpaque_bitcoinbip32DerivationPath(
      BitcoinBip32DerivationPath raw);

  @protected
  int cst_encode_RustOpaque_keysDescriptorPublicKey(
      KeysDescriptorPublicKey raw);

  @protected
  int cst_encode_RustOpaque_keysDescriptorSecretKey(
      KeysDescriptorSecretKey raw);

  @protected
  int cst_encode_RustOpaque_keysKeyMap(KeysKeyMap raw);

  @protected
  int cst_encode_RustOpaque_keysbip39Mnemonic(KeysBip39Mnemonic raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_change_spend_policy(ChangeSpendPolicy raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_keychain_kind(KeychainKind raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_variant(Variant raw);

  @protected
  int cst_encode_witness_version(WitnessVersion raw);

  @protected
  int cst_encode_word_count(WordCount raw);

  @protected
  void sse_encode_RustOpaque_AnyBlockchain(
      AnyBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_ExtendedDescriptor(
      ExtendedDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_MutexPartiallySignedTransaction(
      MutexPartiallySignedTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_MutexbdkWalletAnyDatabase(
      MutexBdkWalletAnyDatabase self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkbitcoinAddress(
      BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bitcoinbip32DerivationPath(
      BitcoinBip32DerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_keysDescriptorPublicKey(
      KeysDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_keysDescriptorSecretKey(
      KeysDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_keysKeyMap(
      KeysKeyMap self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_keysbip39Mnemonic(
      KeysBip39Mnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_error(AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_address_index(AddressIndex self, SseSerializer serializer);

  @protected
  void sse_encode_auth(Auth self, SseSerializer serializer);

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_address(BdkAddress self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_blockchain(BdkBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_derivation_path(
      BdkDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor(BdkDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor_public_key(
      BdkDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_mnemonic(BdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_psbt(BdkPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_script_buf(BdkScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_transaction(
      BdkTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_wallet(BdkWallet self, SseSerializer serializer);

  @protected
  void sse_encode_block_time(BlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_blockchain_config(
      BlockchainConfig self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_error(
      AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_index(
      AddressIndex self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_address(
      BdkAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_blockchain(
      BdkBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_derivation_path(
      BdkDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor(
      BdkDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor_public_key(
      BdkDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_mnemonic(
      BdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_psbt(BdkPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_script_buf(
      BdkScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_transaction(
      BdkTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_wallet(
      BdkWallet self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_block_time(
      BlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_blockchain_config(
      BlockchainConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_electrum_config(
      ElectrumConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_esplora_config(
      EsploraConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_hex_error(
      HexError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_input(Input self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_local_utxo(
      LocalUtxo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lock_time(
      LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rbf_value(
      RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, int) self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rpc_config(
      RpcConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rpc_sync_params(
      RpcSyncParams self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sign_options(
      SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_change_spend_policy(
      ChangeSpendPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_electrum_config(
      ElectrumConfig self, SseSerializer serializer);

  @protected
  void sse_encode_esplora_config(EsploraConfig self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_hex_error(HexError self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_input(Input self, SseSerializer serializer);

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_local_utxo(
      List<LocalUtxo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_out_point(List<OutPoint> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_script_amount(
      List<ScriptAmount> self, SseSerializer serializer);

  @protected
  void sse_encode_list_transaction_details(
      List<TransactionDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_local_utxo(LocalUtxo self, SseSerializer serializer);

  @protected
  void sse_encode_lock_time(LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_address(
      BdkAddress? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_descriptor(
      BdkDescriptor? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_script_buf(
      BdkScriptBuf? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_transaction(
      BdkTransaction? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_block_time(
      BlockTime? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_fee_rate(
      FeeRate? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rbf_value(
      RbfValue? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, int)? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rpc_sync_params(
      RpcSyncParams? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_sign_options(
      SignOptions? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer);

  @protected
  void sse_encode_psbt_sig_hash_type(
      PsbtSigHashType self, SseSerializer serializer);

  @protected
  void sse_encode_rbf_value(RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_record_bdk_address_u_32(
      (BdkAddress, int) self, SseSerializer serializer);

  @protected
  void sse_encode_record_bdk_psbt_transaction_details(
      (BdkPsbt, TransactionDetails) self, SseSerializer serializer);

  @protected
  void sse_encode_record_out_point_input_usize(
      (OutPoint, Input, int) self, SseSerializer serializer);

  @protected
  void sse_encode_rpc_config(RpcConfig self, SseSerializer serializer);

  @protected
  void sse_encode_rpc_sync_params(RpcSyncParams self, SseSerializer serializer);

  @protected
  void sse_encode_script_amount(ScriptAmount self, SseSerializer serializer);

  @protected
  void sse_encode_sign_options(SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_details(
      TransactionDetails self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer);

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer);

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer);
}

// Section: wire_class

class BdkCoreWire implements BaseWire {
  BdkCoreWire.fromExternalLibrary(ExternalLibrary lib);

  void wire_BdkBlockchain_broadcast(NativePortType port_, List<dynamic> that,
          List<dynamic> transaction) =>
      wasmModule.wire_BdkBlockchain_broadcast(port_, that, transaction);

  void wire_BdkBlockchain_estimate_fee(
          NativePortType port_, List<dynamic> that, Object target) =>
      wasmModule.wire_BdkBlockchain_estimate_fee(port_, that, target);

  void wire_BdkBlockchain_get_block_hash(
          NativePortType port_, List<dynamic> that, int height) =>
      wasmModule.wire_BdkBlockchain_get_block_hash(port_, that, height);

  void wire_BdkBlockchain_get_height(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkBlockchain_get_height(port_, that);

  void wire_BdkBlockchain_new(
          NativePortType port_, List<dynamic> blockchain_config) =>
      wasmModule.wire_BdkBlockchain_new(port_, blockchain_config);

  void wire_BdkDescriptor_as_string(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptor_as_string(port_, that);

  void wire_BdkDescriptor_as_string_private(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptor_as_string_private(port_, that);

  void wire_BdkDescriptor_max_satisfaction_weight(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptor_max_satisfaction_weight(port_, that);

  void wire_BdkDescriptor_new(
          NativePortType port_, String descriptor, int network) =>
      wasmModule.wire_BdkDescriptor_new(port_, descriptor, network);

  void wire_BdkDescriptor_new_bip44(NativePortType port_,
          List<dynamic> secret_key, int keychain_kind, int network) =>
      wasmModule.wire_BdkDescriptor_new_bip44(
          port_, secret_key, keychain_kind, network);

  void wire_BdkDescriptor_new_bip44_public(
          NativePortType port_,
          List<dynamic> public_key,
          String fingerprint,
          int keychain_kind,
          int network) =>
      wasmModule.wire_BdkDescriptor_new_bip44_public(
          port_, public_key, fingerprint, keychain_kind, network);

  void wire_BdkDescriptor_new_bip49(NativePortType port_,
          List<dynamic> secret_key, int keychain_kind, int network) =>
      wasmModule.wire_BdkDescriptor_new_bip49(
          port_, secret_key, keychain_kind, network);

  void wire_BdkDescriptor_new_bip49_public(
          NativePortType port_,
          List<dynamic> public_key,
          String fingerprint,
          int keychain_kind,
          int network) =>
      wasmModule.wire_BdkDescriptor_new_bip49_public(
          port_, public_key, fingerprint, keychain_kind, network);

  void wire_BdkDescriptor_new_bip84(NativePortType port_,
          List<dynamic> secret_key, int keychain_kind, int network) =>
      wasmModule.wire_BdkDescriptor_new_bip84(
          port_, secret_key, keychain_kind, network);

  void wire_BdkDescriptor_new_bip84_public(
          NativePortType port_,
          List<dynamic> public_key,
          String fingerprint,
          int keychain_kind,
          int network) =>
      wasmModule.wire_BdkDescriptor_new_bip84_public(
          port_, public_key, fingerprint, keychain_kind, network);

  void wire_BdkDescriptor_new_bip86(NativePortType port_,
          List<dynamic> secret_key, int keychain_kind, int network) =>
      wasmModule.wire_BdkDescriptor_new_bip86(
          port_, secret_key, keychain_kind, network);

  void wire_BdkDescriptor_new_bip86_public(
          NativePortType port_,
          List<dynamic> public_key,
          String fingerprint,
          int keychain_kind,
          int network) =>
      wasmModule.wire_BdkDescriptor_new_bip86_public(
          port_, public_key, fingerprint, keychain_kind, network);

  void wire_BdkDerivationPath_from_string(NativePortType port_, String path) =>
      wasmModule.wire_BdkDerivationPath_from_string(port_, path);

  void wire_BdkDescriptorPublicKey_as_string(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptorPublicKey_as_string(port_, that);

  void wire_BdkDescriptorPublicKey_derive(
          NativePortType port_, List<dynamic> ptr, List<dynamic> path) =>
      wasmModule.wire_BdkDescriptorPublicKey_derive(port_, ptr, path);

  void wire_BdkDescriptorPublicKey_extend(
          NativePortType port_, List<dynamic> ptr, List<dynamic> path) =>
      wasmModule.wire_BdkDescriptorPublicKey_extend(port_, ptr, path);

  void wire_BdkDescriptorPublicKey_from_string(
          NativePortType port_, String public_key) =>
      wasmModule.wire_BdkDescriptorPublicKey_from_string(port_, public_key);

  void wire_BdkDescriptorSecretKey_as_public(
          NativePortType port_, List<dynamic> ptr) =>
      wasmModule.wire_BdkDescriptorSecretKey_as_public(port_, ptr);

  void wire_BdkDescriptorSecretKey_as_string(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptorSecretKey_as_string(port_, that);

  void wire_BdkDescriptorSecretKey_create(NativePortType port_, int network,
          List<dynamic> mnemonic, String? password) =>
      wasmModule.wire_BdkDescriptorSecretKey_create(
          port_, network, mnemonic, password);

  void wire_BdkDescriptorSecretKey_derive(
          NativePortType port_, List<dynamic> ptr, List<dynamic> path) =>
      wasmModule.wire_BdkDescriptorSecretKey_derive(port_, ptr, path);

  void wire_BdkDescriptorSecretKey_extend(
          NativePortType port_, List<dynamic> ptr, List<dynamic> path) =>
      wasmModule.wire_BdkDescriptorSecretKey_extend(port_, ptr, path);

  void wire_BdkDescriptorSecretKey_from_string(
          NativePortType port_, String secret_key) =>
      wasmModule.wire_BdkDescriptorSecretKey_from_string(port_, secret_key);

  void wire_BdkDescriptorSecretKey_secret_bytes(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkDescriptorSecretKey_secret_bytes(port_, that);

  void wire_BdkMnemonic_as_string(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkMnemonic_as_string(port_, that);

  void wire_BdkMnemonic_from_entropy(NativePortType port_, List<int> entropy) =>
      wasmModule.wire_BdkMnemonic_from_entropy(port_, entropy);

  void wire_BdkMnemonic_from_string(NativePortType port_, String mnemonic) =>
      wasmModule.wire_BdkMnemonic_from_string(port_, mnemonic);

  void wire_BdkMnemonic_new(NativePortType port_, int word_count) =>
      wasmModule.wire_BdkMnemonic_new(port_, word_count);

  void wire_BdkPsbt_combine(
          NativePortType port_, List<dynamic> ptr, List<dynamic> other) =>
      wasmModule.wire_BdkPsbt_combine(port_, ptr, other);

  void wire_BdkPsbt_extract_tx(NativePortType port_, List<dynamic> ptr) =>
      wasmModule.wire_BdkPsbt_extract_tx(port_, ptr);

  void wire_BdkPsbt_fee_amount(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkPsbt_fee_amount(port_, that);

  void wire_BdkPsbt_fee_rate(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkPsbt_fee_rate(port_, that);

  void wire_BdkPsbt_from_str(NativePortType port_, String psbt_base64) =>
      wasmModule.wire_BdkPsbt_from_str(port_, psbt_base64);

  void wire_BdkPsbt_from_unsigned_tx(NativePortType port_, List<dynamic> tx) =>
      wasmModule.wire_BdkPsbt_from_unsigned_tx(port_, tx);

  void wire_BdkPsbt_json_serialize(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkPsbt_json_serialize(port_, that);

  void wire_BdkPsbt_serialize(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkPsbt_serialize(port_, that);

  void wire_BdkPsbt_txid(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkPsbt_txid(port_, that);

  void wire_BdkPsbt_update_input(
          NativePortType port_, List<dynamic> that, List<dynamic> input) =>
      wasmModule.wire_BdkPsbt_update_input(port_, that, input);

  void wire_BdkAddress_as_string(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkAddress_as_string(port_, that);

  void wire_BdkAddress_from_script(
          NativePortType port_, List<dynamic> script, int network) =>
      wasmModule.wire_BdkAddress_from_script(port_, script, network);

  void wire_BdkAddress_from_string(
          NativePortType port_, String address, int network) =>
      wasmModule.wire_BdkAddress_from_string(port_, address, network);

  void wire_BdkAddress_is_valid_for_network(
          NativePortType port_, List<dynamic> that, int network) =>
      wasmModule.wire_BdkAddress_is_valid_for_network(port_, that, network);

  void wire_BdkAddress_network(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkAddress_network(port_, that);

  void wire_BdkAddress_payload(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkAddress_payload(port_, that);

  void wire_BdkAddress_script(NativePortType port_, List<dynamic> ptr) =>
      wasmModule.wire_BdkAddress_script(port_, ptr);

  void wire_BdkAddress_to_qr_uri(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkAddress_to_qr_uri(port_, that);

  void wire_BdkScriptBuf_empty(NativePortType port_) =>
      wasmModule.wire_BdkScriptBuf_empty(port_);

  void wire_BdkScriptBuf_from_hex(NativePortType port_, String s) =>
      wasmModule.wire_BdkScriptBuf_from_hex(port_, s);

  void wire_BdkScriptBuf_with_capacity(NativePortType port_, int capacity) =>
      wasmModule.wire_BdkScriptBuf_with_capacity(port_, capacity);

  void wire_BdkTransaction_from_bytes(
          NativePortType port_, List<int> transaction_bytes) =>
      wasmModule.wire_BdkTransaction_from_bytes(port_, transaction_bytes);

  void wire_BdkTransaction_input(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_input(port_, that);

  void wire_BdkTransaction_is_coin_base(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_is_coin_base(port_, that);

  void wire_BdkTransaction_is_explicitly_rbf(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_is_explicitly_rbf(port_, that);

  void wire_BdkTransaction_is_lock_time_enabled(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_is_lock_time_enabled(port_, that);

  void wire_BdkTransaction_lock_time(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_lock_time(port_, that);

  void wire_BdkTransaction_new(NativePortType port_, int version,
          List<dynamic> lock_time, List<dynamic> input, List<dynamic> output) =>
      wasmModule.wire_BdkTransaction_new(
          port_, version, lock_time, input, output);

  void wire_BdkTransaction_output(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_output(port_, that);

  void wire_BdkTransaction_serialize(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_serialize(port_, that);

  void wire_BdkTransaction_size(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_size(port_, that);

  void wire_BdkTransaction_txid(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_txid(port_, that);

  void wire_BdkTransaction_version(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_version(port_, that);

  void wire_BdkTransaction_vsize(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_vsize(port_, that);

  void wire_BdkTransaction_weight(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkTransaction_weight(port_, that);

  void wire_BdkWallet_get_address(NativePortType port_, List<dynamic> ptr,
          List<dynamic> address_index) =>
      wasmModule.wire_BdkWallet_get_address(port_, ptr, address_index);

  void wire_BdkWallet_get_balance(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkWallet_get_balance(port_, that);

  void wire_BdkWallet_get_descriptor_for_keychain(
          NativePortType port_, List<dynamic> ptr, int keychain) =>
      wasmModule.wire_BdkWallet_get_descriptor_for_keychain(
          port_, ptr, keychain);

  void wire_BdkWallet_get_internal_address(NativePortType port_,
          List<dynamic> ptr, List<dynamic> address_index) =>
      wasmModule.wire_BdkWallet_get_internal_address(port_, ptr, address_index);

  void wire_BdkWallet_get_psbt_input(
          NativePortType port_,
          List<dynamic> that,
          List<dynamic> utxo,
          bool only_witness_utxo,
          List<dynamic>? sighash_type) =>
      wasmModule.wire_BdkWallet_get_psbt_input(
          port_, that, utxo, only_witness_utxo, sighash_type);

  void wire_BdkWallet_is_mine(
          NativePortType port_, List<dynamic> that, List<dynamic> script) =>
      wasmModule.wire_BdkWallet_is_mine(port_, that, script);

  void wire_BdkWallet_list_transactions(
          NativePortType port_, List<dynamic> that, bool include_raw) =>
      wasmModule.wire_BdkWallet_list_transactions(port_, that, include_raw);

  void wire_BdkWallet_list_unspent(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkWallet_list_unspent(port_, that);

  void wire_BdkWallet_network(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_BdkWallet_network(port_, that);

  void wire_BdkWallet_new(
          NativePortType port_,
          List<dynamic> descriptor,
          List<dynamic>? change_descriptor,
          int network,
          List<dynamic> database_config) =>
      wasmModule.wire_BdkWallet_new(
          port_, descriptor, change_descriptor, network, database_config);

  void wire_BdkWallet_sign(NativePortType port_, List<dynamic> ptr,
          List<dynamic> psbt, List<dynamic>? sign_options) =>
      wasmModule.wire_BdkWallet_sign(port_, ptr, psbt, sign_options);

  void wire_BdkWallet_sync(
          NativePortType port_, List<dynamic> ptr, List<dynamic> blockchain) =>
      wasmModule.wire_BdkWallet_sync(port_, ptr, blockchain);

  void wire_finish_bump_fee_tx_builder(
          NativePortType port_,
          String txid,
          double fee_rate,
          List<dynamic>? allow_shrinking,
          List<dynamic> wallet,
          bool enable_rbf,
          int? n_sequence) =>
      wasmModule.wire_finish_bump_fee_tx_builder(port_, txid, fee_rate,
          allow_shrinking, wallet, enable_rbf, n_sequence);

  void wire_tx_builder_finish(
          NativePortType port_,
          List<dynamic> wallet,
          List<dynamic> recipients,
          List<dynamic> utxos,
          List<dynamic>? foreign_utxo,
          List<dynamic> un_spendable,
          int change_policy,
          bool manually_selected_only,
          double? fee_rate,
          Object? fee_absolute,
          bool drain_wallet,
          List<dynamic>? drain_to,
          List<dynamic>? rbf,
          List<int> data) =>
      wasmModule.wire_tx_builder_finish(
          port_,
          wallet,
          recipients,
          utxos,
          foreign_utxo,
          un_spendable,
          change_policy,
          manually_selected_only,
          fee_rate,
          fee_absolute,
          drain_wallet,
          drain_to,
          rbf,
          data);

  void rust_arc_increment_strong_count_RustOpaque_AnyBlockchain(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_AnyBlockchain(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_AnyBlockchain(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_AnyBlockchain(ptr);

  void rust_arc_increment_strong_count_RustOpaque_ExtendedDescriptor(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_ExtendedDescriptor(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_ExtendedDescriptor(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_ExtendedDescriptor(ptr);

  void rust_arc_increment_strong_count_RustOpaque_MutexPartiallySignedTransaction(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_MutexPartiallySignedTransaction(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_MutexPartiallySignedTransaction(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_MutexPartiallySignedTransaction(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress(ptr);

  void rust_arc_increment_strong_count_RustOpaque_bitcoinbip32DerivationPath(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_bitcoinbip32DerivationPath(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_bitcoinbip32DerivationPath(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_bitcoinbip32DerivationPath(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_keysDescriptorPublicKey(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_keysDescriptorPublicKey(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_keysDescriptorPublicKey(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_keysDescriptorPublicKey(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_keysDescriptorSecretKey(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_keysDescriptorSecretKey(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_keysDescriptorSecretKey(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_keysDescriptorSecretKey(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_keysKeyMap(dynamic ptr) =>
      wasmModule.rust_arc_increment_strong_count_RustOpaque_keysKeyMap(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_keysKeyMap(dynamic ptr) =>
      wasmModule.rust_arc_decrement_strong_count_RustOpaque_keysKeyMap(ptr);

  void rust_arc_increment_strong_count_RustOpaque_keysbip39Mnemonic(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_keysbip39Mnemonic(ptr);

  void rust_arc_decrement_strong_count_RustOpaque_keysbip39Mnemonic(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_keysbip39Mnemonic(ptr);
}

@JS('wasm_bindgen')
external BdkCoreWasmModule get wasmModule;

@JS()
@anonymous
class BdkCoreWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external BdkCoreWasmModule bind(dynamic thisArg, String moduleName);

  external void wire_BdkBlockchain_broadcast(
      NativePortType port_, List<dynamic> that, List<dynamic> transaction);

  external void wire_BdkBlockchain_estimate_fee(
      NativePortType port_, List<dynamic> that, Object target);

  external void wire_BdkBlockchain_get_block_hash(
      NativePortType port_, List<dynamic> that, int height);

  external void wire_BdkBlockchain_get_height(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkBlockchain_new(
      NativePortType port_, List<dynamic> blockchain_config);

  external void wire_BdkDescriptor_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkDescriptor_as_string_private(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkDescriptor_max_satisfaction_weight(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkDescriptor_new(
      NativePortType port_, String descriptor, int network);

  external void wire_BdkDescriptor_new_bip44(NativePortType port_,
      List<dynamic> secret_key, int keychain_kind, int network);

  external void wire_BdkDescriptor_new_bip44_public(
      NativePortType port_,
      List<dynamic> public_key,
      String fingerprint,
      int keychain_kind,
      int network);

  external void wire_BdkDescriptor_new_bip49(NativePortType port_,
      List<dynamic> secret_key, int keychain_kind, int network);

  external void wire_BdkDescriptor_new_bip49_public(
      NativePortType port_,
      List<dynamic> public_key,
      String fingerprint,
      int keychain_kind,
      int network);

  external void wire_BdkDescriptor_new_bip84(NativePortType port_,
      List<dynamic> secret_key, int keychain_kind, int network);

  external void wire_BdkDescriptor_new_bip84_public(
      NativePortType port_,
      List<dynamic> public_key,
      String fingerprint,
      int keychain_kind,
      int network);

  external void wire_BdkDescriptor_new_bip86(NativePortType port_,
      List<dynamic> secret_key, int keychain_kind, int network);

  external void wire_BdkDescriptor_new_bip86_public(
      NativePortType port_,
      List<dynamic> public_key,
      String fingerprint,
      int keychain_kind,
      int network);

  external void wire_BdkDerivationPath_from_string(
      NativePortType port_, String path);

  external void wire_BdkDescriptorPublicKey_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkDescriptorPublicKey_derive(
      NativePortType port_, List<dynamic> ptr, List<dynamic> path);

  external void wire_BdkDescriptorPublicKey_extend(
      NativePortType port_, List<dynamic> ptr, List<dynamic> path);

  external void wire_BdkDescriptorPublicKey_from_string(
      NativePortType port_, String public_key);

  external void wire_BdkDescriptorSecretKey_as_public(
      NativePortType port_, List<dynamic> ptr);

  external void wire_BdkDescriptorSecretKey_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkDescriptorSecretKey_create(NativePortType port_,
      int network, List<dynamic> mnemonic, String? password);

  external void wire_BdkDescriptorSecretKey_derive(
      NativePortType port_, List<dynamic> ptr, List<dynamic> path);

  external void wire_BdkDescriptorSecretKey_extend(
      NativePortType port_, List<dynamic> ptr, List<dynamic> path);

  external void wire_BdkDescriptorSecretKey_from_string(
      NativePortType port_, String secret_key);

  external void wire_BdkDescriptorSecretKey_secret_bytes(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkMnemonic_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkMnemonic_from_entropy(
      NativePortType port_, List<int> entropy);

  external void wire_BdkMnemonic_from_string(
      NativePortType port_, String mnemonic);

  external void wire_BdkMnemonic_new(NativePortType port_, int word_count);

  external void wire_BdkPsbt_combine(
      NativePortType port_, List<dynamic> ptr, List<dynamic> other);

  external void wire_BdkPsbt_extract_tx(
      NativePortType port_, List<dynamic> ptr);

  external void wire_BdkPsbt_fee_amount(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkPsbt_fee_rate(NativePortType port_, List<dynamic> that);

  external void wire_BdkPsbt_from_str(NativePortType port_, String psbt_base64);

  external void wire_BdkPsbt_from_unsigned_tx(
      NativePortType port_, List<dynamic> tx);

  external void wire_BdkPsbt_json_serialize(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkPsbt_serialize(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkPsbt_txid(NativePortType port_, List<dynamic> that);

  external void wire_BdkPsbt_update_input(
      NativePortType port_, List<dynamic> that, List<dynamic> input);

  external void wire_BdkAddress_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkAddress_from_script(
      NativePortType port_, List<dynamic> script, int network);

  external void wire_BdkAddress_from_string(
      NativePortType port_, String address, int network);

  external void wire_BdkAddress_is_valid_for_network(
      NativePortType port_, List<dynamic> that, int network);

  external void wire_BdkAddress_network(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkAddress_payload(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkAddress_script(NativePortType port_, List<dynamic> ptr);

  external void wire_BdkAddress_to_qr_uri(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkScriptBuf_empty(NativePortType port_);

  external void wire_BdkScriptBuf_from_hex(NativePortType port_, String s);

  external void wire_BdkScriptBuf_with_capacity(
      NativePortType port_, int capacity);

  external void wire_BdkTransaction_from_bytes(
      NativePortType port_, List<int> transaction_bytes);

  external void wire_BdkTransaction_input(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_is_coin_base(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_is_explicitly_rbf(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_is_lock_time_enabled(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_lock_time(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_new(NativePortType port_, int version,
      List<dynamic> lock_time, List<dynamic> input, List<dynamic> output);

  external void wire_BdkTransaction_output(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_serialize(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_size(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_txid(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_version(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_vsize(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkTransaction_weight(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkWallet_get_address(
      NativePortType port_, List<dynamic> ptr, List<dynamic> address_index);

  external void wire_BdkWallet_get_balance(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkWallet_get_descriptor_for_keychain(
      NativePortType port_, List<dynamic> ptr, int keychain);

  external void wire_BdkWallet_get_internal_address(
      NativePortType port_, List<dynamic> ptr, List<dynamic> address_index);

  external void wire_BdkWallet_get_psbt_input(
      NativePortType port_,
      List<dynamic> that,
      List<dynamic> utxo,
      bool only_witness_utxo,
      List<dynamic>? sighash_type);

  external void wire_BdkWallet_is_mine(
      NativePortType port_, List<dynamic> that, List<dynamic> script);

  external void wire_BdkWallet_list_transactions(
      NativePortType port_, List<dynamic> that, bool include_raw);

  external void wire_BdkWallet_list_unspent(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkWallet_network(
      NativePortType port_, List<dynamic> that);

  external void wire_BdkWallet_new(
      NativePortType port_,
      List<dynamic> descriptor,
      List<dynamic>? change_descriptor,
      int network,
      List<dynamic> database_config);

  external void wire_BdkWallet_sign(NativePortType port_, List<dynamic> ptr,
      List<dynamic> psbt, List<dynamic>? sign_options);

  external void wire_BdkWallet_sync(
      NativePortType port_, List<dynamic> ptr, List<dynamic> blockchain);

  external void wire_finish_bump_fee_tx_builder(
      NativePortType port_,
      String txid,
      double fee_rate,
      List<dynamic>? allow_shrinking,
      List<dynamic> wallet,
      bool enable_rbf,
      int? n_sequence);

  external void wire_tx_builder_finish(
      NativePortType port_,
      List<dynamic> wallet,
      List<dynamic> recipients,
      List<dynamic> utxos,
      List<dynamic>? foreign_utxo,
      List<dynamic> un_spendable,
      int change_policy,
      bool manually_selected_only,
      double? fee_rate,
      Object? fee_absolute,
      bool drain_wallet,
      List<dynamic>? drain_to,
      List<dynamic>? rbf,
      List<int> data);

  external void rust_arc_increment_strong_count_RustOpaque_AnyBlockchain(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_AnyBlockchain(
      dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_ExtendedDescriptor(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_ExtendedDescriptor(
      dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_MutexPartiallySignedTransaction(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_MutexPartiallySignedTransaction(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_MutexbdkWalletAnyDatabase(
          dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress(
      dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_bitcoinbip32DerivationPath(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_bitcoinbip32DerivationPath(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_keysDescriptorPublicKey(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_keysDescriptorPublicKey(
          dynamic ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_keysDescriptorSecretKey(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_keysDescriptorSecretKey(
          dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_keysKeyMap(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_keysKeyMap(
      dynamic ptr);

  external void rust_arc_increment_strong_count_RustOpaque_keysbip39Mnemonic(
      dynamic ptr);

  external void rust_arc_decrement_strong_count_RustOpaque_keysbip39Mnemonic(
      dynamic ptr);
}
