// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class RustBdkFfiImpl implements RustBdkFfi {
  final RustBdkFfiPlatform _platform;
  factory RustBdkFfiImpl(ExternalLibrary dylib) => RustBdkFfiImpl.raw(RustBdkFfiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustBdkFfiImpl.wasm(FutureOr<WasmModule> module) => RustBdkFfiImpl(module as ExternalLibrary);
  RustBdkFfiImpl.raw(this._platform);
  Future<String> createBlockchainStaticMethodApi({required BlockchainConfig config, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_blockchain_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_blockchain__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateBlockchainStaticMethodApiConstMeta,
      argValues: [config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateBlockchainStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_blockchain__static_method__Api",
        argNames: ["config"],
      );

  Future<int> getHeightStaticMethodApi({required String blockchainId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(blockchainId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_height__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kGetHeightStaticMethodApiConstMeta,
      argValues: [blockchainId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetHeightStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_height__static_method__Api",
        argNames: ["blockchainId"],
      );

  Future<String> getBlockchainHashStaticMethodApi(
      {required int blockchainHeight, required String blockchainId, dynamic hint}) {
    var arg0 = api2wire_u32(blockchainHeight);
    var arg1 = _platform.api2wire_String(blockchainId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_blockchain_hash__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kGetBlockchainHashStaticMethodApiConstMeta,
      argValues: [blockchainHeight, blockchainId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBlockchainHashStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_blockchain_hash__static_method__Api",
        argNames: ["blockchainHeight", "blockchainId"],
      );

  Future<double> estimateFeeStaticMethodApi({required int target, required String blockchainId, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(target);
    var arg1 = _platform.api2wire_String(blockchainId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_estimate_fee__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_f32,
      constMeta: kEstimateFeeStaticMethodApiConstMeta,
      argValues: [target, blockchainId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEstimateFeeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "estimate_fee__static_method__Api",
        argNames: ["target", "blockchainId"],
      );

  Future<String> broadcastStaticMethodApi({required String tx, required String blockchainId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    var arg1 = _platform.api2wire_String(blockchainId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_broadcast__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kBroadcastStaticMethodApiConstMeta,
      argValues: [tx, blockchainId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBroadcastStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast__static_method__Api",
        argNames: ["tx", "blockchainId"],
      );

  Future<String> createTransactionStaticMethodApi({required Uint8List tx, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_transaction__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateTransactionStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateTransactionStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_transaction__static_method__Api",
        argNames: ["tx"],
      );

  Future<String> txTxidStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tx_txid__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kTxTxidStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTxTxidStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "tx_txid__static_method__Api",
        argNames: ["tx"],
      );

  Future<int> weightStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_weight__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kWeightStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWeightStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "weight__static_method__Api",
        argNames: ["tx"],
      );

  Future<int> sizeStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_size__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kSizeStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSizeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "size__static_method__Api",
        argNames: ["tx"],
      );

  Future<int> vsizeStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_vsize__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_u64,
      constMeta: kVsizeStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVsizeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "vsize__static_method__Api",
        argNames: ["tx"],
      );

  Future<Uint8List> serializeTxStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_serialize_tx__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kSerializeTxStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSerializeTxStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "serialize_tx__static_method__Api",
        argNames: ["tx"],
      );

  Future<bool> isCoinBaseStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_coin_base__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsCoinBaseStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsCoinBaseStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_coin_base__static_method__Api",
        argNames: ["tx"],
      );

  Future<bool> isExplicitlyRbfStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_explicitly_rbf__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsExplicitlyRbfStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsExplicitlyRbfStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_explicitly_rbf__static_method__Api",
        argNames: ["tx"],
      );

  Future<bool> isLockTimeEnabledStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_lock_time_enabled__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsLockTimeEnabledStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsLockTimeEnabledStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_lock_time_enabled__static_method__Api",
        argNames: ["tx"],
      );

  Future<int> versionStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_version__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_i32,
      constMeta: kVersionStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVersionStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "version__static_method__Api",
        argNames: ["tx"],
      );

  Future<int> lockTimeStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lock_time__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_u32,
      constMeta: kLockTimeStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLockTimeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lock_time__static_method__Api",
        argNames: ["tx"],
      );

  Future<List<TxIn>> inputStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_input__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_list_tx_in,
      constMeta: kInputStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInputStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "input__static_method__Api",
        argNames: ["tx"],
      );

  Future<List<TxOut>> outputStaticMethodApi({required String tx, dynamic hint}) {
    var arg0 = _platform.api2wire_String(tx);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_output__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_list_tx_out,
      constMeta: kOutputStaticMethodApiConstMeta,
      argValues: [tx],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOutputStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "output__static_method__Api",
        argNames: ["tx"],
      );

  Future<String> serializePsbtStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_serialize_psbt__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSerializePsbtStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSerializePsbtStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "serialize_psbt__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<String> psbtTxidStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_psbt_txid__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kPsbtTxidStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPsbtTxidStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_txid__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<String> extractTxStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_extract_tx__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kExtractTxStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExtractTxStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "extract_tx__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<double?> psbtFeeRateStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_psbt_fee_rate__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_f32,
      constMeta: kPsbtFeeRateStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPsbtFeeRateStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_fee_rate__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<int?> psbtFeeAmountStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_psbt_fee_amount__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_u64,
      constMeta: kPsbtFeeAmountStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPsbtFeeAmountStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_fee_amount__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<String> combinePsbtStaticMethodApi({required String psbtStr, required String other, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    var arg1 = _platform.api2wire_String(other);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_combine_psbt__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kCombinePsbtStaticMethodApiConstMeta,
      argValues: [psbtStr, other],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCombinePsbtStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "combine_psbt__static_method__Api",
        argNames: ["psbtStr", "other"],
      );

  Future<String> jsonSerializeStaticMethodApi({required String psbtStr, dynamic hint}) {
    var arg0 = _platform.api2wire_String(psbtStr);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_json_serialize__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kJsonSerializeStaticMethodApiConstMeta,
      argValues: [psbtStr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kJsonSerializeStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "json_serialize__static_method__Api",
        argNames: ["psbtStr"],
      );

  Future<BdkTxBuilderResult> txBuilderFinishStaticMethodApi(
      {required String walletId,
      required List<ScriptAmount> recipients,
      required List<OutPoint> utxos,
      ForeignUtxo? foreignUtxo,
      required List<OutPoint> unspendable,
      required ChangeSpendPolicy changePolicy,
      required bool manuallySelectedOnly,
      double? feeRate,
      int? feeAbsolute,
      required bool drainWallet,
      Script? drainTo,
      RbfValue? rbf,
      required Uint8List data,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_list_script_amount(recipients);
    var arg2 = _platform.api2wire_list_out_point(utxos);
    var arg3 = _platform.api2wire_opt_box_autoadd_foreign_utxo(foreignUtxo);
    var arg4 = _platform.api2wire_list_out_point(unspendable);
    var arg5 = api2wire_change_spend_policy(changePolicy);
    var arg6 = manuallySelectedOnly;
    var arg7 = _platform.api2wire_opt_box_autoadd_f32(feeRate);
    var arg8 = _platform.api2wire_opt_box_autoadd_u64(feeAbsolute);
    var arg9 = drainWallet;
    var arg10 = _platform.api2wire_opt_box_autoadd_script(drainTo);
    var arg11 = _platform.api2wire_opt_box_autoadd_rbf_value(rbf);
    var arg12 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_tx_builder_finish__static_method__Api(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12),
      parseSuccessData: _wire2api_bdk_tx_builder_result,
      constMeta: kTxBuilderFinishStaticMethodApiConstMeta,
      argValues: [
        walletId,
        recipients,
        utxos,
        foreignUtxo,
        unspendable,
        changePolicy,
        manuallySelectedOnly,
        feeRate,
        feeAbsolute,
        drainWallet,
        drainTo,
        rbf,
        data
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTxBuilderFinishStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "tx_builder_finish__static_method__Api",
        argNames: [
          "walletId",
          "recipients",
          "utxos",
          "foreignUtxo",
          "unspendable",
          "changePolicy",
          "manuallySelectedOnly",
          "feeRate",
          "feeAbsolute",
          "drainWallet",
          "drainTo",
          "rbf",
          "data"
        ],
      );

  Future<BdkTxBuilderResult> bumpFeeTxBuilderFinishStaticMethodApi(
      {required String txid,
      required double feeRate,
      String? allowShrinking,
      required String walletId,
      required bool enableRbf,
      int? nSequence,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(txid);
    var arg1 = api2wire_f32(feeRate);
    var arg2 = _platform.api2wire_opt_String(allowShrinking);
    var arg3 = _platform.api2wire_String(walletId);
    var arg4 = enableRbf;
    var arg5 = _platform.api2wire_opt_box_autoadd_u32(nSequence);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_bump_fee_tx_builder_finish__static_method__Api(port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_bdk_tx_builder_result,
      constMeta: kBumpFeeTxBuilderFinishStaticMethodApiConstMeta,
      argValues: [txid, feeRate, allowShrinking, walletId, enableRbf, nSequence],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBumpFeeTxBuilderFinishStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bump_fee_tx_builder_finish__static_method__Api",
        argNames: ["txid", "feeRate", "allowShrinking", "walletId", "enableRbf", "nSequence"],
      );

  Future<String> createDescriptorStaticMethodApi({required String descriptor, required Network network, dynamic hint}) {
    var arg0 = _platform.api2wire_String(descriptor);
    var arg1 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_descriptor__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateDescriptorStaticMethodApiConstMeta,
      argValues: [descriptor, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor__static_method__Api",
        argNames: ["descriptor", "network"],
      );

  Future<String> newBip44DescriptorStaticMethodApi(
      {required KeychainKind keyChainKind, required String secretKey, required Network network, dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(secretKey);
    var arg2 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip44_descriptor__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip44DescriptorStaticMethodApiConstMeta,
      argValues: [keyChainKind, secretKey, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip44DescriptorStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip44_descriptor__static_method__Api",
        argNames: ["keyChainKind", "secretKey", "network"],
      );

  Future<String> newBip44PublicStaticMethodApi(
      {required KeychainKind keyChainKind,
      required String publicKey,
      required Network network,
      required String fingerprint,
      dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(publicKey);
    var arg2 = api2wire_network(network);
    var arg3 = _platform.api2wire_String(fingerprint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip44_public__static_method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip44PublicStaticMethodApiConstMeta,
      argValues: [keyChainKind, publicKey, network, fingerprint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip44PublicStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip44_public__static_method__Api",
        argNames: ["keyChainKind", "publicKey", "network", "fingerprint"],
      );

  Future<String> newBip49DescriptorStaticMethodApi(
      {required KeychainKind keyChainKind, required String secretKey, required Network network, dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(secretKey);
    var arg2 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip49_descriptor__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip49DescriptorStaticMethodApiConstMeta,
      argValues: [keyChainKind, secretKey, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip49DescriptorStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip49_descriptor__static_method__Api",
        argNames: ["keyChainKind", "secretKey", "network"],
      );

  Future<String> newBip49PublicStaticMethodApi(
      {required KeychainKind keyChainKind,
      required String publicKey,
      required Network network,
      required String fingerprint,
      dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(publicKey);
    var arg2 = api2wire_network(network);
    var arg3 = _platform.api2wire_String(fingerprint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip49_public__static_method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip49PublicStaticMethodApiConstMeta,
      argValues: [keyChainKind, publicKey, network, fingerprint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip49PublicStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip49_public__static_method__Api",
        argNames: ["keyChainKind", "publicKey", "network", "fingerprint"],
      );

  Future<String> newBip84DescriptorStaticMethodApi(
      {required KeychainKind keyChainKind, required String secretKey, required Network network, dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(secretKey);
    var arg2 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip84_descriptor__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip84DescriptorStaticMethodApiConstMeta,
      argValues: [keyChainKind, secretKey, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip84DescriptorStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip84_descriptor__static_method__Api",
        argNames: ["keyChainKind", "secretKey", "network"],
      );

  Future<String> newBip84PublicStaticMethodApi(
      {required KeychainKind keyChainKind,
      required String publicKey,
      required Network network,
      required String fingerprint,
      dynamic hint}) {
    var arg0 = api2wire_keychain_kind(keyChainKind);
    var arg1 = _platform.api2wire_String(publicKey);
    var arg2 = api2wire_network(network);
    var arg3 = _platform.api2wire_String(fingerprint);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_new_bip84_public__static_method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kNewBip84PublicStaticMethodApiConstMeta,
      argValues: [keyChainKind, publicKey, network, fingerprint],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNewBip84PublicStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "new_bip84_public__static_method__Api",
        argNames: ["keyChainKind", "publicKey", "network", "fingerprint"],
      );

  Future<String> asStringPrivateStaticMethodApi({required String descriptor, required Network network, dynamic hint}) {
    var arg0 = _platform.api2wire_String(descriptor);
    var arg1 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_as_string_private__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kAsStringPrivateStaticMethodApiConstMeta,
      argValues: [descriptor, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsStringPrivateStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "as_string_private__static_method__Api",
        argNames: ["descriptor", "network"],
      );

  Future<String> asStringStaticMethodApi({required String descriptor, required Network network, dynamic hint}) {
    var arg0 = _platform.api2wire_String(descriptor);
    var arg1 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_as_string__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kAsStringStaticMethodApiConstMeta,
      argValues: [descriptor, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsStringStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "as_string__static_method__Api",
        argNames: ["descriptor", "network"],
      );

  Future<int> maxSatisfactionWeightStaticMethodApi(
      {required String descriptor, required Network network, dynamic hint}) {
    var arg0 = _platform.api2wire_String(descriptor);
    var arg1 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_max_satisfaction_weight__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_usize,
      constMeta: kMaxSatisfactionWeightStaticMethodApiConstMeta,
      argValues: [descriptor, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMaxSatisfactionWeightStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "max_satisfaction_weight__static_method__Api",
        argNames: ["descriptor", "network"],
      );

  Future<String> createDescriptorSecretStaticMethodApi(
      {required Network network, required String mnemonic, String? password, dynamic hint}) {
    var arg0 = api2wire_network(network);
    var arg1 = _platform.api2wire_String(mnemonic);
    var arg2 = _platform.api2wire_opt_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_descriptor_secret__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateDescriptorSecretStaticMethodApiConstMeta,
      argValues: [network, mnemonic, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorSecretStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor_secret__static_method__Api",
        argNames: ["network", "mnemonic", "password"],
      );

  Future<String> descriptorSecretFromStringStaticMethodApi({required String secret, dynamic hint}) {
    var arg0 = _platform.api2wire_String(secret);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_descriptor_secret_from_string__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDescriptorSecretFromStringStaticMethodApiConstMeta,
      argValues: [secret],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretFromStringStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_secret_from_string__static_method__Api",
        argNames: ["secret"],
      );

  Future<String> extendDescriptorSecretStaticMethodApi({required String secret, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(secret);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_extend_descriptor_secret__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kExtendDescriptorSecretStaticMethodApiConstMeta,
      argValues: [secret, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExtendDescriptorSecretStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "extend_descriptor_secret__static_method__Api",
        argNames: ["secret", "path"],
      );

  Future<String> deriveDescriptorSecretStaticMethodApi({required String secret, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(secret);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_derive_descriptor_secret__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kDeriveDescriptorSecretStaticMethodApiConstMeta,
      argValues: [secret, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDeriveDescriptorSecretStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "derive_descriptor_secret__static_method__Api",
        argNames: ["secret", "path"],
      );

  Future<Uint8List> asSecretBytesStaticMethodApi({required String secret, dynamic hint}) {
    var arg0 = _platform.api2wire_String(secret);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_as_secret_bytes__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kAsSecretBytesStaticMethodApiConstMeta,
      argValues: [secret],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsSecretBytesStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "as_secret_bytes__static_method__Api",
        argNames: ["secret"],
      );

  Future<String> asPublicStaticMethodApi({required String secret, dynamic hint}) {
    var arg0 = _platform.api2wire_String(secret);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_as_public__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kAsPublicStaticMethodApiConstMeta,
      argValues: [secret],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAsPublicStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "as_public__static_method__Api",
        argNames: ["secret"],
      );

  Future<String> createDerivationPathStaticMethodApi({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_derivation_path__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateDerivationPathStaticMethodApiConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateDerivationPathStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_derivation_path__static_method__Api",
        argNames: ["path"],
      );

  Future<String> descriptorPublicFromStringStaticMethodApi({required String publicKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(publicKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_descriptor_public_from_string__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kDescriptorPublicFromStringStaticMethodApiConstMeta,
      argValues: [publicKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDescriptorPublicFromStringStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_public_from_string__static_method__Api",
        argNames: ["publicKey"],
      );

  Future<String> createDescriptorPublicStaticMethodApi(
      {String? xpub, required String path, required bool derive, dynamic hint}) {
    var arg0 = _platform.api2wire_opt_String(xpub);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = derive;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_descriptor_public__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateDescriptorPublicStaticMethodApiConstMeta,
      argValues: [xpub, path, derive],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorPublicStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor_public__static_method__Api",
        argNames: ["xpub", "path", "derive"],
      );

  Future<Script> createScriptStaticMethodApi({required Uint8List rawOutputScript, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(rawOutputScript);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_script__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_script,
      constMeta: kCreateScriptStaticMethodApiConstMeta,
      argValues: [rawOutputScript],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateScriptStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_script__static_method__Api",
        argNames: ["rawOutputScript"],
      );

  Future<String> createAddressStaticMethodApi({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_address__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateAddressStaticMethodApiConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateAddressStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_address__static_method__Api",
        argNames: ["address"],
      );

  Future<String> addressFromScriptStaticMethodApi({required Script script, required Network network, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_script(script);
    var arg1 = api2wire_network(network);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_address_from_script__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kAddressFromScriptStaticMethodApiConstMeta,
      argValues: [script, network],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressFromScriptStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "address_from_script__static_method__Api",
        argNames: ["script", "network"],
      );

  Future<Script> addressToScriptPubkeyStaticMethodApi({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_address_to_script_pubkey__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_script,
      constMeta: kAddressToScriptPubkeyStaticMethodApiConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressToScriptPubkeyStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "address_to_script_pubkey__static_method__Api",
        argNames: ["address"],
      );

  Future<Payload> payloadStaticMethodApi({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_payload__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_payload,
      constMeta: kPayloadStaticMethodApiConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPayloadStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "payload__static_method__Api",
        argNames: ["address"],
      );

  Future<Network> addressNetworkStaticMethodApi({required String address, dynamic hint}) {
    var arg0 = _platform.api2wire_String(address);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_address_network__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_network,
      constMeta: kAddressNetworkStaticMethodApiConstMeta,
      argValues: [address],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddressNetworkStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "address_network__static_method__Api",
        argNames: ["address"],
      );

  Future<String> createWalletStaticMethodApi(
      {required String descriptor,
      String? changeDescriptor,
      required Network network,
      required DatabaseConfig databaseConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(descriptor);
    var arg1 = _platform.api2wire_opt_String(changeDescriptor);
    var arg2 = api2wire_network(network);
    var arg3 = _platform.api2wire_box_autoadd_database_config(databaseConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_wallet__static_method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kCreateWalletStaticMethodApiConstMeta,
      argValues: [descriptor, changeDescriptor, network, databaseConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateWalletStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_wallet__static_method__Api",
        argNames: ["descriptor", "changeDescriptor", "network", "databaseConfig"],
      );

  Future<AddressInfo> getAddressStaticMethodApi(
      {required String walletId, required AddressIndex addressIndex, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_box_autoadd_address_index(addressIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_address__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_address_info,
      constMeta: kGetAddressStaticMethodApiConstMeta,
      argValues: [walletId, addressIndex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAddressStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_address__static_method__Api",
        argNames: ["walletId", "addressIndex"],
      );

  Future<AddressInfo> getInternalAddressStaticMethodApi(
      {required String walletId, required AddressIndex addressIndex, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_box_autoadd_address_index(addressIndex);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_internal_address__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_address_info,
      constMeta: kGetInternalAddressStaticMethodApiConstMeta,
      argValues: [walletId, addressIndex],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetInternalAddressStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_internal_address__static_method__Api",
        argNames: ["walletId", "addressIndex"],
      );

  Future<void> syncWalletStaticMethodApi({required String walletId, required String blockchainId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_String(blockchainId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync_wallet__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncWalletStaticMethodApiConstMeta,
      argValues: [walletId, blockchainId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncWalletStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_wallet__static_method__Api",
        argNames: ["walletId", "blockchainId"],
      );

  Future<Balance> getBalanceStaticMethodApi({required String walletId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_balance__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_balance,
      constMeta: kGetBalanceStaticMethodApiConstMeta,
      argValues: [walletId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetBalanceStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_balance__static_method__Api",
        argNames: ["walletId"],
      );

  Future<List<LocalUtxo>> listUnspentOutputsStaticMethodApi({required String walletId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_unspent_outputs__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_list_local_utxo,
      constMeta: kListUnspentOutputsStaticMethodApiConstMeta,
      argValues: [walletId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListUnspentOutputsStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_unspent_outputs__static_method__Api",
        argNames: ["walletId"],
      );

  Future<List<TransactionDetails>> getTransactionsStaticMethodApi(
      {required String walletId, required bool includeRaw, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = includeRaw;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_transactions__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_transaction_details,
      constMeta: kGetTransactionsStaticMethodApiConstMeta,
      argValues: [walletId, includeRaw],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetTransactionsStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_transactions__static_method__Api",
        argNames: ["walletId", "includeRaw"],
      );

  Future<String?> signStaticMethodApi(
      {required String walletId, required String psbtStr, SignOptions? signOptions, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_String(psbtStr);
    var arg2 = _platform.api2wire_opt_box_autoadd_sign_options(signOptions);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign__static_method__Api(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSignStaticMethodApiConstMeta,
      argValues: [walletId, psbtStr, signOptions],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sign__static_method__Api",
        argNames: ["walletId", "psbtStr", "signOptions"],
      );

  Future<Network> walletNetworkStaticMethodApi({required String walletId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_wallet_network__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_network,
      constMeta: kWalletNetworkStaticMethodApiConstMeta,
      argValues: [walletId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWalletNetworkStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "wallet_network__static_method__Api",
        argNames: ["walletId"],
      );

  Future<List<LocalUtxo>> listUnspentStaticMethodApi({required String walletId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_unspent__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_list_local_utxo,
      constMeta: kListUnspentStaticMethodApiConstMeta,
      argValues: [walletId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListUnspentStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_unspent__static_method__Api",
        argNames: ["walletId"],
      );

  Future<String> getPsbtInputStaticMethodApi(
      {required String walletId,
      required LocalUtxo utxo,
      required bool onlyWitnessUtxo,
      PsbtSigHashType? psbtSighashType,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = _platform.api2wire_box_autoadd_local_utxo(utxo);
    var arg2 = onlyWitnessUtxo;
    var arg3 = _platform.api2wire_opt_box_autoadd_psbt_sig_hash_type(psbtSighashType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_psbt_input__static_method__Api(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_String,
      constMeta: kGetPsbtInputStaticMethodApiConstMeta,
      argValues: [walletId, utxo, onlyWitnessUtxo, psbtSighashType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetPsbtInputStaticMethodApiConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_psbt_input__static_method__Api",
        argNames: ["walletId", "utxo", "onlyWitnessUtxo", "psbtSighashType"],
      );

  Future<DescNetwork> getDescriptorForKeychainStaticMethodApi(
      {required String walletId, required KeychainKind keychain, dynamic hint}) {
    var arg0 = _platform.api2wire_String(walletId);
    var arg1 = api2wire_keychain_kind(keychain);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_descriptor_for_keychain__static_method__Api(port_, arg0, arg1),
      parseSuccessData: _wire2api_desc_network,
      constMeta: kGetDescriptorForKeychainStaticMethodApiConstMeta,
      argValues: [walletId, keychain],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDescriptorForKeychainStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_descriptor_for_keychain__static_method__Api",
        argNames: ["walletId", "keychain"],
      );

  Future<String> generateSeedFromWordCountStaticMethodApi({required WordCount wordCount, dynamic hint}) {
    var arg0 = api2wire_word_count(wordCount);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generate_seed_from_word_count__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGenerateSeedFromWordCountStaticMethodApiConstMeta,
      argValues: [wordCount],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromWordCountStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_word_count__static_method__Api",
        argNames: ["wordCount"],
      );

  Future<String> generateSeedFromStringStaticMethodApi({required String mnemonic, dynamic hint}) {
    var arg0 = _platform.api2wire_String(mnemonic);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generate_seed_from_string__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGenerateSeedFromStringStaticMethodApiConstMeta,
      argValues: [mnemonic],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromStringStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_string__static_method__Api",
        argNames: ["mnemonic"],
      );

  Future<String> generateSeedFromEntropyStaticMethodApi({required Uint8List entropy, dynamic hint}) {
    var arg0 = _platform.api2wire_uint_8_list(entropy);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generate_seed_from_entropy__static_method__Api(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGenerateSeedFromEntropyStaticMethodApiConstMeta,
      argValues: [entropy],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromEntropyStaticMethodApiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_entropy__static_method__Api",
        argNames: ["entropy"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AddressInfo _wire2api_address_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AddressInfo(
      index: _wire2api_u32(arr[0]),
      address: _wire2api_String(arr[1]),
    );
  }

  Balance _wire2api_balance(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Balance(
      immature: _wire2api_u64(arr[0]),
      trustedPending: _wire2api_u64(arr[1]),
      untrustedPending: _wire2api_u64(arr[2]),
      confirmed: _wire2api_u64(arr[3]),
      spendable: _wire2api_u64(arr[4]),
      total: _wire2api_u64(arr[5]),
    );
  }

  BdkTxBuilderResult _wire2api_bdk_tx_builder_result(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BdkTxBuilderResult(
      field0: _wire2api_String(arr[0]),
      field1: _wire2api_transaction_details(arr[1]),
    );
  }

  BlockTime _wire2api_block_time(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BlockTime(
      height: _wire2api_u32(arr[0]),
      timestamp: _wire2api_u64(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  BlockTime _wire2api_box_autoadd_block_time(dynamic raw) {
    return _wire2api_block_time(raw);
  }

  double _wire2api_box_autoadd_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  DescNetwork _wire2api_desc_network(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DescNetwork(
      field0: _wire2api_String(arr[0]),
      field1: _wire2api_network(arr[1]),
    );
  }

  double _wire2api_f32(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  KeychainKind _wire2api_keychain_kind(dynamic raw) {
    return KeychainKind.values[raw as int];
  }

  List<LocalUtxo> _wire2api_list_local_utxo(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_local_utxo).toList();
  }

  List<TransactionDetails> _wire2api_list_transaction_details(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_transaction_details).toList();
  }

  List<TxIn> _wire2api_list_tx_in(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_tx_in).toList();
  }

  List<TxOut> _wire2api_list_tx_out(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_tx_out).toList();
  }

  LocalUtxo _wire2api_local_utxo(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LocalUtxo(
      outpoint: _wire2api_out_point(arr[0]),
      txout: _wire2api_tx_out(arr[1]),
      isSpent: _wire2api_bool(arr[2]),
      keychain: _wire2api_keychain_kind(arr[3]),
    );
  }

  Network _wire2api_network(dynamic raw) {
    return Network.values[raw as int];
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  BlockTime? _wire2api_opt_box_autoadd_block_time(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_block_time(raw);
  }

  double? _wire2api_opt_box_autoadd_f32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_f32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  OutPoint _wire2api_out_point(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: _wire2api_String(arr[0]),
      vout: _wire2api_u32(arr[1]),
    );
  }

  Payload _wire2api_payload(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Payload_PubkeyHash(
          pubkeyHash: _wire2api_uint_8_list(raw[1]),
        );
      case 1:
        return Payload_ScriptHash(
          scriptHash: _wire2api_uint_8_list(raw[1]),
        );
      case 2:
        return Payload_WitnessProgram(
          version: _wire2api_witness_version(raw[1]),
          program: _wire2api_uint_8_list(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Script _wire2api_script(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Script(
      internal: _wire2api_uint_8_list(arr[0]),
    );
  }

  TransactionDetails _wire2api_transaction_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return TransactionDetails(
      serializedTx: _wire2api_opt_String(arr[0]),
      txid: _wire2api_String(arr[1]),
      received: _wire2api_u64(arr[2]),
      sent: _wire2api_u64(arr[3]),
      fee: _wire2api_opt_box_autoadd_u64(arr[4]),
      confirmationTime: _wire2api_opt_box_autoadd_block_time(arr[5]),
    );
  }

  TxIn _wire2api_tx_in(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxIn(
      previousOutput: _wire2api_out_point(arr[0]),
      scriptSig: _wire2api_script(arr[1]),
      sequence: _wire2api_u32(arr[2]),
      witness: _wire2api_StringList(arr[3]),
    );
  }

  TxOut _wire2api_tx_out(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxOut(
      value: _wire2api_u64(arr[0]),
      scriptPubkey: _wire2api_script(arr[1]),
    );
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  WitnessVersion _wire2api_witness_version(dynamic raw) {
    return WitnessVersion.values[raw as int];
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_change_spend_policy(ChangeSpendPolicy raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f32(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_keychain_kind(KeychainKind raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}

@protected
int api2wire_word_count(WordCount raw) {
  return api2wire_i32(raw.index);
}
// Section: finalizer

class RustBdkFfiPlatform extends FlutterRustBridgeBase<RustBdkFfiWire> {
  RustBdkFfiPlatform(ffi.DynamicLibrary dylib) : super(RustBdkFfiWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_AddressIndex> api2wire_box_autoadd_address_index(AddressIndex raw) {
    final ptr = inner.new_box_autoadd_address_index_0();
    _api_fill_to_wire_address_index(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_BlockchainConfig> api2wire_box_autoadd_blockchain_config(BlockchainConfig raw) {
    final ptr = inner.new_box_autoadd_blockchain_config_0();
    _api_fill_to_wire_blockchain_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DatabaseConfig> api2wire_box_autoadd_database_config(DatabaseConfig raw) {
    final ptr = inner.new_box_autoadd_database_config_0();
    _api_fill_to_wire_database_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ElectrumConfig> api2wire_box_autoadd_electrum_config(ElectrumConfig raw) {
    final ptr = inner.new_box_autoadd_electrum_config_0();
    _api_fill_to_wire_electrum_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_EsploraConfig> api2wire_box_autoadd_esplora_config(EsploraConfig raw) {
    final ptr = inner.new_box_autoadd_esplora_config_0();
    _api_fill_to_wire_esplora_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Float> api2wire_box_autoadd_f32(double raw) {
    return inner.new_box_autoadd_f32_0(api2wire_f32(raw));
  }

  @protected
  ffi.Pointer<wire_ForeignUtxo> api2wire_box_autoadd_foreign_utxo(ForeignUtxo raw) {
    final ptr = inner.new_box_autoadd_foreign_utxo_0();
    _api_fill_to_wire_foreign_utxo(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LocalUtxo> api2wire_box_autoadd_local_utxo(LocalUtxo raw) {
    final ptr = inner.new_box_autoadd_local_utxo_0();
    _api_fill_to_wire_local_utxo(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PsbtSigHashType> api2wire_box_autoadd_psbt_sig_hash_type(PsbtSigHashType raw) {
    final ptr = inner.new_box_autoadd_psbt_sig_hash_type_0();
    _api_fill_to_wire_psbt_sig_hash_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RbfValue> api2wire_box_autoadd_rbf_value(RbfValue raw) {
    final ptr = inner.new_box_autoadd_rbf_value_0();
    _api_fill_to_wire_rbf_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RpcConfig> api2wire_box_autoadd_rpc_config(RpcConfig raw) {
    final ptr = inner.new_box_autoadd_rpc_config_0();
    _api_fill_to_wire_rpc_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RpcSyncParams> api2wire_box_autoadd_rpc_sync_params(RpcSyncParams raw) {
    final ptr = inner.new_box_autoadd_rpc_sync_params_0();
    _api_fill_to_wire_rpc_sync_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_Script> api2wire_box_autoadd_script(Script raw) {
    final ptr = inner.new_box_autoadd_script_0();
    _api_fill_to_wire_script(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SignOptions> api2wire_box_autoadd_sign_options(SignOptions raw) {
    final ptr = inner.new_box_autoadd_sign_options_0();
    _api_fill_to_wire_sign_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SledDbConfiguration> api2wire_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sled_db_configuration_0();
    _api_fill_to_wire_sled_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SqliteDbConfiguration> api2wire_box_autoadd_sqlite_db_configuration(SqliteDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sqlite_db_configuration_0();
    _api_fill_to_wire_sqlite_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(api2wire_u8(raw));
  }

  @protected
  ffi.Pointer<wire_UserPass> api2wire_box_autoadd_user_pass(UserPass raw) {
    final ptr = inner.new_box_autoadd_user_pass_0();
    _api_fill_to_wire_user_pass(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_out_point> api2wire_list_out_point(List<OutPoint> raw) {
    final ans = inner.new_list_out_point_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_out_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_script_amount> api2wire_list_script_amount(List<ScriptAmount> raw) {
    final ans = inner.new_list_script_amount_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_script_amount(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Float> api2wire_opt_box_autoadd_f32(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f32(raw);
  }

  @protected
  ffi.Pointer<wire_ForeignUtxo> api2wire_opt_box_autoadd_foreign_utxo(ForeignUtxo? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_foreign_utxo(raw);
  }

  @protected
  ffi.Pointer<wire_PsbtSigHashType> api2wire_opt_box_autoadd_psbt_sig_hash_type(PsbtSigHashType? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_psbt_sig_hash_type(raw);
  }

  @protected
  ffi.Pointer<wire_RbfValue> api2wire_opt_box_autoadd_rbf_value(RbfValue? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_rbf_value(raw);
  }

  @protected
  ffi.Pointer<wire_RpcSyncParams> api2wire_opt_box_autoadd_rpc_sync_params(RpcSyncParams? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_rpc_sync_params(raw);
  }

  @protected
  ffi.Pointer<wire_Script> api2wire_opt_box_autoadd_script(Script? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_script(raw);
  }

  @protected
  ffi.Pointer<wire_SignOptions> api2wire_opt_box_autoadd_sign_options(SignOptions? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_sign_options(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u8(raw);
  }

  @protected
  ffi.Pointer<wire_UserPass> api2wire_opt_box_autoadd_user_pass(UserPass? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_user_pass(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_address_index(AddressIndex apiObj, wire_AddressIndex wireObj) {
    if (apiObj is AddressIndex_New) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is AddressIndex_LastUnused) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is AddressIndex_Peek) {
      var pre_index = api2wire_u32(apiObj.index);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_AddressIndex_Peek();
      wireObj.kind.ref.Peek.ref.index = pre_index;
      return;
    }
    if (apiObj is AddressIndex_Reset) {
      var pre_index = api2wire_u32(apiObj.index);
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_AddressIndex_Reset();
      wireObj.kind.ref.Reset.ref.index = pre_index;
      return;
    }
  }

  void _api_fill_to_wire_blockchain_config(BlockchainConfig apiObj, wire_BlockchainConfig wireObj) {
    if (apiObj is BlockchainConfig_Electrum) {
      var pre_config = api2wire_box_autoadd_electrum_config(apiObj.config);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_BlockchainConfig_Electrum();
      wireObj.kind.ref.Electrum.ref.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Esplora) {
      var pre_config = api2wire_box_autoadd_esplora_config(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_BlockchainConfig_Esplora();
      wireObj.kind.ref.Esplora.ref.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Rpc) {
      var pre_config = api2wire_box_autoadd_rpc_config(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_BlockchainConfig_Rpc();
      wireObj.kind.ref.Rpc.ref.config = pre_config;
      return;
    }
  }

  void _api_fill_to_wire_box_autoadd_address_index(AddressIndex apiObj, ffi.Pointer<wire_AddressIndex> wireObj) {
    _api_fill_to_wire_address_index(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_blockchain_config(
      BlockchainConfig apiObj, ffi.Pointer<wire_BlockchainConfig> wireObj) {
    _api_fill_to_wire_blockchain_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_database_config(DatabaseConfig apiObj, ffi.Pointer<wire_DatabaseConfig> wireObj) {
    _api_fill_to_wire_database_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_electrum_config(ElectrumConfig apiObj, ffi.Pointer<wire_ElectrumConfig> wireObj) {
    _api_fill_to_wire_electrum_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_esplora_config(EsploraConfig apiObj, ffi.Pointer<wire_EsploraConfig> wireObj) {
    _api_fill_to_wire_esplora_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_foreign_utxo(ForeignUtxo apiObj, ffi.Pointer<wire_ForeignUtxo> wireObj) {
    _api_fill_to_wire_foreign_utxo(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_local_utxo(LocalUtxo apiObj, ffi.Pointer<wire_LocalUtxo> wireObj) {
    _api_fill_to_wire_local_utxo(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType apiObj, ffi.Pointer<wire_PsbtSigHashType> wireObj) {
    _api_fill_to_wire_psbt_sig_hash_type(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rbf_value(RbfValue apiObj, ffi.Pointer<wire_RbfValue> wireObj) {
    _api_fill_to_wire_rbf_value(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rpc_config(RpcConfig apiObj, ffi.Pointer<wire_RpcConfig> wireObj) {
    _api_fill_to_wire_rpc_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_rpc_sync_params(RpcSyncParams apiObj, ffi.Pointer<wire_RpcSyncParams> wireObj) {
    _api_fill_to_wire_rpc_sync_params(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_script(Script apiObj, ffi.Pointer<wire_Script> wireObj) {
    _api_fill_to_wire_script(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sign_options(SignOptions apiObj, ffi.Pointer<wire_SignOptions> wireObj) {
    _api_fill_to_wire_sign_options(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sled_db_configuration(
      SledDbConfiguration apiObj, ffi.Pointer<wire_SledDbConfiguration> wireObj) {
    _api_fill_to_wire_sled_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration apiObj, ffi.Pointer<wire_SqliteDbConfiguration> wireObj) {
    _api_fill_to_wire_sqlite_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_user_pass(UserPass apiObj, ffi.Pointer<wire_UserPass> wireObj) {
    _api_fill_to_wire_user_pass(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database_config(DatabaseConfig apiObj, wire_DatabaseConfig wireObj) {
    if (apiObj is DatabaseConfig_Memory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DatabaseConfig_Sqlite) {
      var pre_config = api2wire_box_autoadd_sqlite_db_configuration(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_DatabaseConfig_Sqlite();
      wireObj.kind.ref.Sqlite.ref.config = pre_config;
      return;
    }
    if (apiObj is DatabaseConfig_Sled) {
      var pre_config = api2wire_box_autoadd_sled_db_configuration(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_DatabaseConfig_Sled();
      wireObj.kind.ref.Sled.ref.config = pre_config;
      return;
    }
  }

  void _api_fill_to_wire_electrum_config(ElectrumConfig apiObj, wire_ElectrumConfig wireObj) {
    wireObj.url = api2wire_String(apiObj.url);
    wireObj.socks5 = api2wire_opt_String(apiObj.socks5);
    wireObj.retry = api2wire_u8(apiObj.retry);
    wireObj.timeout = api2wire_opt_box_autoadd_u8(apiObj.timeout);
    wireObj.stop_gap = api2wire_u64(apiObj.stopGap);
    wireObj.validate_domain = api2wire_bool(apiObj.validateDomain);
  }

  void _api_fill_to_wire_esplora_config(EsploraConfig apiObj, wire_EsploraConfig wireObj) {
    wireObj.base_url = api2wire_String(apiObj.baseUrl);
    wireObj.proxy = api2wire_opt_String(apiObj.proxy);
    wireObj.concurrency = api2wire_opt_box_autoadd_u8(apiObj.concurrency);
    wireObj.stop_gap = api2wire_u64(apiObj.stopGap);
    wireObj.timeout = api2wire_opt_box_autoadd_u64(apiObj.timeout);
  }

  void _api_fill_to_wire_foreign_utxo(ForeignUtxo apiObj, wire_ForeignUtxo wireObj) {
    _api_fill_to_wire_out_point(apiObj.field0, wireObj.field0);
    wireObj.field1 = api2wire_String(apiObj.field1);
    wireObj.field2 = api2wire_usize(apiObj.field2);
  }

  void _api_fill_to_wire_local_utxo(LocalUtxo apiObj, wire_LocalUtxo wireObj) {
    _api_fill_to_wire_out_point(apiObj.outpoint, wireObj.outpoint);
    _api_fill_to_wire_tx_out(apiObj.txout, wireObj.txout);
    wireObj.is_spent = api2wire_bool(apiObj.isSpent);
    wireObj.keychain = api2wire_keychain_kind(apiObj.keychain);
  }

  void _api_fill_to_wire_opt_box_autoadd_foreign_utxo(ForeignUtxo? apiObj, ffi.Pointer<wire_ForeignUtxo> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_foreign_utxo(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType? apiObj, ffi.Pointer<wire_PsbtSigHashType> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_psbt_sig_hash_type(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_rbf_value(RbfValue? apiObj, ffi.Pointer<wire_RbfValue> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_rbf_value(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_rpc_sync_params(
      RpcSyncParams? apiObj, ffi.Pointer<wire_RpcSyncParams> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_rpc_sync_params(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_script(Script? apiObj, ffi.Pointer<wire_Script> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_script(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_sign_options(SignOptions? apiObj, ffi.Pointer<wire_SignOptions> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_sign_options(apiObj, wireObj);
  }

  void _api_fill_to_wire_opt_box_autoadd_user_pass(UserPass? apiObj, ffi.Pointer<wire_UserPass> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_user_pass(apiObj, wireObj);
  }

  void _api_fill_to_wire_out_point(OutPoint apiObj, wire_OutPoint wireObj) {
    wireObj.txid = api2wire_String(apiObj.txid);
    wireObj.vout = api2wire_u32(apiObj.vout);
  }

  void _api_fill_to_wire_psbt_sig_hash_type(PsbtSigHashType apiObj, wire_PsbtSigHashType wireObj) {
    wireObj.inner = api2wire_u32(apiObj.inner);
  }

  void _api_fill_to_wire_rbf_value(RbfValue apiObj, wire_RbfValue wireObj) {
    if (apiObj is RbfValue_RbfDefault) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is RbfValue_Value) {
      var pre_field0 = api2wire_u32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_RbfValue_Value();
      wireObj.kind.ref.Value.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_rpc_config(RpcConfig apiObj, wire_RpcConfig wireObj) {
    wireObj.url = api2wire_String(apiObj.url);
    wireObj.auth_cookie = api2wire_opt_String(apiObj.authCookie);
    wireObj.auth_user_pass = api2wire_opt_box_autoadd_user_pass(apiObj.authUserPass);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.wallet_name = api2wire_String(apiObj.walletName);
    wireObj.sync_params = api2wire_opt_box_autoadd_rpc_sync_params(apiObj.syncParams);
  }

  void _api_fill_to_wire_rpc_sync_params(RpcSyncParams apiObj, wire_RpcSyncParams wireObj) {
    wireObj.start_script_count = api2wire_u64(apiObj.startScriptCount);
    wireObj.start_time = api2wire_u64(apiObj.startTime);
    wireObj.force_start_time = api2wire_bool(apiObj.forceStartTime);
    wireObj.poll_rate_sec = api2wire_u64(apiObj.pollRateSec);
  }

  void _api_fill_to_wire_script(Script apiObj, wire_Script wireObj) {
    wireObj.internal = api2wire_uint_8_list(apiObj.internal);
  }

  void _api_fill_to_wire_script_amount(ScriptAmount apiObj, wire_ScriptAmount wireObj) {
    _api_fill_to_wire_script(apiObj.script, wireObj.script);
    wireObj.amount = api2wire_u64(apiObj.amount);
  }

  void _api_fill_to_wire_sign_options(SignOptions apiObj, wire_SignOptions wireObj) {
    wireObj.is_multi_sig = api2wire_bool(apiObj.isMultiSig);
    wireObj.trust_witness_utxo = api2wire_bool(apiObj.trustWitnessUtxo);
    wireObj.assume_height = api2wire_opt_box_autoadd_u32(apiObj.assumeHeight);
    wireObj.allow_all_sighashes = api2wire_bool(apiObj.allowAllSighashes);
    wireObj.remove_partial_sigs = api2wire_bool(apiObj.removePartialSigs);
    wireObj.try_finalize = api2wire_bool(apiObj.tryFinalize);
    wireObj.sign_with_tap_internal_key = api2wire_bool(apiObj.signWithTapInternalKey);
    wireObj.allow_grinding = api2wire_bool(apiObj.allowGrinding);
  }

  void _api_fill_to_wire_sled_db_configuration(SledDbConfiguration apiObj, wire_SledDbConfiguration wireObj) {
    wireObj.path = api2wire_String(apiObj.path);
    wireObj.tree_name = api2wire_String(apiObj.treeName);
  }

  void _api_fill_to_wire_sqlite_db_configuration(SqliteDbConfiguration apiObj, wire_SqliteDbConfiguration wireObj) {
    wireObj.path = api2wire_String(apiObj.path);
  }

  void _api_fill_to_wire_tx_out(TxOut apiObj, wire_TxOut wireObj) {
    wireObj.value = api2wire_u64(apiObj.value);
    _api_fill_to_wire_script(apiObj.scriptPubkey, wireObj.script_pubkey);
  }

  void _api_fill_to_wire_user_pass(UserPass apiObj, wire_UserPass wireObj) {
    wireObj.username = api2wire_String(apiObj.username);
    wireObj.password = api2wire_String(apiObj.password);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustBdkFfiWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustBdkFfiWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustBdkFfiWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_blockchain__static_method__Api(
    int port_,
    ffi.Pointer<wire_BlockchainConfig> config,
  ) {
    return _wire_create_blockchain__static_method__Api(
      port_,
      config,
    );
  }

  late final _wire_create_blockchain__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BlockchainConfig>)>>(
          'wire_create_blockchain__static_method__Api');
  late final _wire_create_blockchain__static_method__Api = _wire_create_blockchain__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_BlockchainConfig>)>();

  void wire_get_height__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_get_height__static_method__Api(
      port_,
      blockchain_id,
    );
  }

  late final _wire_get_height__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_get_height__static_method__Api');
  late final _wire_get_height__static_method__Api =
      _wire_get_height__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_blockchain_hash__static_method__Api(
    int port_,
    int blockchain_height,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_get_blockchain_hash__static_method__Api(
      port_,
      blockchain_height,
      blockchain_id,
    );
  }

  late final _wire_get_blockchain_hash__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint32, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_get_blockchain_hash__static_method__Api');
  late final _wire_get_blockchain_hash__static_method__Api = _wire_get_blockchain_hash__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_estimate_fee__static_method__Api(
    int port_,
    int target,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_estimate_fee__static_method__Api(
      port_,
      target,
      blockchain_id,
    );
  }

  late final _wire_estimate_fee__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_estimate_fee__static_method__Api');
  late final _wire_estimate_fee__static_method__Api =
      _wire_estimate_fee__static_method__ApiPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_broadcast__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_broadcast__static_method__Api(
      port_,
      tx,
      blockchain_id,
    );
  }

  late final _wire_broadcast__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_broadcast__static_method__Api');
  late final _wire_broadcast__static_method__Api = _wire_broadcast__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_transaction__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_create_transaction__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_create_transaction__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_create_transaction__static_method__Api');
  late final _wire_create_transaction__static_method__Api =
      _wire_create_transaction__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tx_txid__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_tx_txid__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_tx_txid__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_tx_txid__static_method__Api');
  late final _wire_tx_txid__static_method__Api =
      _wire_tx_txid__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_weight__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_weight__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_weight__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_weight__static_method__Api');
  late final _wire_weight__static_method__Api =
      _wire_weight__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_size__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_size__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_size__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_size__static_method__Api');
  late final _wire_size__static_method__Api =
      _wire_size__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_vsize__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_vsize__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_vsize__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_vsize__static_method__Api');
  late final _wire_vsize__static_method__Api =
      _wire_vsize__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_serialize_tx__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_serialize_tx__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_serialize_tx__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_serialize_tx__static_method__Api');
  late final _wire_serialize_tx__static_method__Api =
      _wire_serialize_tx__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_coin_base__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_coin_base__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_coin_base__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_is_coin_base__static_method__Api');
  late final _wire_is_coin_base__static_method__Api =
      _wire_is_coin_base__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_explicitly_rbf__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_explicitly_rbf__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_explicitly_rbf__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_is_explicitly_rbf__static_method__Api');
  late final _wire_is_explicitly_rbf__static_method__Api =
      _wire_is_explicitly_rbf__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_is_lock_time_enabled__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_is_lock_time_enabled__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_is_lock_time_enabled__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_is_lock_time_enabled__static_method__Api');
  late final _wire_is_lock_time_enabled__static_method__Api =
      _wire_is_lock_time_enabled__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_version__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_version__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_version__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_version__static_method__Api');
  late final _wire_version__static_method__Api =
      _wire_version__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lock_time__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_lock_time__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_lock_time__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_lock_time__static_method__Api');
  late final _wire_lock_time__static_method__Api =
      _wire_lock_time__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_input__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_input__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_input__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_input__static_method__Api');
  late final _wire_input__static_method__Api =
      _wire_input__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_output__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> tx,
  ) {
    return _wire_output__static_method__Api(
      port_,
      tx,
    );
  }

  late final _wire_output__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_output__static_method__Api');
  late final _wire_output__static_method__Api =
      _wire_output__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_serialize_psbt__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_serialize_psbt__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_serialize_psbt__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_serialize_psbt__static_method__Api');
  late final _wire_serialize_psbt__static_method__Api =
      _wire_serialize_psbt__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_txid__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_txid__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_txid__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_psbt_txid__static_method__Api');
  late final _wire_psbt_txid__static_method__Api =
      _wire_psbt_txid__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_extract_tx__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_extract_tx__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_extract_tx__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_extract_tx__static_method__Api');
  late final _wire_extract_tx__static_method__Api =
      _wire_extract_tx__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_fee_rate__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_fee_rate__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_fee_rate__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_psbt_fee_rate__static_method__Api');
  late final _wire_psbt_fee_rate__static_method__Api =
      _wire_psbt_fee_rate__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_fee_amount__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_fee_amount__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_fee_amount__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_psbt_fee_amount__static_method__Api');
  late final _wire_psbt_fee_amount__static_method__Api =
      _wire_psbt_fee_amount__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_combine_psbt__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_uint_8_list> other,
  ) {
    return _wire_combine_psbt__static_method__Api(
      port_,
      psbt_str,
      other,
    );
  }

  late final _wire_combine_psbt__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_combine_psbt__static_method__Api');
  late final _wire_combine_psbt__static_method__Api = _wire_combine_psbt__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_json_serialize__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_json_serialize__static_method__Api(
      port_,
      psbt_str,
    );
  }

  late final _wire_json_serialize__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_json_serialize__static_method__Api');
  late final _wire_json_serialize__static_method__Api =
      _wire_json_serialize__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tx_builder_finish__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_list_script_amount> recipients,
    ffi.Pointer<wire_list_out_point> utxos,
    ffi.Pointer<wire_ForeignUtxo> foreign_utxo,
    ffi.Pointer<wire_list_out_point> unspendable,
    int change_policy,
    bool manually_selected_only,
    ffi.Pointer<ffi.Float> fee_rate,
    ffi.Pointer<ffi.Uint64> fee_absolute,
    bool drain_wallet,
    ffi.Pointer<wire_Script> drain_to,
    ffi.Pointer<wire_RbfValue> rbf,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_tx_builder_finish__static_method__Api(
      port_,
      wallet_id,
      recipients,
      utxos,
      foreign_utxo,
      unspendable,
      change_policy,
      manually_selected_only,
      fee_rate,
      fee_absolute,
      drain_wallet,
      drain_to,
      rbf,
      data,
    );
  }

  late final _wire_tx_builder_finish__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_script_amount>,
              ffi.Pointer<wire_list_out_point>,
              ffi.Pointer<wire_ForeignUtxo>,
              ffi.Pointer<wire_list_out_point>,
              ffi.Int32,
              ffi.Bool,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Bool,
              ffi.Pointer<wire_Script>,
              ffi.Pointer<wire_RbfValue>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_tx_builder_finish__static_method__Api');
  late final _wire_tx_builder_finish__static_method__Api = _wire_tx_builder_finish__static_method__ApiPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_script_amount>,
          ffi.Pointer<wire_list_out_point>,
          ffi.Pointer<wire_ForeignUtxo>,
          ffi.Pointer<wire_list_out_point>,
          int,
          bool,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Uint64>,
          bool,
          ffi.Pointer<wire_Script>,
          ffi.Pointer<wire_RbfValue>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_bump_fee_tx_builder_finish__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> txid,
    double fee_rate,
    ffi.Pointer<wire_uint_8_list> allow_shrinking,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    bool enable_rbf,
    ffi.Pointer<ffi.Uint32> n_sequence,
  ) {
    return _wire_bump_fee_tx_builder_finish__static_method__Api(
      port_,
      txid,
      fee_rate,
      allow_shrinking,
      wallet_id,
      enable_rbf,
      n_sequence,
    );
  }

  late final _wire_bump_fee_tx_builder_finish__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Float,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Pointer<ffi.Uint32>)>>('wire_bump_fee_tx_builder_finish__static_method__Api');
  late final _wire_bump_fee_tx_builder_finish__static_method__Api =
      _wire_bump_fee_tx_builder_finish__static_method__ApiPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, double, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool, ffi.Pointer<ffi.Uint32>)>();

  void wire_create_descriptor__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    int network,
  ) {
    return _wire_create_descriptor__static_method__Api(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_create_descriptor__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_create_descriptor__static_method__Api');
  late final _wire_create_descriptor__static_method__Api = _wire_create_descriptor__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip44_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip44_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip44_descriptor__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_new_bip44_descriptor__static_method__Api');
  late final _wire_new_bip44_descriptor__static_method__Api = _wire_new_bip44_descriptor__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip44_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip44_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip44_public__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip44_public__static_method__Api');
  late final _wire_new_bip44_public__static_method__Api = _wire_new_bip44_public__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_bip49_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip49_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip49_descriptor__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_new_bip49_descriptor__static_method__Api');
  late final _wire_new_bip49_descriptor__static_method__Api = _wire_new_bip49_descriptor__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip49_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip49_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip49_public__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip49_public__static_method__Api');
  late final _wire_new_bip49_public__static_method__Api = _wire_new_bip49_public__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_new_bip84_descriptor__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> secret_key,
    int network,
  ) {
    return _wire_new_bip84_descriptor__static_method__Api(
      port_,
      key_chain_kind,
      secret_key,
      network,
    );
  }

  late final _wire_new_bip84_descriptor__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_new_bip84_descriptor__static_method__Api');
  late final _wire_new_bip84_descriptor__static_method__Api = _wire_new_bip84_descriptor__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_new_bip84_public__static_method__Api(
    int port_,
    int key_chain_kind,
    ffi.Pointer<wire_uint_8_list> public_key,
    int network,
    ffi.Pointer<wire_uint_8_list> fingerprint,
  ) {
    return _wire_new_bip84_public__static_method__Api(
      port_,
      key_chain_kind,
      public_key,
      network,
      fingerprint,
    );
  }

  late final _wire_new_bip84_public__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_new_bip84_public__static_method__Api');
  late final _wire_new_bip84_public__static_method__Api = _wire_new_bip84_public__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_string_private__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    int network,
  ) {
    return _wire_as_string_private__static_method__Api(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_as_string_private__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_as_string_private__static_method__Api');
  late final _wire_as_string_private__static_method__Api = _wire_as_string_private__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_as_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    int network,
  ) {
    return _wire_as_string__static_method__Api(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_as_string__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_as_string__static_method__Api');
  late final _wire_as_string__static_method__Api =
      _wire_as_string__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_max_satisfaction_weight__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    int network,
  ) {
    return _wire_max_satisfaction_weight__static_method__Api(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_max_satisfaction_weight__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_max_satisfaction_weight__static_method__Api');
  late final _wire_max_satisfaction_weight__static_method__Api = _wire_max_satisfaction_weight__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_create_descriptor_secret__static_method__Api(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_create_descriptor_secret__static_method__Api(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire_create_descriptor_secret__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_descriptor_secret__static_method__Api');
  late final _wire_create_descriptor_secret__static_method__Api = _wire_create_descriptor_secret__static_method__ApiPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_secret_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_descriptor_secret_from_string__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_descriptor_secret_from_string__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_descriptor_secret_from_string__static_method__Api');
  late final _wire_descriptor_secret_from_string__static_method__Api =
      _wire_descriptor_secret_from_string__static_method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_extend_descriptor_secret__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_extend_descriptor_secret__static_method__Api(
      port_,
      secret,
      path,
    );
  }

  late final _wire_extend_descriptor_secret__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_extend_descriptor_secret__static_method__Api');
  late final _wire_extend_descriptor_secret__static_method__Api = _wire_extend_descriptor_secret__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_derive_descriptor_secret__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_derive_descriptor_secret__static_method__Api(
      port_,
      secret,
      path,
    );
  }

  late final _wire_derive_descriptor_secret__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_derive_descriptor_secret__static_method__Api');
  late final _wire_derive_descriptor_secret__static_method__Api = _wire_derive_descriptor_secret__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_secret_bytes__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_as_secret_bytes__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_as_secret_bytes__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_as_secret_bytes__static_method__Api');
  late final _wire_as_secret_bytes__static_method__Api =
      _wire_as_secret_bytes__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_as_public__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> secret,
  ) {
    return _wire_as_public__static_method__Api(
      port_,
      secret,
    );
  }

  late final _wire_as_public__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_as_public__static_method__Api');
  late final _wire_as_public__static_method__Api =
      _wire_as_public__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_derivation_path__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_create_derivation_path__static_method__Api(
      port_,
      path,
    );
  }

  late final _wire_create_derivation_path__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_create_derivation_path__static_method__Api');
  late final _wire_create_derivation_path__static_method__Api = _wire_create_derivation_path__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_public_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> public_key,
  ) {
    return _wire_descriptor_public_from_string__static_method__Api(
      port_,
      public_key,
    );
  }

  late final _wire_descriptor_public_from_string__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_descriptor_public_from_string__static_method__Api');
  late final _wire_descriptor_public_from_string__static_method__Api =
      _wire_descriptor_public_from_string__static_method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_descriptor_public__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> xpub,
    ffi.Pointer<wire_uint_8_list> path,
    bool derive,
  ) {
    return _wire_create_descriptor_public__static_method__Api(
      port_,
      xpub,
      path,
      derive,
    );
  }

  late final _wire_create_descriptor_public__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_create_descriptor_public__static_method__Api');
  late final _wire_create_descriptor_public__static_method__Api = _wire_create_descriptor_public__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_create_script__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> raw_output_script,
  ) {
    return _wire_create_script__static_method__Api(
      port_,
      raw_output_script,
    );
  }

  late final _wire_create_script__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_create_script__static_method__Api');
  late final _wire_create_script__static_method__Api =
      _wire_create_script__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_address__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_create_address__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_create_address__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_create_address__static_method__Api');
  late final _wire_create_address__static_method__Api =
      _wire_create_address__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_address_from_script__static_method__Api(
    int port_,
    ffi.Pointer<wire_Script> script,
    int network,
  ) {
    return _wire_address_from_script__static_method__Api(
      port_,
      script,
      network,
    );
  }

  late final _wire_address_from_script__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Script>, ffi.Int32)>>(
          'wire_address_from_script__static_method__Api');
  late final _wire_address_from_script__static_method__Api =
      _wire_address_from_script__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_Script>, int)>();

  void wire_address_to_script_pubkey__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_address_to_script_pubkey__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_address_to_script_pubkey__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_address_to_script_pubkey__static_method__Api');
  late final _wire_address_to_script_pubkey__static_method__Api = _wire_address_to_script_pubkey__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_payload__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_payload__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_payload__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_payload__static_method__Api');
  late final _wire_payload__static_method__Api =
      _wire_payload__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_address_network__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_address_network__static_method__Api(
      port_,
      address,
    );
  }

  late final _wire_address_network__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_address_network__static_method__Api');
  late final _wire_address_network__static_method__Api =
      _wire_address_network__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_wallet__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    ffi.Pointer<wire_uint_8_list> change_descriptor,
    int network,
    ffi.Pointer<wire_DatabaseConfig> database_config,
  ) {
    return _wire_create_wallet__static_method__Api(
      port_,
      descriptor,
      change_descriptor,
      network,
      database_config,
    );
  }

  late final _wire_create_wallet__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Pointer<wire_DatabaseConfig>)>>('wire_create_wallet__static_method__Api');
  late final _wire_create_wallet__static_method__Api = _wire_create_wallet__static_method__ApiPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int, ffi.Pointer<wire_DatabaseConfig>)>();

  void wire_get_address__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_AddressIndex> address_index,
  ) {
    return _wire_get_address__static_method__Api(
      port_,
      wallet_id,
      address_index,
    );
  }

  late final _wire_get_address__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_AddressIndex>)>>('wire_get_address__static_method__Api');
  late final _wire_get_address__static_method__Api = _wire_get_address__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_AddressIndex>)>();

  void wire_get_internal_address__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_AddressIndex> address_index,
  ) {
    return _wire_get_internal_address__static_method__Api(
      port_,
      wallet_id,
      address_index,
    );
  }

  late final _wire_get_internal_address__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_AddressIndex>)>>('wire_get_internal_address__static_method__Api');
  late final _wire_get_internal_address__static_method__Api = _wire_get_internal_address__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_AddressIndex>)>();

  void wire_sync_wallet__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_sync_wallet__static_method__Api(
      port_,
      wallet_id,
      blockchain_id,
    );
  }

  late final _wire_sync_wallet__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sync_wallet__static_method__Api');
  late final _wire_sync_wallet__static_method__Api = _wire_sync_wallet__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_balance__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_get_balance__static_method__Api(
      port_,
      wallet_id,
    );
  }

  late final _wire_get_balance__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_get_balance__static_method__Api');
  late final _wire_get_balance__static_method__Api =
      _wire_get_balance__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_unspent_outputs__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_list_unspent_outputs__static_method__Api(
      port_,
      wallet_id,
    );
  }

  late final _wire_list_unspent_outputs__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_list_unspent_outputs__static_method__Api');
  late final _wire_list_unspent_outputs__static_method__Api =
      _wire_list_unspent_outputs__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_transactions__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    bool include_raw,
  ) {
    return _wire_get_transactions__static_method__Api(
      port_,
      wallet_id,
      include_raw,
    );
  }

  late final _wire_get_transactions__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>(
          'wire_get_transactions__static_method__Api');
  late final _wire_get_transactions__static_method__Api = _wire_get_transactions__static_method__ApiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_sign__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_SignOptions> sign_options,
  ) {
    return _wire_sign__static_method__Api(
      port_,
      wallet_id,
      psbt_str,
      sign_options,
    );
  }

  late final _wire_sign__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_SignOptions>)>>('wire_sign__static_method__Api');
  late final _wire_sign__static_method__Api = _wire_sign__static_method__ApiPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_SignOptions>)>();

  void wire_wallet_network__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_wallet_network__static_method__Api(
      port_,
      wallet_id,
    );
  }

  late final _wire_wallet_network__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_wallet_network__static_method__Api');
  late final _wire_wallet_network__static_method__Api =
      _wire_wallet_network__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_unspent__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_list_unspent__static_method__Api(
      port_,
      wallet_id,
    );
  }

  late final _wire_list_unspent__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_list_unspent__static_method__Api');
  late final _wire_list_unspent__static_method__Api =
      _wire_list_unspent__static_method__ApiPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_psbt_input__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_LocalUtxo> utxo,
    bool only_witness_utxo,
    ffi.Pointer<wire_PsbtSigHashType> psbt_sighash_type,
  ) {
    return _wire_get_psbt_input__static_method__Api(
      port_,
      wallet_id,
      utxo,
      only_witness_utxo,
      psbt_sighash_type,
    );
  }

  late final _wire_get_psbt_input__static_method__ApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_LocalUtxo>, ffi.Bool,
              ffi.Pointer<wire_PsbtSigHashType>)>>('wire_get_psbt_input__static_method__Api');
  late final _wire_get_psbt_input__static_method__Api = _wire_get_psbt_input__static_method__ApiPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_LocalUtxo>, bool, ffi.Pointer<wire_PsbtSigHashType>)>();

  void wire_get_descriptor_for_keychain__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    int keychain,
  ) {
    return _wire_get_descriptor_for_keychain__static_method__Api(
      port_,
      wallet_id,
      keychain,
    );
  }

  late final _wire_get_descriptor_for_keychain__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32)>>(
          'wire_get_descriptor_for_keychain__static_method__Api');
  late final _wire_get_descriptor_for_keychain__static_method__Api =
      _wire_get_descriptor_for_keychain__static_method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_generate_seed_from_word_count__static_method__Api(
    int port_,
    int word_count,
  ) {
    return _wire_generate_seed_from_word_count__static_method__Api(
      port_,
      word_count,
    );
  }

  late final _wire_generate_seed_from_word_count__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_generate_seed_from_word_count__static_method__Api');
  late final _wire_generate_seed_from_word_count__static_method__Api =
      _wire_generate_seed_from_word_count__static_method__ApiPtr.asFunction<void Function(int, int)>();

  void wire_generate_seed_from_string__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
  ) {
    return _wire_generate_seed_from_string__static_method__Api(
      port_,
      mnemonic,
    );
  }

  late final _wire_generate_seed_from_string__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_generate_seed_from_string__static_method__Api');
  late final _wire_generate_seed_from_string__static_method__Api =
      _wire_generate_seed_from_string__static_method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_seed_from_entropy__static_method__Api(
    int port_,
    ffi.Pointer<wire_uint_8_list> entropy,
  ) {
    return _wire_generate_seed_from_entropy__static_method__Api(
      port_,
      entropy,
    );
  }

  late final _wire_generate_seed_from_entropy__static_method__ApiPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_generate_seed_from_entropy__static_method__Api');
  late final _wire_generate_seed_from_entropy__static_method__Api =
      _wire_generate_seed_from_entropy__static_method__ApiPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_AddressIndex> new_box_autoadd_address_index_0() {
    return _new_box_autoadd_address_index_0();
  }

  late final _new_box_autoadd_address_index_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_AddressIndex> Function()>>('new_box_autoadd_address_index_0');
  late final _new_box_autoadd_address_index_0 =
      _new_box_autoadd_address_index_0Ptr.asFunction<ffi.Pointer<wire_AddressIndex> Function()>();

  ffi.Pointer<wire_BlockchainConfig> new_box_autoadd_blockchain_config_0() {
    return _new_box_autoadd_blockchain_config_0();
  }

  late final _new_box_autoadd_blockchain_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BlockchainConfig> Function()>>('new_box_autoadd_blockchain_config_0');
  late final _new_box_autoadd_blockchain_config_0 =
      _new_box_autoadd_blockchain_config_0Ptr.asFunction<ffi.Pointer<wire_BlockchainConfig> Function()>();

  ffi.Pointer<wire_DatabaseConfig> new_box_autoadd_database_config_0() {
    return _new_box_autoadd_database_config_0();
  }

  late final _new_box_autoadd_database_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DatabaseConfig> Function()>>('new_box_autoadd_database_config_0');
  late final _new_box_autoadd_database_config_0 =
      _new_box_autoadd_database_config_0Ptr.asFunction<ffi.Pointer<wire_DatabaseConfig> Function()>();

  ffi.Pointer<wire_ElectrumConfig> new_box_autoadd_electrum_config_0() {
    return _new_box_autoadd_electrum_config_0();
  }

  late final _new_box_autoadd_electrum_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ElectrumConfig> Function()>>('new_box_autoadd_electrum_config_0');
  late final _new_box_autoadd_electrum_config_0 =
      _new_box_autoadd_electrum_config_0Ptr.asFunction<ffi.Pointer<wire_ElectrumConfig> Function()>();

  ffi.Pointer<wire_EsploraConfig> new_box_autoadd_esplora_config_0() {
    return _new_box_autoadd_esplora_config_0();
  }

  late final _new_box_autoadd_esplora_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EsploraConfig> Function()>>('new_box_autoadd_esplora_config_0');
  late final _new_box_autoadd_esplora_config_0 =
      _new_box_autoadd_esplora_config_0Ptr.asFunction<ffi.Pointer<wire_EsploraConfig> Function()>();

  ffi.Pointer<ffi.Float> new_box_autoadd_f32_0(
    double value,
  ) {
    return _new_box_autoadd_f32_0(
      value,
    );
  }

  late final _new_box_autoadd_f32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>('new_box_autoadd_f32_0');
  late final _new_box_autoadd_f32_0 = _new_box_autoadd_f32_0Ptr.asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<wire_ForeignUtxo> new_box_autoadd_foreign_utxo_0() {
    return _new_box_autoadd_foreign_utxo_0();
  }

  late final _new_box_autoadd_foreign_utxo_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ForeignUtxo> Function()>>('new_box_autoadd_foreign_utxo_0');
  late final _new_box_autoadd_foreign_utxo_0 =
      _new_box_autoadd_foreign_utxo_0Ptr.asFunction<ffi.Pointer<wire_ForeignUtxo> Function()>();

  ffi.Pointer<wire_LocalUtxo> new_box_autoadd_local_utxo_0() {
    return _new_box_autoadd_local_utxo_0();
  }

  late final _new_box_autoadd_local_utxo_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LocalUtxo> Function()>>('new_box_autoadd_local_utxo_0');
  late final _new_box_autoadd_local_utxo_0 =
      _new_box_autoadd_local_utxo_0Ptr.asFunction<ffi.Pointer<wire_LocalUtxo> Function()>();

  ffi.Pointer<wire_PsbtSigHashType> new_box_autoadd_psbt_sig_hash_type_0() {
    return _new_box_autoadd_psbt_sig_hash_type_0();
  }

  late final _new_box_autoadd_psbt_sig_hash_type_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PsbtSigHashType> Function()>>('new_box_autoadd_psbt_sig_hash_type_0');
  late final _new_box_autoadd_psbt_sig_hash_type_0 =
      _new_box_autoadd_psbt_sig_hash_type_0Ptr.asFunction<ffi.Pointer<wire_PsbtSigHashType> Function()>();

  ffi.Pointer<wire_RbfValue> new_box_autoadd_rbf_value_0() {
    return _new_box_autoadd_rbf_value_0();
  }

  late final _new_box_autoadd_rbf_value_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RbfValue> Function()>>('new_box_autoadd_rbf_value_0');
  late final _new_box_autoadd_rbf_value_0 =
      _new_box_autoadd_rbf_value_0Ptr.asFunction<ffi.Pointer<wire_RbfValue> Function()>();

  ffi.Pointer<wire_RpcConfig> new_box_autoadd_rpc_config_0() {
    return _new_box_autoadd_rpc_config_0();
  }

  late final _new_box_autoadd_rpc_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RpcConfig> Function()>>('new_box_autoadd_rpc_config_0');
  late final _new_box_autoadd_rpc_config_0 =
      _new_box_autoadd_rpc_config_0Ptr.asFunction<ffi.Pointer<wire_RpcConfig> Function()>();

  ffi.Pointer<wire_RpcSyncParams> new_box_autoadd_rpc_sync_params_0() {
    return _new_box_autoadd_rpc_sync_params_0();
  }

  late final _new_box_autoadd_rpc_sync_params_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RpcSyncParams> Function()>>('new_box_autoadd_rpc_sync_params_0');
  late final _new_box_autoadd_rpc_sync_params_0 =
      _new_box_autoadd_rpc_sync_params_0Ptr.asFunction<ffi.Pointer<wire_RpcSyncParams> Function()>();

  ffi.Pointer<wire_Script> new_box_autoadd_script_0() {
    return _new_box_autoadd_script_0();
  }

  late final _new_box_autoadd_script_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Script> Function()>>('new_box_autoadd_script_0');
  late final _new_box_autoadd_script_0 = _new_box_autoadd_script_0Ptr.asFunction<ffi.Pointer<wire_Script> Function()>();

  ffi.Pointer<wire_SignOptions> new_box_autoadd_sign_options_0() {
    return _new_box_autoadd_sign_options_0();
  }

  late final _new_box_autoadd_sign_options_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SignOptions> Function()>>('new_box_autoadd_sign_options_0');
  late final _new_box_autoadd_sign_options_0 =
      _new_box_autoadd_sign_options_0Ptr.asFunction<ffi.Pointer<wire_SignOptions> Function()>();

  ffi.Pointer<wire_SledDbConfiguration> new_box_autoadd_sled_db_configuration_0() {
    return _new_box_autoadd_sled_db_configuration_0();
  }

  late final _new_box_autoadd_sled_db_configuration_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>>(
          'new_box_autoadd_sled_db_configuration_0');
  late final _new_box_autoadd_sled_db_configuration_0 =
      _new_box_autoadd_sled_db_configuration_0Ptr.asFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>();

  ffi.Pointer<wire_SqliteDbConfiguration> new_box_autoadd_sqlite_db_configuration_0() {
    return _new_box_autoadd_sqlite_db_configuration_0();
  }

  late final _new_box_autoadd_sqlite_db_configuration_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SqliteDbConfiguration> Function()>>(
          'new_box_autoadd_sqlite_db_configuration_0');
  late final _new_box_autoadd_sqlite_db_configuration_0 =
      _new_box_autoadd_sqlite_db_configuration_0Ptr.asFunction<ffi.Pointer<wire_SqliteDbConfiguration> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>('new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr.asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>('new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_UserPass> new_box_autoadd_user_pass_0() {
    return _new_box_autoadd_user_pass_0();
  }

  late final _new_box_autoadd_user_pass_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_UserPass> Function()>>('new_box_autoadd_user_pass_0');
  late final _new_box_autoadd_user_pass_0 =
      _new_box_autoadd_user_pass_0Ptr.asFunction<ffi.Pointer<wire_UserPass> Function()>();

  ffi.Pointer<wire_list_out_point> new_list_out_point_0(
    int len,
  ) {
    return _new_list_out_point_0(
      len,
    );
  }

  late final _new_list_out_point_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_out_point> Function(ffi.Int32)>>('new_list_out_point_0');
  late final _new_list_out_point_0 =
      _new_list_out_point_0Ptr.asFunction<ffi.Pointer<wire_list_out_point> Function(int)>();

  ffi.Pointer<wire_list_script_amount> new_list_script_amount_0(
    int len,
  ) {
    return _new_list_script_amount_0(
      len,
    );
  }

  late final _new_list_script_amount_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_script_amount> Function(ffi.Int32)>>('new_list_script_amount_0');
  late final _new_list_script_amount_0 =
      _new_list_script_amount_0Ptr.asFunction<ffi.Pointer<wire_list_script_amount> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<AddressIndexKind> inflate_AddressIndex_Peek() {
    return _inflate_AddressIndex_Peek();
  }

  late final _inflate_AddressIndex_PeekPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AddressIndexKind> Function()>>('inflate_AddressIndex_Peek');
  late final _inflate_AddressIndex_Peek =
      _inflate_AddressIndex_PeekPtr.asFunction<ffi.Pointer<AddressIndexKind> Function()>();

  ffi.Pointer<AddressIndexKind> inflate_AddressIndex_Reset() {
    return _inflate_AddressIndex_Reset();
  }

  late final _inflate_AddressIndex_ResetPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<AddressIndexKind> Function()>>('inflate_AddressIndex_Reset');
  late final _inflate_AddressIndex_Reset =
      _inflate_AddressIndex_ResetPtr.asFunction<ffi.Pointer<AddressIndexKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Electrum() {
    return _inflate_BlockchainConfig_Electrum();
  }

  late final _inflate_BlockchainConfig_ElectrumPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Electrum');
  late final _inflate_BlockchainConfig_Electrum =
      _inflate_BlockchainConfig_ElectrumPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Esplora() {
    return _inflate_BlockchainConfig_Esplora();
  }

  late final _inflate_BlockchainConfig_EsploraPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Esplora');
  late final _inflate_BlockchainConfig_Esplora =
      _inflate_BlockchainConfig_EsploraPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Rpc() {
    return _inflate_BlockchainConfig_Rpc();
  }

  late final _inflate_BlockchainConfig_RpcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>('inflate_BlockchainConfig_Rpc');
  late final _inflate_BlockchainConfig_Rpc =
      _inflate_BlockchainConfig_RpcPtr.asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sqlite() {
    return _inflate_DatabaseConfig_Sqlite();
  }

  late final _inflate_DatabaseConfig_SqlitePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>('inflate_DatabaseConfig_Sqlite');
  late final _inflate_DatabaseConfig_Sqlite =
      _inflate_DatabaseConfig_SqlitePtr.asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sled() {
    return _inflate_DatabaseConfig_Sled();
  }

  late final _inflate_DatabaseConfig_SledPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>('inflate_DatabaseConfig_Sled');
  late final _inflate_DatabaseConfig_Sled =
      _inflate_DatabaseConfig_SledPtr.asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  ffi.Pointer<RbfValueKind> inflate_RbfValue_Value() {
    return _inflate_RbfValue_Value();
  }

  late final _inflate_RbfValue_ValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RbfValueKind> Function()>>('inflate_RbfValue_Value');
  late final _inflate_RbfValue_Value = _inflate_RbfValue_ValuePtr.asFunction<ffi.Pointer<RbfValueKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ElectrumConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> socks5;

  @ffi.Uint8()
  external int retry;

  external ffi.Pointer<ffi.Uint8> timeout;

  @ffi.Uint64()
  external int stop_gap;

  @ffi.Bool()
  external bool validate_domain;
}

class wire_BlockchainConfig_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_ElectrumConfig> config;
}

class wire_EsploraConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> base_url;

  external ffi.Pointer<wire_uint_8_list> proxy;

  external ffi.Pointer<ffi.Uint8> concurrency;

  @ffi.Uint64()
  external int stop_gap;

  external ffi.Pointer<ffi.Uint64> timeout;
}

class wire_BlockchainConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_EsploraConfig> config;
}

class wire_UserPass extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> username;

  external ffi.Pointer<wire_uint_8_list> password;
}

class wire_RpcSyncParams extends ffi.Struct {
  @ffi.Uint64()
  external int start_script_count;

  @ffi.Uint64()
  external int start_time;

  @ffi.Bool()
  external bool force_start_time;

  @ffi.Uint64()
  external int poll_rate_sec;
}

class wire_RpcConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> auth_cookie;

  external ffi.Pointer<wire_UserPass> auth_user_pass;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_uint_8_list> wallet_name;

  external ffi.Pointer<wire_RpcSyncParams> sync_params;
}

class wire_BlockchainConfig_Rpc extends ffi.Struct {
  external ffi.Pointer<wire_RpcConfig> config;
}

class BlockchainConfigKind extends ffi.Union {
  external ffi.Pointer<wire_BlockchainConfig_Electrum> Electrum;

  external ffi.Pointer<wire_BlockchainConfig_Esplora> Esplora;

  external ffi.Pointer<wire_BlockchainConfig_Rpc> Rpc;
}

class wire_BlockchainConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<BlockchainConfigKind> kind;
}

class wire_Script extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> internal;
}

class wire_ScriptAmount extends ffi.Struct {
  external wire_Script script;

  @ffi.Uint64()
  external int amount;
}

class wire_list_script_amount extends ffi.Struct {
  external ffi.Pointer<wire_ScriptAmount> ptr;

  @ffi.Int32()
  external int len;
}

class wire_OutPoint extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> txid;

  @ffi.Uint32()
  external int vout;
}

class wire_list_out_point extends ffi.Struct {
  external ffi.Pointer<wire_OutPoint> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ForeignUtxo extends ffi.Struct {
  external wire_OutPoint field0;

  external ffi.Pointer<wire_uint_8_list> field1;

  @ffi.UintPtr()
  external int field2;
}

class wire_RbfValue_RbfDefault extends ffi.Opaque {}

class wire_RbfValue_Value extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

class RbfValueKind extends ffi.Union {
  external ffi.Pointer<wire_RbfValue_RbfDefault> RbfDefault;

  external ffi.Pointer<wire_RbfValue_Value> Value;
}

class wire_RbfValue extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<RbfValueKind> kind;
}

class wire_DatabaseConfig_Memory extends ffi.Opaque {}

class wire_SqliteDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;
}

class wire_DatabaseConfig_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_SqliteDbConfiguration> config;
}

class wire_SledDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;

  external ffi.Pointer<wire_uint_8_list> tree_name;
}

class wire_DatabaseConfig_Sled extends ffi.Struct {
  external ffi.Pointer<wire_SledDbConfiguration> config;
}

class DatabaseConfigKind extends ffi.Union {
  external ffi.Pointer<wire_DatabaseConfig_Memory> Memory;

  external ffi.Pointer<wire_DatabaseConfig_Sqlite> Sqlite;

  external ffi.Pointer<wire_DatabaseConfig_Sled> Sled;
}

class wire_DatabaseConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DatabaseConfigKind> kind;
}

class wire_AddressIndex_New extends ffi.Opaque {}

class wire_AddressIndex_LastUnused extends ffi.Opaque {}

class wire_AddressIndex_Peek extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

class wire_AddressIndex_Reset extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

class AddressIndexKind extends ffi.Union {
  external ffi.Pointer<wire_AddressIndex_New> New;

  external ffi.Pointer<wire_AddressIndex_LastUnused> LastUnused;

  external ffi.Pointer<wire_AddressIndex_Peek> Peek;

  external ffi.Pointer<wire_AddressIndex_Reset> Reset;
}

class wire_AddressIndex extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<AddressIndexKind> kind;
}

class wire_SignOptions extends ffi.Struct {
  @ffi.Bool()
  external bool is_multi_sig;

  @ffi.Bool()
  external bool trust_witness_utxo;

  external ffi.Pointer<ffi.Uint32> assume_height;

  @ffi.Bool()
  external bool allow_all_sighashes;

  @ffi.Bool()
  external bool remove_partial_sigs;

  @ffi.Bool()
  external bool try_finalize;

  @ffi.Bool()
  external bool sign_with_tap_internal_key;

  @ffi.Bool()
  external bool allow_grinding;
}

class wire_TxOut extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external wire_Script script_pubkey;
}

class wire_LocalUtxo extends ffi.Struct {
  external wire_OutPoint outpoint;

  external wire_TxOut txout;

  @ffi.Bool()
  external bool is_spent;

  @ffi.Int32()
  external int keychain;
}

class wire_PsbtSigHashType extends ffi.Struct {
  @ffi.Uint32()
  external int inner;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
