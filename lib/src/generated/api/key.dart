// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `from`, `from`, `from`, `from`

class FfiDerivationPath {
  final DerivationPath opaque;

  const FfiDerivationPath({
    required this.opaque,
  });

  String asString() => core.instance.api.crateApiKeyFfiDerivationPathAsString(
        that: this,
      );

  static Future<FfiDerivationPath> fromString({required String path}) =>
      core.instance.api.crateApiKeyFfiDerivationPathFromString(path: path);

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiDerivationPath &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}

class FfiDescriptorPublicKey {
  final DescriptorPublicKey opaque;

  const FfiDescriptorPublicKey({
    required this.opaque,
  });

  String asString() =>
      core.instance.api.crateApiKeyFfiDescriptorPublicKeyAsString(
        that: this,
      );

  static Future<FfiDescriptorPublicKey> derive(
          {required FfiDescriptorPublicKey opaque,
          required FfiDerivationPath path}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorPublicKeyDerive(opaque: opaque, path: path);

  static Future<FfiDescriptorPublicKey> extend(
          {required FfiDescriptorPublicKey opaque,
          required FfiDerivationPath path}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorPublicKeyExtend(opaque: opaque, path: path);

  static Future<FfiDescriptorPublicKey> fromString(
          {required String publicKey}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorPublicKeyFromString(publicKey: publicKey);

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiDescriptorPublicKey &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}

class FfiDescriptorSecretKey {
  final DescriptorSecretKey opaque;

  const FfiDescriptorSecretKey({
    required this.opaque,
  });

  static FfiDescriptorPublicKey asPublic(
          {required FfiDescriptorSecretKey opaque}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorSecretKeyAsPublic(opaque: opaque);

  String asString() =>
      core.instance.api.crateApiKeyFfiDescriptorSecretKeyAsString(
        that: this,
      );

  static Future<FfiDescriptorSecretKey> create(
          {required Network network,
          required FfiMnemonic mnemonic,
          String? password}) =>
      core.instance.api.crateApiKeyFfiDescriptorSecretKeyCreate(
          network: network, mnemonic: mnemonic, password: password);

  static Future<FfiDescriptorSecretKey> derive(
          {required FfiDescriptorSecretKey opaque,
          required FfiDerivationPath path}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorSecretKeyDerive(opaque: opaque, path: path);

  static Future<FfiDescriptorSecretKey> extend(
          {required FfiDescriptorSecretKey opaque,
          required FfiDerivationPath path}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorSecretKeyExtend(opaque: opaque, path: path);

  static Future<FfiDescriptorSecretKey> fromString(
          {required String secretKey}) =>
      core.instance.api
          .crateApiKeyFfiDescriptorSecretKeyFromString(secretKey: secretKey);

  /// Get the private key as bytes.
  Uint8List secretBytes() =>
      core.instance.api.crateApiKeyFfiDescriptorSecretKeySecretBytes(
        that: this,
      );

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiDescriptorSecretKey &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}

class FfiMnemonic {
  final Mnemonic opaque;

  const FfiMnemonic({
    required this.opaque,
  });

  String asString() => core.instance.api.crateApiKeyFfiMnemonicAsString(
        that: this,
      );

  /// Generates Mnemonic with a random entropy
  static BdkMnemonic create({required WordCount wordCount}) =>
      core.instance.api.crateApiKeyBdkMnemonicCreate(wordCount: wordCount);

  /// Create a new Mnemonic in the specified language from the given entropy.
  /// Entropy must be a multiple of 32 bits (4 bytes) and 128-256 bits in length.
  static Future<FfiMnemonic> fromEntropy({required List<int> entropy}) =>
      core.instance.api.crateApiKeyFfiMnemonicFromEntropy(entropy: entropy);

  /// Parse a Mnemonic with given string
  static Future<FfiMnemonic> fromString({required String mnemonic}) =>
      core.instance.api.crateApiKeyFfiMnemonicFromString(mnemonic: mnemonic);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Generates Mnemonic with a random entropy
  static Future<FfiMnemonic> newInstance({required WordCount wordCount}) =>
      core.instance.api.crateApiKeyFfiMnemonicNew(wordCount: wordCount);

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiMnemonic &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}
