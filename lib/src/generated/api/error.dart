// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'bitcoin.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'error.freezed.dart';

// These types are ignored because they are not used by any `pub` functions: `LockError`, `PersistenceError`, `SignerError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`

@freezed
sealed class AddressParseError
    with _$AddressParseError
    implements FrbException {
  const AddressParseError._();

  const factory AddressParseError.base58() = AddressParseError_Base58;
  const factory AddressParseError.bech32() = AddressParseError_Bech32;
  const factory AddressParseError.witnessVersion({
    required String errorMessage,
  }) = AddressParseError_WitnessVersion;
  const factory AddressParseError.witnessProgram({
    required String errorMessage,
  }) = AddressParseError_WitnessProgram;
  const factory AddressParseError.unknownHrp() = AddressParseError_UnknownHrp;
  const factory AddressParseError.legacyAddressTooLong() =
      AddressParseError_LegacyAddressTooLong;
  const factory AddressParseError.invalidBase58PayloadLength() =
      AddressParseError_InvalidBase58PayloadLength;
  const factory AddressParseError.invalidLegacyPrefix() =
      AddressParseError_InvalidLegacyPrefix;
  const factory AddressParseError.networkValidation() =
      AddressParseError_NetworkValidation;
  const factory AddressParseError.otherAddressParseErr() =
      AddressParseError_OtherAddressParseErr;
}

@freezed
sealed class Bip32Error with _$Bip32Error implements FrbException {
  const Bip32Error._();

  const factory Bip32Error.cannotDeriveFromHardenedKey() =
      Bip32Error_CannotDeriveFromHardenedKey;
  const factory Bip32Error.secp256K1({
    required String errorMessage,
  }) = Bip32Error_Secp256k1;
  const factory Bip32Error.invalidChildNumber({
    required int childNumber,
  }) = Bip32Error_InvalidChildNumber;
  const factory Bip32Error.invalidChildNumberFormat() =
      Bip32Error_InvalidChildNumberFormat;
  const factory Bip32Error.invalidDerivationPathFormat() =
      Bip32Error_InvalidDerivationPathFormat;
  const factory Bip32Error.unknownVersion({
    required String version,
  }) = Bip32Error_UnknownVersion;
  const factory Bip32Error.wrongExtendedKeyLength({
    required int length,
  }) = Bip32Error_WrongExtendedKeyLength;
  const factory Bip32Error.base58({
    required String errorMessage,
  }) = Bip32Error_Base58;
  const factory Bip32Error.hex({
    required String errorMessage,
  }) = Bip32Error_Hex;
  const factory Bip32Error.invalidPublicKeyHexLength({
    required int length,
  }) = Bip32Error_InvalidPublicKeyHexLength;
  const factory Bip32Error.unknownError({
    required String errorMessage,
  }) = Bip32Error_UnknownError;
}

@freezed
sealed class Bip39Error with _$Bip39Error implements FrbException {
  const Bip39Error._();

  const factory Bip39Error.badWordCount({
    required BigInt wordCount,
  }) = Bip39Error_BadWordCount;
  const factory Bip39Error.unknownWord({
    required BigInt index,
  }) = Bip39Error_UnknownWord;
  const factory Bip39Error.badEntropyBitCount({
    required BigInt bitCount,
  }) = Bip39Error_BadEntropyBitCount;
  const factory Bip39Error.invalidChecksum() = Bip39Error_InvalidChecksum;
  const factory Bip39Error.ambiguousLanguages({
    required String languages,
  }) = Bip39Error_AmbiguousLanguages;
}

@freezed
sealed class CalculateFeeError
    with _$CalculateFeeError
    implements FrbException {
  const CalculateFeeError._();

  const factory CalculateFeeError.generic({
    required String errorMessage,
  }) = CalculateFeeError_Generic;
  const factory CalculateFeeError.missingTxOut({
    required List<OutPoint> outPoints,
  }) = CalculateFeeError_MissingTxOut;
  const factory CalculateFeeError.negativeFee({
    required String amount,
  }) = CalculateFeeError_NegativeFee;
}

@freezed
sealed class CannotConnectError
    with _$CannotConnectError
    implements FrbException {
  const CannotConnectError._();

  const factory CannotConnectError.include({
    required int height,
  }) = CannotConnectError_Include;
}

@freezed
sealed class CreateTxError with _$CreateTxError implements FrbException {
  const CreateTxError._();

  const factory CreateTxError.generic({
    required String errorMessage,
  }) = CreateTxError_Generic;
  const factory CreateTxError.descriptor({
    required String errorMessage,
  }) = CreateTxError_Descriptor;
  const factory CreateTxError.policy({
    required String errorMessage,
  }) = CreateTxError_Policy;
  const factory CreateTxError.spendingPolicyRequired({
    required String kind,
  }) = CreateTxError_SpendingPolicyRequired;
  const factory CreateTxError.version0() = CreateTxError_Version0;
  const factory CreateTxError.version1Csv() = CreateTxError_Version1Csv;
  const factory CreateTxError.lockTime({
    required String requested,
    required String required_,
  }) = CreateTxError_LockTime;
  const factory CreateTxError.rbfSequence() = CreateTxError_RbfSequence;
  const factory CreateTxError.rbfSequenceCsv({
    required String rbf,
    required String csv,
  }) = CreateTxError_RbfSequenceCsv;
  const factory CreateTxError.feeTooLow({
    required String required_,
  }) = CreateTxError_FeeTooLow;
  const factory CreateTxError.feeRateTooLow({
    required String required_,
  }) = CreateTxError_FeeRateTooLow;
  const factory CreateTxError.noUtxosSelected() = CreateTxError_NoUtxosSelected;
  const factory CreateTxError.outputBelowDustLimit({
    required BigInt index,
  }) = CreateTxError_OutputBelowDustLimit;
  const factory CreateTxError.changePolicyDescriptor() =
      CreateTxError_ChangePolicyDescriptor;
  const factory CreateTxError.coinSelection({
    required String errorMessage,
  }) = CreateTxError_CoinSelection;
  const factory CreateTxError.insufficientFunds({
    required BigInt needed,
    required BigInt available,
  }) = CreateTxError_InsufficientFunds;
  const factory CreateTxError.noRecipients() = CreateTxError_NoRecipients;
  const factory CreateTxError.psbt({
    required String errorMessage,
  }) = CreateTxError_Psbt;
  const factory CreateTxError.missingKeyOrigin({
    required String key,
  }) = CreateTxError_MissingKeyOrigin;
  const factory CreateTxError.unknownUtxo({
    required String outpoint,
  }) = CreateTxError_UnknownUtxo;
  const factory CreateTxError.missingNonWitnessUtxo({
    required String outpoint,
  }) = CreateTxError_MissingNonWitnessUtxo;
  const factory CreateTxError.miniscriptPsbt({
    required String errorMessage,
  }) = CreateTxError_MiniscriptPsbt;
}

@freezed
sealed class CreateWithPersistError
    with _$CreateWithPersistError
    implements FrbException {
  const CreateWithPersistError._();

  const factory CreateWithPersistError.persist({
    required String errorMessage,
  }) = CreateWithPersistError_Persist;
  const factory CreateWithPersistError.dataAlreadyExists() =
      CreateWithPersistError_DataAlreadyExists;
  const factory CreateWithPersistError.descriptor({
    required String errorMessage,
  }) = CreateWithPersistError_Descriptor;
}

@freezed
sealed class DescriptorError with _$DescriptorError implements FrbException {
  const DescriptorError._();

  const factory DescriptorError.invalidHdKeyPath() =
      DescriptorError_InvalidHdKeyPath;
  const factory DescriptorError.missingPrivateData() =
      DescriptorError_MissingPrivateData;
  const factory DescriptorError.invalidDescriptorChecksum() =
      DescriptorError_InvalidDescriptorChecksum;
  const factory DescriptorError.hardenedDerivationXpub() =
      DescriptorError_HardenedDerivationXpub;
  const factory DescriptorError.multiPath() = DescriptorError_MultiPath;
  const factory DescriptorError.key({
    required String errorMessage,
  }) = DescriptorError_Key;
  const factory DescriptorError.generic({
    required String errorMessage,
  }) = DescriptorError_Generic;
  const factory DescriptorError.policy({
    required String errorMessage,
  }) = DescriptorError_Policy;
  const factory DescriptorError.invalidDescriptorCharacter({
    required String char,
  }) = DescriptorError_InvalidDescriptorCharacter;
  const factory DescriptorError.bip32({
    required String errorMessage,
  }) = DescriptorError_Bip32;
  const factory DescriptorError.base58({
    required String errorMessage,
  }) = DescriptorError_Base58;
  const factory DescriptorError.pk({
    required String errorMessage,
  }) = DescriptorError_Pk;
  const factory DescriptorError.miniscript({
    required String errorMessage,
  }) = DescriptorError_Miniscript;
  const factory DescriptorError.hex({
    required String errorMessage,
  }) = DescriptorError_Hex;
  const factory DescriptorError.externalAndInternalAreTheSame() =
      DescriptorError_ExternalAndInternalAreTheSame;
}

@freezed
sealed class DescriptorKeyError
    with _$DescriptorKeyError
    implements FrbException {
  const DescriptorKeyError._();

  const factory DescriptorKeyError.parse({
    required String errorMessage,
  }) = DescriptorKeyError_Parse;
  const factory DescriptorKeyError.invalidKeyType() =
      DescriptorKeyError_InvalidKeyType;
  const factory DescriptorKeyError.bip32({
    required String errorMessage,
  }) = DescriptorKeyError_Bip32;
}

@freezed
sealed class ElectrumError with _$ElectrumError implements FrbException {
  const ElectrumError._();

  const factory ElectrumError.ioError({
    required String errorMessage,
  }) = ElectrumError_IOError;
  const factory ElectrumError.json({
    required String errorMessage,
  }) = ElectrumError_Json;
  const factory ElectrumError.hex({
    required String errorMessage,
  }) = ElectrumError_Hex;
  const factory ElectrumError.protocol({
    required String errorMessage,
  }) = ElectrumError_Protocol;
  const factory ElectrumError.bitcoin({
    required String errorMessage,
  }) = ElectrumError_Bitcoin;
  const factory ElectrumError.alreadySubscribed() =
      ElectrumError_AlreadySubscribed;
  const factory ElectrumError.notSubscribed() = ElectrumError_NotSubscribed;
  const factory ElectrumError.invalidResponse({
    required String errorMessage,
  }) = ElectrumError_InvalidResponse;
  const factory ElectrumError.message({
    required String errorMessage,
  }) = ElectrumError_Message;
  const factory ElectrumError.invalidDnsNameError({
    required String domain,
  }) = ElectrumError_InvalidDNSNameError;
  const factory ElectrumError.missingDomain() = ElectrumError_MissingDomain;
  const factory ElectrumError.allAttemptsErrored() =
      ElectrumError_AllAttemptsErrored;
  const factory ElectrumError.sharedIoError({
    required String errorMessage,
  }) = ElectrumError_SharedIOError;
  const factory ElectrumError.couldntLockReader() =
      ElectrumError_CouldntLockReader;
  const factory ElectrumError.mpsc() = ElectrumError_Mpsc;
  const factory ElectrumError.couldNotCreateConnection({
    required String errorMessage,
  }) = ElectrumError_CouldNotCreateConnection;
  const factory ElectrumError.requestAlreadyConsumed() =
      ElectrumError_RequestAlreadyConsumed;
}

@freezed
sealed class EsploraError with _$EsploraError implements FrbException {
  const EsploraError._();

  const factory EsploraError.minreq({
    required String errorMessage,
  }) = EsploraError_Minreq;
  const factory EsploraError.httpResponse({
    required int status,
    required String errorMessage,
  }) = EsploraError_HttpResponse;
  const factory EsploraError.parsing({
    required String errorMessage,
  }) = EsploraError_Parsing;
  const factory EsploraError.statusCode({
    required String errorMessage,
  }) = EsploraError_StatusCode;
  const factory EsploraError.bitcoinEncoding({
    required String errorMessage,
  }) = EsploraError_BitcoinEncoding;
  const factory EsploraError.hexToArray({
    required String errorMessage,
  }) = EsploraError_HexToArray;
  const factory EsploraError.hexToBytes({
    required String errorMessage,
  }) = EsploraError_HexToBytes;
  const factory EsploraError.transactionNotFound() =
      EsploraError_TransactionNotFound;
  const factory EsploraError.headerHeightNotFound({
    required int height,
  }) = EsploraError_HeaderHeightNotFound;
  const factory EsploraError.headerHashNotFound() =
      EsploraError_HeaderHashNotFound;
  const factory EsploraError.invalidHttpHeaderName({
    required String name,
  }) = EsploraError_InvalidHttpHeaderName;
  const factory EsploraError.invalidHttpHeaderValue({
    required String value,
  }) = EsploraError_InvalidHttpHeaderValue;
  const factory EsploraError.requestAlreadyConsumed() =
      EsploraError_RequestAlreadyConsumed;
}

@freezed
sealed class ExtractTxError with _$ExtractTxError implements FrbException {
  const ExtractTxError._();

  const factory ExtractTxError.absurdFeeRate({
    required BigInt feeRate,
  }) = ExtractTxError_AbsurdFeeRate;
  const factory ExtractTxError.missingInputValue() =
      ExtractTxError_MissingInputValue;
  const factory ExtractTxError.sendingTooMuch() = ExtractTxError_SendingTooMuch;
  const factory ExtractTxError.otherExtractTxErr() =
      ExtractTxError_OtherExtractTxErr;
}

@freezed
sealed class FromScriptError with _$FromScriptError implements FrbException {
  const FromScriptError._();

  const factory FromScriptError.unrecognizedScript() =
      FromScriptError_UnrecognizedScript;
  const factory FromScriptError.witnessProgram({
    required String errorMessage,
  }) = FromScriptError_WitnessProgram;
  const factory FromScriptError.witnessVersion({
    required String errorMessage,
  }) = FromScriptError_WitnessVersion;
  const factory FromScriptError.otherFromScriptErr() =
      FromScriptError_OtherFromScriptErr;
}

@freezed
sealed class LoadWithPersistError
    with _$LoadWithPersistError
    implements FrbException {
  const LoadWithPersistError._();

  const factory LoadWithPersistError.persist({
    required String errorMessage,
  }) = LoadWithPersistError_Persist;
  const factory LoadWithPersistError.invalidChangeSet({
    required String errorMessage,
  }) = LoadWithPersistError_InvalidChangeSet;
  const factory LoadWithPersistError.couldNotLoad() =
      LoadWithPersistError_CouldNotLoad;
}

@freezed
sealed class PsbtError with _$PsbtError implements FrbException {
  const PsbtError._();

  const factory PsbtError.invalidMagic() = PsbtError_InvalidMagic;
  const factory PsbtError.missingUtxo() = PsbtError_MissingUtxo;
  const factory PsbtError.invalidSeparator() = PsbtError_InvalidSeparator;
  const factory PsbtError.psbtUtxoOutOfBounds() = PsbtError_PsbtUtxoOutOfBounds;
  const factory PsbtError.invalidKey({
    required String key,
  }) = PsbtError_InvalidKey;
  const factory PsbtError.invalidProprietaryKey() =
      PsbtError_InvalidProprietaryKey;
  const factory PsbtError.duplicateKey({
    required String key,
  }) = PsbtError_DuplicateKey;
  const factory PsbtError.unsignedTxHasScriptSigs() =
      PsbtError_UnsignedTxHasScriptSigs;
  const factory PsbtError.unsignedTxHasScriptWitnesses() =
      PsbtError_UnsignedTxHasScriptWitnesses;
  const factory PsbtError.mustHaveUnsignedTx() = PsbtError_MustHaveUnsignedTx;
  const factory PsbtError.noMorePairs() = PsbtError_NoMorePairs;
  const factory PsbtError.unexpectedUnsignedTx() =
      PsbtError_UnexpectedUnsignedTx;
  const factory PsbtError.nonStandardSighashType({
    required int sighash,
  }) = PsbtError_NonStandardSighashType;
  const factory PsbtError.invalidHash({
    required String hash,
  }) = PsbtError_InvalidHash;
  const factory PsbtError.invalidPreimageHashPair() =
      PsbtError_InvalidPreimageHashPair;
  const factory PsbtError.combineInconsistentKeySources({
    required String xpub,
  }) = PsbtError_CombineInconsistentKeySources;
  const factory PsbtError.consensusEncoding({
    required String encodingError,
  }) = PsbtError_ConsensusEncoding;
  const factory PsbtError.negativeFee() = PsbtError_NegativeFee;
  const factory PsbtError.feeOverflow() = PsbtError_FeeOverflow;
  const factory PsbtError.invalidPublicKey({
    required String errorMessage,
  }) = PsbtError_InvalidPublicKey;
  const factory PsbtError.invalidSecp256K1PublicKey({
    required String secp256K1Error,
  }) = PsbtError_InvalidSecp256k1PublicKey;
  const factory PsbtError.invalidXOnlyPublicKey() =
      PsbtError_InvalidXOnlyPublicKey;
  const factory PsbtError.invalidEcdsaSignature({
    required String errorMessage,
  }) = PsbtError_InvalidEcdsaSignature;
  const factory PsbtError.invalidTaprootSignature({
    required String errorMessage,
  }) = PsbtError_InvalidTaprootSignature;
  const factory PsbtError.invalidControlBlock() = PsbtError_InvalidControlBlock;
  const factory PsbtError.invalidLeafVersion() = PsbtError_InvalidLeafVersion;
  const factory PsbtError.taproot() = PsbtError_Taproot;
  const factory PsbtError.tapTree({
    required String errorMessage,
  }) = PsbtError_TapTree;
  const factory PsbtError.xPubKey() = PsbtError_XPubKey;
  const factory PsbtError.version({
    required String errorMessage,
  }) = PsbtError_Version;
  const factory PsbtError.partialDataConsumption() =
      PsbtError_PartialDataConsumption;
  const factory PsbtError.io({
    required String errorMessage,
  }) = PsbtError_Io;
  const factory PsbtError.otherPsbtErr() = PsbtError_OtherPsbtErr;
}

@freezed
sealed class PsbtParseError with _$PsbtParseError implements FrbException {
  const PsbtParseError._();

  const factory PsbtParseError.psbtEncoding({
    required String errorMessage,
  }) = PsbtParseError_PsbtEncoding;
  const factory PsbtParseError.base64Encoding({
    required String errorMessage,
  }) = PsbtParseError_Base64Encoding;
}

enum RequestBuilderError {
  requestAlreadyConsumed,
  ;
}

@freezed
sealed class SqliteError with _$SqliteError implements FrbException {
  const SqliteError._();

  const factory SqliteError.sqlite({
    required String rusqliteError,
  }) = SqliteError_Sqlite;
}

@freezed
sealed class TransactionError with _$TransactionError implements FrbException {
  const TransactionError._();

  const factory TransactionError.io() = TransactionError_Io;
  const factory TransactionError.oversizedVectorAllocation() =
      TransactionError_OversizedVectorAllocation;
  const factory TransactionError.invalidChecksum({
    required String expected,
    required String actual,
  }) = TransactionError_InvalidChecksum;
  const factory TransactionError.nonMinimalVarInt() =
      TransactionError_NonMinimalVarInt;
  const factory TransactionError.parseFailed() = TransactionError_ParseFailed;
  const factory TransactionError.unsupportedSegwitFlag({
    required int flag,
  }) = TransactionError_UnsupportedSegwitFlag;
  const factory TransactionError.otherTransactionErr() =
      TransactionError_OtherTransactionErr;
}

@freezed
sealed class TxidParseError with _$TxidParseError implements FrbException {
  const TxidParseError._();

  const factory TxidParseError.invalidTxid({
    required String txid,
  }) = TxidParseError_InvalidTxid;
}
