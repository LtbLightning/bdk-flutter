// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'bitcoin.dart';
import 'electrum.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// Rust type: RustOpaqueNom<bdk_esplora :: esplora_client :: BlockingClient>
abstract class BlockingClient implements RustOpaqueInterface {}

class FfiEsploraClient {
  final BlockingClient opaque;

  const FfiEsploraClient({
    required this.opaque,
  });

  static Future<void> broadcast(
          {required FfiEsploraClient opaque,
          required FfiTransaction transaction}) =>
      core.instance.api.crateApiEsploraFfiEsploraClientBroadcast(
          opaque: opaque, transaction: transaction);

  static Future<FfiUpdate> fullScan(
          {required FfiEsploraClient opaque,
          required FfiFullScanRequest request,
          required BigInt stopGap,
          required BigInt parallelRequests}) =>
      core.instance.api.crateApiEsploraFfiEsploraClientFullScan(
          opaque: opaque,
          request: request,
          stopGap: stopGap,
          parallelRequests: parallelRequests);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<FfiEsploraClient> newInstance({required String url}) =>
      core.instance.api.crateApiEsploraFfiEsploraClientNew(url: url);

  static Future<FfiUpdate> sync_(
          {required FfiEsploraClient opaque,
          required FfiSyncRequest request,
          required BigInt parallelRequests}) =>
      core.instance.api.crateApiEsploraFfiEsploraClientSync(
          opaque: opaque, request: request, parallelRequests: parallelRequests);

  @override
  int get hashCode => opaque.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiEsploraClient &&
          runtimeType == other.runtimeType &&
          opaque == other.opaque;
}
