// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../lib.dart';
import 'error.dart';
import 'key.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

class FfiDescriptor {
  final ExtendedDescriptor extendedDescriptor;
  final KeyMap keyMap;

  const FfiDescriptor({
    required this.extendedDescriptor,
    required this.keyMap,
  });

  String asString() =>
      core.instance.api.crateApiDescriptorFfiDescriptorAsString(
        that: this,
      );

  ///Returns raw weight units.
  BigInt maxSatisfactionWeight() =>
      core.instance.api.crateApiDescriptorFfiDescriptorMaxSatisfactionWeight(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<FfiDescriptor> newInstance(
          {required String descriptor, required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNew(
          descriptor: descriptor, network: network);

  static FfiDescriptor newBip44(
          {required FfiDescriptorSecretKey secretKey,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip44(
          secretKey: secretKey, keychainKind: keychainKind, network: network);

  static FfiDescriptor newBip44Public(
          {required FfiDescriptorPublicKey publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip44Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network);

  static FfiDescriptor newBip49(
          {required FfiDescriptorSecretKey secretKey,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip49(
          secretKey: secretKey, keychainKind: keychainKind, network: network);

  static FfiDescriptor newBip49Public(
          {required FfiDescriptorPublicKey publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip49Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network);

  static FfiDescriptor newBip84(
          {required FfiDescriptorSecretKey secretKey,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip84(
          secretKey: secretKey, keychainKind: keychainKind, network: network);

  static FfiDescriptor newBip84Public(
          {required FfiDescriptorPublicKey publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip84Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network);

  static FfiDescriptor newBip86(
          {required FfiDescriptorSecretKey secretKey,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip86(
          secretKey: secretKey, keychainKind: keychainKind, network: network);

  static FfiDescriptor newBip86Public(
          {required FfiDescriptorPublicKey publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network}) =>
      core.instance.api.crateApiDescriptorFfiDescriptorNewBip86Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network);

  String toStringWithSecret() =>
      core.instance.api.crateApiDescriptorFfiDescriptorToStringWithSecret(
        that: this,
      );

  @override
  int get hashCode => extendedDescriptor.hashCode ^ keyMap.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FfiDescriptor &&
          runtimeType == other.runtimeType &&
          extendedDescriptor == other.extendedDescriptor &&
          keyMap == other.keyMap;
}
