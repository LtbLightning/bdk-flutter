// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/blockchain.dart';
import 'api/descriptor.dart';
import 'api/error.dart';
import 'api/key.dart';
import 'api/psbt.dart';
import 'api/types.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class coreApiImplPlatform extends BaseApiImpl<coreWire> {
  coreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddressPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddressPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DerivationPathPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPathPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_AnyBlockchainPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchainPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtendedDescriptorPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptorPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DescriptorPublicKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKeyPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DescriptorSecretKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKeyPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyMapPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMapPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MnemonicPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39MnemonicPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexWalletAnyDatabasePtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabasePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexPartiallySignedTransactionPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransactionPtr;

  @protected
  Address dco_decode_RustOpaque_bdkbitcoinAddress(dynamic raw);

  @protected
  DerivationPath dco_decode_RustOpaque_bdkbitcoinbip32DerivationPath(
      dynamic raw);

  @protected
  AnyBlockchain dco_decode_RustOpaque_bdkblockchainAnyBlockchain(dynamic raw);

  @protected
  ExtendedDescriptor dco_decode_RustOpaque_bdkdescriptorExtendedDescriptor(
      dynamic raw);

  @protected
  DescriptorPublicKey dco_decode_RustOpaque_bdkkeysDescriptorPublicKey(
      dynamic raw);

  @protected
  DescriptorSecretKey dco_decode_RustOpaque_bdkkeysDescriptorSecretKey(
      dynamic raw);

  @protected
  KeyMap dco_decode_RustOpaque_bdkkeysKeyMap(dynamic raw);

  @protected
  Mnemonic dco_decode_RustOpaque_bdkkeysbip39Mnemonic(dynamic raw);

  @protected
  MutexWalletAnyDatabase
      dco_decode_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
          dynamic raw);

  @protected
  MutexPartiallySignedTransaction
      dco_decode_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressError dco_decode_address_error(dynamic raw);

  @protected
  AddressIndex dco_decode_address_index(dynamic raw);

  @protected
  Auth dco_decode_auth(dynamic raw);

  @protected
  Balance dco_decode_balance(dynamic raw);

  @protected
  BdkAddress dco_decode_bdk_address(dynamic raw);

  @protected
  BdkBlockchain dco_decode_bdk_blockchain(dynamic raw);

  @protected
  BdkDerivationPath dco_decode_bdk_derivation_path(dynamic raw);

  @protected
  BdkDescriptor dco_decode_bdk_descriptor(dynamic raw);

  @protected
  BdkDescriptorPublicKey dco_decode_bdk_descriptor_public_key(dynamic raw);

  @protected
  BdkDescriptorSecretKey dco_decode_bdk_descriptor_secret_key(dynamic raw);

  @protected
  BdkError dco_decode_bdk_error(dynamic raw);

  @protected
  BdkMnemonic dco_decode_bdk_mnemonic(dynamic raw);

  @protected
  BdkPsbt dco_decode_bdk_psbt(dynamic raw);

  @protected
  BdkScriptBuf dco_decode_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction dco_decode_bdk_transaction(dynamic raw);

  @protected
  BdkWallet dco_decode_bdk_wallet(dynamic raw);

  @protected
  BlockTime dco_decode_block_time(dynamic raw);

  @protected
  BlockchainConfig dco_decode_blockchain_config(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AddressError dco_decode_box_autoadd_address_error(dynamic raw);

  @protected
  AddressIndex dco_decode_box_autoadd_address_index(dynamic raw);

  @protected
  BdkAddress dco_decode_box_autoadd_bdk_address(dynamic raw);

  @protected
  BdkBlockchain dco_decode_box_autoadd_bdk_blockchain(dynamic raw);

  @protected
  BdkDerivationPath dco_decode_box_autoadd_bdk_derivation_path(dynamic raw);

  @protected
  BdkDescriptor dco_decode_box_autoadd_bdk_descriptor(dynamic raw);

  @protected
  BdkDescriptorPublicKey dco_decode_box_autoadd_bdk_descriptor_public_key(
      dynamic raw);

  @protected
  BdkDescriptorSecretKey dco_decode_box_autoadd_bdk_descriptor_secret_key(
      dynamic raw);

  @protected
  BdkMnemonic dco_decode_box_autoadd_bdk_mnemonic(dynamic raw);

  @protected
  BdkPsbt dco_decode_box_autoadd_bdk_psbt(dynamic raw);

  @protected
  BdkScriptBuf dco_decode_box_autoadd_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction dco_decode_box_autoadd_bdk_transaction(dynamic raw);

  @protected
  BdkWallet dco_decode_box_autoadd_bdk_wallet(dynamic raw);

  @protected
  BlockTime dco_decode_box_autoadd_block_time(dynamic raw);

  @protected
  BlockchainConfig dco_decode_box_autoadd_blockchain_config(dynamic raw);

  @protected
  ConsensusError dco_decode_box_autoadd_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_box_autoadd_database_config(dynamic raw);

  @protected
  DescriptorError dco_decode_box_autoadd_descriptor_error(dynamic raw);

  @protected
  ElectrumConfig dco_decode_box_autoadd_electrum_config(dynamic raw);

  @protected
  EsploraConfig dco_decode_box_autoadd_esplora_config(dynamic raw);

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw);

  @protected
  FeeRate dco_decode_box_autoadd_fee_rate(dynamic raw);

  @protected
  HexError dco_decode_box_autoadd_hex_error(dynamic raw);

  @protected
  LocalUtxo dco_decode_box_autoadd_local_utxo(dynamic raw);

  @protected
  LockTime dco_decode_box_autoadd_lock_time(dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  PsbtSigHashType dco_decode_box_autoadd_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue dco_decode_box_autoadd_rbf_value(dynamic raw);

  @protected
  (OutPoint, Input, BigInt) dco_decode_box_autoadd_record_out_point_input_usize(
      dynamic raw);

  @protected
  RpcConfig dco_decode_box_autoadd_rpc_config(dynamic raw);

  @protected
  RpcSyncParams dco_decode_box_autoadd_rpc_sync_params(dynamic raw);

  @protected
  SignOptions dco_decode_box_autoadd_sign_options(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_box_autoadd_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_box_autoadd_sqlite_db_configuration(
      dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw);

  @protected
  ChangeSpendPolicy dco_decode_change_spend_policy(dynamic raw);

  @protected
  ConsensusError dco_decode_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_database_config(dynamic raw);

  @protected
  DescriptorError dco_decode_descriptor_error(dynamic raw);

  @protected
  ElectrumConfig dco_decode_electrum_config(dynamic raw);

  @protected
  EsploraConfig dco_decode_esplora_config(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  FeeRate dco_decode_fee_rate(dynamic raw);

  @protected
  HexError dco_decode_hex_error(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Input dco_decode_input(dynamic raw);

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<LocalUtxo> dco_decode_list_local_utxo(dynamic raw);

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<ScriptAmount> dco_decode_list_script_amount(dynamic raw);

  @protected
  List<TransactionDetails> dco_decode_list_transaction_details(dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  LocalUtxo dco_decode_local_utxo(dynamic raw);

  @protected
  LockTime dco_decode_lock_time(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  BdkAddress? dco_decode_opt_box_autoadd_bdk_address(dynamic raw);

  @protected
  BdkDescriptor? dco_decode_opt_box_autoadd_bdk_descriptor(dynamic raw);

  @protected
  BdkScriptBuf? dco_decode_opt_box_autoadd_bdk_script_buf(dynamic raw);

  @protected
  BdkTransaction? dco_decode_opt_box_autoadd_bdk_transaction(dynamic raw);

  @protected
  BlockTime? dco_decode_opt_box_autoadd_block_time(dynamic raw);

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw);

  @protected
  FeeRate? dco_decode_opt_box_autoadd_fee_rate(dynamic raw);

  @protected
  PsbtSigHashType? dco_decode_opt_box_autoadd_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue? dco_decode_opt_box_autoadd_rbf_value(dynamic raw);

  @protected
  (OutPoint, Input, BigInt)?
      dco_decode_opt_box_autoadd_record_out_point_input_usize(dynamic raw);

  @protected
  RpcSyncParams? dco_decode_opt_box_autoadd_rpc_sync_params(dynamic raw);

  @protected
  SignOptions? dco_decode_opt_box_autoadd_sign_options(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  Payload dco_decode_payload(dynamic raw);

  @protected
  PsbtSigHashType dco_decode_psbt_sig_hash_type(dynamic raw);

  @protected
  RbfValue dco_decode_rbf_value(dynamic raw);

  @protected
  (BdkAddress, int) dco_decode_record_bdk_address_u_32(dynamic raw);

  @protected
  (BdkPsbt, TransactionDetails) dco_decode_record_bdk_psbt_transaction_details(
      dynamic raw);

  @protected
  (OutPoint, Input, BigInt) dco_decode_record_out_point_input_usize(
      dynamic raw);

  @protected
  RpcConfig dco_decode_rpc_config(dynamic raw);

  @protected
  RpcSyncParams dco_decode_rpc_sync_params(dynamic raw);

  @protected
  ScriptAmount dco_decode_script_amount(dynamic raw);

  @protected
  SignOptions dco_decode_sign_options(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_sqlite_db_configuration(dynamic raw);

  @protected
  TransactionDetails dco_decode_transaction_details(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  Variant dco_decode_variant(dynamic raw);

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw);

  @protected
  WordCount dco_decode_word_count(dynamic raw);

  @protected
  Address sse_decode_RustOpaque_bdkbitcoinAddress(SseDeserializer deserializer);

  @protected
  DerivationPath sse_decode_RustOpaque_bdkbitcoinbip32DerivationPath(
      SseDeserializer deserializer);

  @protected
  AnyBlockchain sse_decode_RustOpaque_bdkblockchainAnyBlockchain(
      SseDeserializer deserializer);

  @protected
  ExtendedDescriptor sse_decode_RustOpaque_bdkdescriptorExtendedDescriptor(
      SseDeserializer deserializer);

  @protected
  DescriptorPublicKey sse_decode_RustOpaque_bdkkeysDescriptorPublicKey(
      SseDeserializer deserializer);

  @protected
  DescriptorSecretKey sse_decode_RustOpaque_bdkkeysDescriptorSecretKey(
      SseDeserializer deserializer);

  @protected
  KeyMap sse_decode_RustOpaque_bdkkeysKeyMap(SseDeserializer deserializer);

  @protected
  Mnemonic sse_decode_RustOpaque_bdkkeysbip39Mnemonic(
      SseDeserializer deserializer);

  @protected
  MutexWalletAnyDatabase
      sse_decode_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
          SseDeserializer deserializer);

  @protected
  MutexPartiallySignedTransaction
      sse_decode_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_address_error(SseDeserializer deserializer);

  @protected
  AddressIndex sse_decode_address_index(SseDeserializer deserializer);

  @protected
  Auth sse_decode_auth(SseDeserializer deserializer);

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer);

  @protected
  BdkAddress sse_decode_bdk_address(SseDeserializer deserializer);

  @protected
  BdkBlockchain sse_decode_bdk_blockchain(SseDeserializer deserializer);

  @protected
  BdkDerivationPath sse_decode_bdk_derivation_path(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor sse_decode_bdk_descriptor(SseDeserializer deserializer);

  @protected
  BdkDescriptorPublicKey sse_decode_bdk_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorSecretKey sse_decode_bdk_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer);

  @protected
  BdkMnemonic sse_decode_bdk_mnemonic(SseDeserializer deserializer);

  @protected
  BdkPsbt sse_decode_bdk_psbt(SseDeserializer deserializer);

  @protected
  BdkScriptBuf sse_decode_bdk_script_buf(SseDeserializer deserializer);

  @protected
  BdkTransaction sse_decode_bdk_transaction(SseDeserializer deserializer);

  @protected
  BdkWallet sse_decode_bdk_wallet(SseDeserializer deserializer);

  @protected
  BlockTime sse_decode_block_time(SseDeserializer deserializer);

  @protected
  BlockchainConfig sse_decode_blockchain_config(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_box_autoadd_address_error(
      SseDeserializer deserializer);

  @protected
  AddressIndex sse_decode_box_autoadd_address_index(
      SseDeserializer deserializer);

  @protected
  BdkAddress sse_decode_box_autoadd_bdk_address(SseDeserializer deserializer);

  @protected
  BdkBlockchain sse_decode_box_autoadd_bdk_blockchain(
      SseDeserializer deserializer);

  @protected
  BdkDerivationPath sse_decode_box_autoadd_bdk_derivation_path(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor sse_decode_box_autoadd_bdk_descriptor(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorPublicKey sse_decode_box_autoadd_bdk_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  BdkDescriptorSecretKey sse_decode_box_autoadd_bdk_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  BdkMnemonic sse_decode_box_autoadd_bdk_mnemonic(SseDeserializer deserializer);

  @protected
  BdkPsbt sse_decode_box_autoadd_bdk_psbt(SseDeserializer deserializer);

  @protected
  BdkScriptBuf sse_decode_box_autoadd_bdk_script_buf(
      SseDeserializer deserializer);

  @protected
  BdkTransaction sse_decode_box_autoadd_bdk_transaction(
      SseDeserializer deserializer);

  @protected
  BdkWallet sse_decode_box_autoadd_bdk_wallet(SseDeserializer deserializer);

  @protected
  BlockTime sse_decode_box_autoadd_block_time(SseDeserializer deserializer);

  @protected
  BlockchainConfig sse_decode_box_autoadd_blockchain_config(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_box_autoadd_consensus_error(
      SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_box_autoadd_database_config(
      SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_box_autoadd_descriptor_error(
      SseDeserializer deserializer);

  @protected
  ElectrumConfig sse_decode_box_autoadd_electrum_config(
      SseDeserializer deserializer);

  @protected
  EsploraConfig sse_decode_box_autoadd_esplora_config(
      SseDeserializer deserializer);

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  HexError sse_decode_box_autoadd_hex_error(SseDeserializer deserializer);

  @protected
  LocalUtxo sse_decode_box_autoadd_local_utxo(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_box_autoadd_lock_time(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  PsbtSigHashType sse_decode_box_autoadd_psbt_sig_hash_type(
      SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  (OutPoint, Input, BigInt) sse_decode_box_autoadd_record_out_point_input_usize(
      SseDeserializer deserializer);

  @protected
  RpcConfig sse_decode_box_autoadd_rpc_config(SseDeserializer deserializer);

  @protected
  RpcSyncParams sse_decode_box_autoadd_rpc_sync_params(
      SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_box_autoadd_sign_options(SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_box_autoadd_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_box_autoadd_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  ChangeSpendPolicy sse_decode_change_spend_policy(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_consensus_error(SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_database_config(SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_descriptor_error(SseDeserializer deserializer);

  @protected
  ElectrumConfig sse_decode_electrum_config(SseDeserializer deserializer);

  @protected
  EsploraConfig sse_decode_esplora_config(SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_fee_rate(SseDeserializer deserializer);

  @protected
  HexError sse_decode_hex_error(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Input sse_decode_input(SseDeserializer deserializer);

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<LocalUtxo> sse_decode_list_local_utxo(SseDeserializer deserializer);

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<ScriptAmount> sse_decode_list_script_amount(
      SseDeserializer deserializer);

  @protected
  List<TransactionDetails> sse_decode_list_transaction_details(
      SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  LocalUtxo sse_decode_local_utxo(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_lock_time(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  BdkAddress? sse_decode_opt_box_autoadd_bdk_address(
      SseDeserializer deserializer);

  @protected
  BdkDescriptor? sse_decode_opt_box_autoadd_bdk_descriptor(
      SseDeserializer deserializer);

  @protected
  BdkScriptBuf? sse_decode_opt_box_autoadd_bdk_script_buf(
      SseDeserializer deserializer);

  @protected
  BdkTransaction? sse_decode_opt_box_autoadd_bdk_transaction(
      SseDeserializer deserializer);

  @protected
  BlockTime? sse_decode_opt_box_autoadd_block_time(
      SseDeserializer deserializer);

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer);

  @protected
  FeeRate? sse_decode_opt_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  PsbtSigHashType? sse_decode_opt_box_autoadd_psbt_sig_hash_type(
      SseDeserializer deserializer);

  @protected
  RbfValue? sse_decode_opt_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  (OutPoint, Input, BigInt)?
      sse_decode_opt_box_autoadd_record_out_point_input_usize(
          SseDeserializer deserializer);

  @protected
  RpcSyncParams? sse_decode_opt_box_autoadd_rpc_sync_params(
      SseDeserializer deserializer);

  @protected
  SignOptions? sse_decode_opt_box_autoadd_sign_options(
      SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer);

  @protected
  PsbtSigHashType sse_decode_psbt_sig_hash_type(SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_rbf_value(SseDeserializer deserializer);

  @protected
  (BdkAddress, int) sse_decode_record_bdk_address_u_32(
      SseDeserializer deserializer);

  @protected
  (BdkPsbt, TransactionDetails) sse_decode_record_bdk_psbt_transaction_details(
      SseDeserializer deserializer);

  @protected
  (OutPoint, Input, BigInt) sse_decode_record_out_point_input_usize(
      SseDeserializer deserializer);

  @protected
  RpcConfig sse_decode_rpc_config(SseDeserializer deserializer);

  @protected
  RpcSyncParams sse_decode_rpc_sync_params(SseDeserializer deserializer);

  @protected
  ScriptAmount sse_decode_script_amount(SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_sign_options(SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  TransactionDetails sse_decode_transaction_details(
      SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer);

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer);

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_address_error> cst_encode_box_autoadd_address_error(
      AddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address_error();
    cst_api_fill_to_wire_address_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_address_index> cst_encode_box_autoadd_address_index(
      AddressIndex raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address_index();
    cst_api_fill_to_wire_address_index(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_address> cst_encode_box_autoadd_bdk_address(
      BdkAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_address();
    cst_api_fill_to_wire_bdk_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_blockchain> cst_encode_box_autoadd_bdk_blockchain(
      BdkBlockchain raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_blockchain();
    cst_api_fill_to_wire_bdk_blockchain(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_derivation_path>
      cst_encode_box_autoadd_bdk_derivation_path(BdkDerivationPath raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_derivation_path();
    cst_api_fill_to_wire_bdk_derivation_path(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_descriptor> cst_encode_box_autoadd_bdk_descriptor(
      BdkDescriptor raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_descriptor();
    cst_api_fill_to_wire_bdk_descriptor(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_descriptor_public_key>
      cst_encode_box_autoadd_bdk_descriptor_public_key(
          BdkDescriptorPublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_descriptor_public_key();
    cst_api_fill_to_wire_bdk_descriptor_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>
      cst_encode_box_autoadd_bdk_descriptor_secret_key(
          BdkDescriptorSecretKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_descriptor_secret_key();
    cst_api_fill_to_wire_bdk_descriptor_secret_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_mnemonic> cst_encode_box_autoadd_bdk_mnemonic(
      BdkMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_mnemonic();
    cst_api_fill_to_wire_bdk_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_psbt> cst_encode_box_autoadd_bdk_psbt(BdkPsbt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_psbt();
    cst_api_fill_to_wire_bdk_psbt(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_script_buf> cst_encode_box_autoadd_bdk_script_buf(
      BdkScriptBuf raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_script_buf();
    cst_api_fill_to_wire_bdk_script_buf(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_transaction> cst_encode_box_autoadd_bdk_transaction(
      BdkTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_transaction();
    cst_api_fill_to_wire_bdk_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bdk_wallet> cst_encode_box_autoadd_bdk_wallet(
      BdkWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bdk_wallet();
    cst_api_fill_to_wire_bdk_wallet(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_block_time> cst_encode_box_autoadd_block_time(
      BlockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_block_time();
    cst_api_fill_to_wire_block_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_blockchain_config>
      cst_encode_box_autoadd_blockchain_config(BlockchainConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_blockchain_config();
    cst_api_fill_to_wire_blockchain_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_consensus_error> cst_encode_box_autoadd_consensus_error(
      ConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_consensus_error();
    cst_api_fill_to_wire_consensus_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_database_config> cst_encode_box_autoadd_database_config(
      DatabaseConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_database_config();
    cst_api_fill_to_wire_database_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_error>
      cst_encode_box_autoadd_descriptor_error(DescriptorError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_descriptor_error();
    cst_api_fill_to_wire_descriptor_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_electrum_config> cst_encode_box_autoadd_electrum_config(
      ElectrumConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_electrum_config();
    cst_api_fill_to_wire_electrum_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_esplora_config> cst_encode_box_autoadd_esplora_config(
      EsploraConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_esplora_config();
    cst_api_fill_to_wire_esplora_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_box_autoadd_f_32(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_f_32(cst_encode_f_32(raw));
  }

  @protected
  ffi.Pointer<wire_cst_fee_rate> cst_encode_box_autoadd_fee_rate(FeeRate raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_fee_rate();
    cst_api_fill_to_wire_fee_rate(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_hex_error> cst_encode_box_autoadd_hex_error(
      HexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_hex_error();
    cst_api_fill_to_wire_hex_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_local_utxo> cst_encode_box_autoadd_local_utxo(
      LocalUtxo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_local_utxo();
    cst_api_fill_to_wire_local_utxo(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lock_time> cst_encode_box_autoadd_lock_time(
      LockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lock_time();
    cst_api_fill_to_wire_lock_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_box_autoadd_out_point(
      OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_out_point();
    cst_api_fill_to_wire_out_point(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_psbt_sig_hash_type>
      cst_encode_box_autoadd_psbt_sig_hash_type(PsbtSigHashType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_psbt_sig_hash_type();
    cst_api_fill_to_wire_psbt_sig_hash_type(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_rbf_value> cst_encode_box_autoadd_rbf_value(
      RbfValue raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_rbf_value();
    cst_api_fill_to_wire_rbf_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_record_out_point_input_usize>
      cst_encode_box_autoadd_record_out_point_input_usize(
          (OutPoint, Input, BigInt) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_record_out_point_input_usize();
    cst_api_fill_to_wire_record_out_point_input_usize(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_rpc_config> cst_encode_box_autoadd_rpc_config(
      RpcConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_rpc_config();
    cst_api_fill_to_wire_rpc_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_rpc_sync_params> cst_encode_box_autoadd_rpc_sync_params(
      RpcSyncParams raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_rpc_sync_params();
    cst_api_fill_to_wire_rpc_sync_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sign_options> cst_encode_box_autoadd_sign_options(
      SignOptions raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sign_options();
    cst_api_fill_to_wire_sign_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sled_db_configuration>
      cst_encode_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sled_db_configuration();
    cst_api_fill_to_wire_sled_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sqlite_db_configuration>
      cst_encode_box_autoadd_sqlite_db_configuration(
          SqliteDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sqlite_db_configuration();
    cst_api_fill_to_wire_sqlite_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_box_autoadd_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_8(cst_encode_u_8(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_list_prim_u_8_strict(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_list_prim_u_8_strict(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_local_utxo> cst_encode_list_local_utxo(
      List<LocalUtxo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_local_utxo(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_local_utxo(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_out_point> cst_encode_list_out_point(
      List<OutPoint> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_out_point(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_out_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_script_amount> cst_encode_list_script_amount(
      List<ScriptAmount> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_script_amount(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_script_amount(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_transaction_details>
      cst_encode_list_transaction_details(List<TransactionDetails> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_transaction_details(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_transaction_details(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_in> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_in(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_in(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_out> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_out(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_out(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_bdk_address> cst_encode_opt_box_autoadd_bdk_address(
      BdkAddress? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bdk_address(raw);
  }

  @protected
  ffi.Pointer<wire_cst_bdk_descriptor>
      cst_encode_opt_box_autoadd_bdk_descriptor(BdkDescriptor? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_bdk_descriptor(raw);
  }

  @protected
  ffi.Pointer<wire_cst_bdk_script_buf>
      cst_encode_opt_box_autoadd_bdk_script_buf(BdkScriptBuf? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_bdk_script_buf(raw);
  }

  @protected
  ffi.Pointer<wire_cst_bdk_transaction>
      cst_encode_opt_box_autoadd_bdk_transaction(BdkTransaction? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_bdk_transaction(raw);
  }

  @protected
  ffi.Pointer<wire_cst_block_time> cst_encode_opt_box_autoadd_block_time(
      BlockTime? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_block_time(raw);
  }

  @protected
  ffi.Pointer<ffi.Float> cst_encode_opt_box_autoadd_f_32(double? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_f_32(raw);
  }

  @protected
  ffi.Pointer<wire_cst_fee_rate> cst_encode_opt_box_autoadd_fee_rate(
      FeeRate? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_fee_rate(raw);
  }

  @protected
  ffi.Pointer<wire_cst_psbt_sig_hash_type>
      cst_encode_opt_box_autoadd_psbt_sig_hash_type(PsbtSigHashType? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_psbt_sig_hash_type(raw);
  }

  @protected
  ffi.Pointer<wire_cst_rbf_value> cst_encode_opt_box_autoadd_rbf_value(
      RbfValue? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_rbf_value(raw);
  }

  @protected
  ffi.Pointer<wire_cst_record_out_point_input_usize>
      cst_encode_opt_box_autoadd_record_out_point_input_usize(
          (OutPoint, Input, BigInt)? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_record_out_point_input_usize(raw);
  }

  @protected
  ffi.Pointer<wire_cst_rpc_sync_params>
      cst_encode_opt_box_autoadd_rpc_sync_params(RpcSyncParams? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_rpc_sync_params(raw);
  }

  @protected
  ffi.Pointer<wire_cst_sign_options> cst_encode_opt_box_autoadd_sign_options(
      SignOptions? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_sign_options(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint8> cst_encode_opt_box_autoadd_u_8(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_8(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_4(
      U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  int cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_address_error(
      AddressError apiObj, wire_cst_address_error wireObj) {
    if (apiObj is AddressError_Base58) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Base58.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_Bech32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Bech32.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_EmptyBech32Payload) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is AddressError_InvalidBech32Variant) {
      var pre_expected = cst_encode_variant(apiObj.expected);
      var pre_found = cst_encode_variant(apiObj.found);
      wireObj.tag = 3;
      wireObj.kind.InvalidBech32Variant.expected = pre_expected;
      wireObj.kind.InvalidBech32Variant.found = pre_found;
      return;
    }
    if (apiObj is AddressError_InvalidWitnessVersion) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_UnparsableWitnessVersion) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnparsableWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_MalformedWitnessVersion) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is AddressError_InvalidWitnessProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.InvalidWitnessProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_InvalidSegwitV0ProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.InvalidSegwitV0ProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_UncompressedPubkey) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is AddressError_ExcessiveScriptSize) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is AddressError_UnrecognizedScript) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is AddressError_UnknownAddressType) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind.UnknownAddressType.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_NetworkValidation) {
      var pre_network_required = cst_encode_network(apiObj.networkRequired);
      var pre_network_found = cst_encode_network(apiObj.networkFound);
      var pre_address = cst_encode_String(apiObj.address);
      wireObj.tag = 13;
      wireObj.kind.NetworkValidation.network_required = pre_network_required;
      wireObj.kind.NetworkValidation.network_found = pre_network_found;
      wireObj.kind.NetworkValidation.address = pre_address;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_address_index(
      AddressIndex apiObj, wire_cst_address_index wireObj) {
    if (apiObj is AddressIndex_Increase) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is AddressIndex_LastUnused) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is AddressIndex_Peek) {
      var pre_index = cst_encode_u_32(apiObj.index);
      wireObj.tag = 2;
      wireObj.kind.Peek.index = pre_index;
      return;
    }
    if (apiObj is AddressIndex_Reset) {
      var pre_index = cst_encode_u_32(apiObj.index);
      wireObj.tag = 3;
      wireObj.kind.Reset.index = pre_index;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_auth(Auth apiObj, wire_cst_auth wireObj) {
    if (apiObj is Auth_None) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Auth_UserPass) {
      var pre_username = cst_encode_String(apiObj.username);
      var pre_password = cst_encode_String(apiObj.password);
      wireObj.tag = 1;
      wireObj.kind.UserPass.username = pre_username;
      wireObj.kind.UserPass.password = pre_password;
      return;
    }
    if (apiObj is Auth_Cookie) {
      var pre_file = cst_encode_String(apiObj.file);
      wireObj.tag = 2;
      wireObj.kind.Cookie.file = pre_file;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_balance(Balance apiObj, wire_cst_balance wireObj) {
    wireObj.immature = cst_encode_u_64(apiObj.immature);
    wireObj.trusted_pending = cst_encode_u_64(apiObj.trustedPending);
    wireObj.untrusted_pending = cst_encode_u_64(apiObj.untrustedPending);
    wireObj.confirmed = cst_encode_u_64(apiObj.confirmed);
    wireObj.spendable = cst_encode_u_64(apiObj.spendable);
    wireObj.total = cst_encode_u_64(apiObj.total);
  }

  @protected
  void cst_api_fill_to_wire_bdk_address(
      BdkAddress apiObj, wire_cst_bdk_address wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_bdkbitcoinAddress(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_blockchain(
      BdkBlockchain apiObj, wire_cst_bdk_blockchain wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_bdkblockchainAnyBlockchain(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_derivation_path(
      BdkDerivationPath apiObj, wire_cst_bdk_derivation_path wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_bdkbitcoinbip32DerivationPath(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_descriptor(
      BdkDescriptor apiObj, wire_cst_bdk_descriptor wireObj) {
    wireObj.extended_descriptor =
        cst_encode_RustOpaque_bdkdescriptorExtendedDescriptor(
            apiObj.extendedDescriptor);
    wireObj.key_map = cst_encode_RustOpaque_bdkkeysKeyMap(apiObj.keyMap);
  }

  @protected
  void cst_api_fill_to_wire_bdk_descriptor_public_key(
      BdkDescriptorPublicKey apiObj,
      wire_cst_bdk_descriptor_public_key wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_bdkkeysDescriptorPublicKey(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey apiObj,
      wire_cst_bdk_descriptor_secret_key wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_bdkkeysDescriptorSecretKey(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_error(
      BdkError apiObj, wire_cst_bdk_error wireObj) {
    if (apiObj is BdkError_Hex) {
      var pre_field0 = cst_encode_box_autoadd_hex_error(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Hex.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Consensus) {
      var pre_field0 = cst_encode_box_autoadd_consensus_error(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Consensus.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_VerifyTransaction) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.VerifyTransaction.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Address) {
      var pre_field0 = cst_encode_box_autoadd_address_error(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind.Address.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Descriptor) {
      var pre_field0 = cst_encode_box_autoadd_descriptor_error(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.Descriptor.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidU32Bytes) {
      var pre_field0 = cst_encode_list_prim_u_8_strict(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.InvalidU32Bytes.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Generic) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.Generic.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_ScriptDoesntHaveAddressForm) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is BdkError_NoRecipients) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is BdkError_NoUtxosSelected) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is BdkError_OutputBelowDustLimit) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind.OutputBelowDustLimit.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InsufficientFunds) {
      var pre_needed = cst_encode_u_64(apiObj.needed);
      var pre_available = cst_encode_u_64(apiObj.available);
      wireObj.tag = 11;
      wireObj.kind.InsufficientFunds.needed = pre_needed;
      wireObj.kind.InsufficientFunds.available = pre_available;
      return;
    }
    if (apiObj is BdkError_BnBTotalTriesExceeded) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is BdkError_BnBNoExactMatch) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is BdkError_UnknownUtxo) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is BdkError_TransactionNotFound) {
      wireObj.tag = 15;
      return;
    }
    if (apiObj is BdkError_TransactionConfirmed) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is BdkError_IrreplaceableTransaction) {
      wireObj.tag = 17;
      return;
    }
    if (apiObj is BdkError_FeeRateTooLow) {
      var pre_needed = cst_encode_f_32(apiObj.needed);
      wireObj.tag = 18;
      wireObj.kind.FeeRateTooLow.needed = pre_needed;
      return;
    }
    if (apiObj is BdkError_FeeTooLow) {
      var pre_needed = cst_encode_u_64(apiObj.needed);
      wireObj.tag = 19;
      wireObj.kind.FeeTooLow.needed = pre_needed;
      return;
    }
    if (apiObj is BdkError_FeeRateUnavailable) {
      wireObj.tag = 20;
      return;
    }
    if (apiObj is BdkError_MissingKeyOrigin) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 21;
      wireObj.kind.MissingKeyOrigin.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Key) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 22;
      wireObj.kind.Key.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_ChecksumMismatch) {
      wireObj.tag = 23;
      return;
    }
    if (apiObj is BdkError_SpendingPolicyRequired) {
      var pre_field0 = cst_encode_keychain_kind(apiObj.field0);
      wireObj.tag = 24;
      wireObj.kind.SpendingPolicyRequired.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidPolicyPathError) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 25;
      wireObj.kind.InvalidPolicyPathError.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Signer) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 26;
      wireObj.kind.Signer.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidNetwork) {
      var pre_requested = cst_encode_network(apiObj.requested);
      var pre_found = cst_encode_network(apiObj.found);
      wireObj.tag = 27;
      wireObj.kind.InvalidNetwork.requested = pre_requested;
      wireObj.kind.InvalidNetwork.found = pre_found;
      return;
    }
    if (apiObj is BdkError_InvalidOutpoint) {
      var pre_field0 = cst_encode_box_autoadd_out_point(apiObj.field0);
      wireObj.tag = 28;
      wireObj.kind.InvalidOutpoint.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Encode) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 29;
      wireObj.kind.Encode.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Miniscript) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 30;
      wireObj.kind.Miniscript.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_MiniscriptPsbt) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 31;
      wireObj.kind.MiniscriptPsbt.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Bip32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 32;
      wireObj.kind.Bip32.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Bip39) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 33;
      wireObj.kind.Bip39.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Secp256k1) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 34;
      wireObj.kind.Secp256k1.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Json) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 35;
      wireObj.kind.Json.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Psbt) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 36;
      wireObj.kind.Psbt.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_PsbtParse) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 37;
      wireObj.kind.PsbtParse.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_MissingCachedScripts) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 38;
      wireObj.kind.MissingCachedScripts.field0 = pre_field0;
      wireObj.kind.MissingCachedScripts.field1 = pre_field1;
      return;
    }
    if (apiObj is BdkError_Electrum) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 39;
      wireObj.kind.Electrum.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Esplora) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 40;
      wireObj.kind.Esplora.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Sled) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 41;
      wireObj.kind.Sled.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Rpc) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 42;
      wireObj.kind.Rpc.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Rusqlite) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 43;
      wireObj.kind.Rusqlite.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidInput) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 44;
      wireObj.kind.InvalidInput.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidLockTime) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 45;
      wireObj.kind.InvalidLockTime.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidTransaction) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 46;
      wireObj.kind.InvalidTransaction.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bdk_mnemonic(
      BdkMnemonic apiObj, wire_cst_bdk_mnemonic wireObj) {
    wireObj.ptr = cst_encode_RustOpaque_bdkkeysbip39Mnemonic(apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_psbt(
      BdkPsbt apiObj, wire_cst_bdk_psbt wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_bdk_script_buf(
      BdkScriptBuf apiObj, wire_cst_bdk_script_buf wireObj) {
    wireObj.bytes = cst_encode_list_prim_u_8_strict(apiObj.bytes);
  }

  @protected
  void cst_api_fill_to_wire_bdk_transaction(
      BdkTransaction apiObj, wire_cst_bdk_transaction wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_bdk_wallet(
      BdkWallet apiObj, wire_cst_bdk_wallet wireObj) {
    wireObj.ptr =
        cst_encode_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_block_time(
      BlockTime apiObj, wire_cst_block_time wireObj) {
    wireObj.height = cst_encode_u_32(apiObj.height);
    wireObj.timestamp = cst_encode_u_64(apiObj.timestamp);
  }

  @protected
  void cst_api_fill_to_wire_blockchain_config(
      BlockchainConfig apiObj, wire_cst_blockchain_config wireObj) {
    if (apiObj is BlockchainConfig_Electrum) {
      var pre_config = cst_encode_box_autoadd_electrum_config(apiObj.config);
      wireObj.tag = 0;
      wireObj.kind.Electrum.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Esplora) {
      var pre_config = cst_encode_box_autoadd_esplora_config(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind.Esplora.config = pre_config;
      return;
    }
    if (apiObj is BlockchainConfig_Rpc) {
      var pre_config = cst_encode_box_autoadd_rpc_config(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind.Rpc.config = pre_config;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address_error(
      AddressError apiObj, ffi.Pointer<wire_cst_address_error> wireObj) {
    cst_api_fill_to_wire_address_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address_index(
      AddressIndex apiObj, ffi.Pointer<wire_cst_address_index> wireObj) {
    cst_api_fill_to_wire_address_index(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_address(
      BdkAddress apiObj, ffi.Pointer<wire_cst_bdk_address> wireObj) {
    cst_api_fill_to_wire_bdk_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_blockchain(
      BdkBlockchain apiObj, ffi.Pointer<wire_cst_bdk_blockchain> wireObj) {
    cst_api_fill_to_wire_bdk_blockchain(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_derivation_path(
      BdkDerivationPath apiObj,
      ffi.Pointer<wire_cst_bdk_derivation_path> wireObj) {
    cst_api_fill_to_wire_bdk_derivation_path(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_descriptor(
      BdkDescriptor apiObj, ffi.Pointer<wire_cst_bdk_descriptor> wireObj) {
    cst_api_fill_to_wire_bdk_descriptor(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_descriptor_public_key(
      BdkDescriptorPublicKey apiObj,
      ffi.Pointer<wire_cst_bdk_descriptor_public_key> wireObj) {
    cst_api_fill_to_wire_bdk_descriptor_public_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey apiObj,
      ffi.Pointer<wire_cst_bdk_descriptor_secret_key> wireObj) {
    cst_api_fill_to_wire_bdk_descriptor_secret_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_mnemonic(
      BdkMnemonic apiObj, ffi.Pointer<wire_cst_bdk_mnemonic> wireObj) {
    cst_api_fill_to_wire_bdk_mnemonic(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_psbt(
      BdkPsbt apiObj, ffi.Pointer<wire_cst_bdk_psbt> wireObj) {
    cst_api_fill_to_wire_bdk_psbt(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_script_buf(
      BdkScriptBuf apiObj, ffi.Pointer<wire_cst_bdk_script_buf> wireObj) {
    cst_api_fill_to_wire_bdk_script_buf(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_transaction(
      BdkTransaction apiObj, ffi.Pointer<wire_cst_bdk_transaction> wireObj) {
    cst_api_fill_to_wire_bdk_transaction(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bdk_wallet(
      BdkWallet apiObj, ffi.Pointer<wire_cst_bdk_wallet> wireObj) {
    cst_api_fill_to_wire_bdk_wallet(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_block_time(
      BlockTime apiObj, ffi.Pointer<wire_cst_block_time> wireObj) {
    cst_api_fill_to_wire_block_time(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_blockchain_config(
      BlockchainConfig apiObj,
      ffi.Pointer<wire_cst_blockchain_config> wireObj) {
    cst_api_fill_to_wire_blockchain_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_consensus_error(
      ConsensusError apiObj, ffi.Pointer<wire_cst_consensus_error> wireObj) {
    cst_api_fill_to_wire_consensus_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_database_config(
      DatabaseConfig apiObj, ffi.Pointer<wire_cst_database_config> wireObj) {
    cst_api_fill_to_wire_database_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_descriptor_error(
      DescriptorError apiObj, ffi.Pointer<wire_cst_descriptor_error> wireObj) {
    cst_api_fill_to_wire_descriptor_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_electrum_config(
      ElectrumConfig apiObj, ffi.Pointer<wire_cst_electrum_config> wireObj) {
    cst_api_fill_to_wire_electrum_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_esplora_config(
      EsploraConfig apiObj, ffi.Pointer<wire_cst_esplora_config> wireObj) {
    cst_api_fill_to_wire_esplora_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_fee_rate(
      FeeRate apiObj, ffi.Pointer<wire_cst_fee_rate> wireObj) {
    cst_api_fill_to_wire_fee_rate(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_hex_error(
      HexError apiObj, ffi.Pointer<wire_cst_hex_error> wireObj) {
    cst_api_fill_to_wire_hex_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_local_utxo(
      LocalUtxo apiObj, ffi.Pointer<wire_cst_local_utxo> wireObj) {
    cst_api_fill_to_wire_local_utxo(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lock_time(
      LockTime apiObj, ffi.Pointer<wire_cst_lock_time> wireObj) {
    cst_api_fill_to_wire_lock_time(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_out_point(
      OutPoint apiObj, ffi.Pointer<wire_cst_out_point> wireObj) {
    cst_api_fill_to_wire_out_point(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType apiObj,
      ffi.Pointer<wire_cst_psbt_sig_hash_type> wireObj) {
    cst_api_fill_to_wire_psbt_sig_hash_type(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_rbf_value(
      RbfValue apiObj, ffi.Pointer<wire_cst_rbf_value> wireObj) {
    cst_api_fill_to_wire_rbf_value(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, BigInt) apiObj,
      ffi.Pointer<wire_cst_record_out_point_input_usize> wireObj) {
    cst_api_fill_to_wire_record_out_point_input_usize(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_rpc_config(
      RpcConfig apiObj, ffi.Pointer<wire_cst_rpc_config> wireObj) {
    cst_api_fill_to_wire_rpc_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_rpc_sync_params(
      RpcSyncParams apiObj, ffi.Pointer<wire_cst_rpc_sync_params> wireObj) {
    cst_api_fill_to_wire_rpc_sync_params(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sign_options(
      SignOptions apiObj, ffi.Pointer<wire_cst_sign_options> wireObj) {
    cst_api_fill_to_wire_sign_options(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sled_db_configuration(
      SledDbConfiguration apiObj,
      ffi.Pointer<wire_cst_sled_db_configuration> wireObj) {
    cst_api_fill_to_wire_sled_db_configuration(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration apiObj,
      ffi.Pointer<wire_cst_sqlite_db_configuration> wireObj) {
    cst_api_fill_to_wire_sqlite_db_configuration(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_consensus_error(
      ConsensusError apiObj, wire_cst_consensus_error wireObj) {
    if (apiObj is ConsensusError_Io) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Io.field0 = pre_field0;
      return;
    }
    if (apiObj is ConsensusError_OversizedVectorAllocation) {
      var pre_requested = cst_encode_usize(apiObj.requested);
      var pre_max = cst_encode_usize(apiObj.max);
      wireObj.tag = 1;
      wireObj.kind.OversizedVectorAllocation.requested = pre_requested;
      wireObj.kind.OversizedVectorAllocation.max = pre_max;
      return;
    }
    if (apiObj is ConsensusError_InvalidChecksum) {
      var pre_expected = cst_encode_u_8_array_4(apiObj.expected);
      var pre_actual = cst_encode_u_8_array_4(apiObj.actual);
      wireObj.tag = 2;
      wireObj.kind.InvalidChecksum.expected = pre_expected;
      wireObj.kind.InvalidChecksum.actual = pre_actual;
      return;
    }
    if (apiObj is ConsensusError_NonMinimalVarInt) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is ConsensusError_ParseFailed) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.ParseFailed.field0 = pre_field0;
      return;
    }
    if (apiObj is ConsensusError_UnsupportedSegwitFlag) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnsupportedSegwitFlag.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_database_config(
      DatabaseConfig apiObj, wire_cst_database_config wireObj) {
    if (apiObj is DatabaseConfig_Memory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DatabaseConfig_Sqlite) {
      var pre_config =
          cst_encode_box_autoadd_sqlite_db_configuration(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind.Sqlite.config = pre_config;
      return;
    }
    if (apiObj is DatabaseConfig_Sled) {
      var pre_config =
          cst_encode_box_autoadd_sled_db_configuration(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind.Sled.config = pre_config;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_descriptor_error(
      DescriptorError apiObj, wire_cst_descriptor_error wireObj) {
    if (apiObj is DescriptorError_InvalidHdKeyPath) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorChecksum) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DescriptorError_HardenedDerivationXpub) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DescriptorError_MultiPath) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DescriptorError_Key) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.Key.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Policy) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.Policy.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorCharacter) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.InvalidDescriptorCharacter.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Bip32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.Bip32.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Base58) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.Base58.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Pk) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind.Pk.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Miniscript) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind.Miniscript.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Hex) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind.Hex.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_electrum_config(
      ElectrumConfig apiObj, wire_cst_electrum_config wireObj) {
    wireObj.url = cst_encode_String(apiObj.url);
    wireObj.socks5 = cst_encode_opt_String(apiObj.socks5);
    wireObj.retry = cst_encode_u_8(apiObj.retry);
    wireObj.timeout = cst_encode_opt_box_autoadd_u_8(apiObj.timeout);
    wireObj.stop_gap = cst_encode_u_64(apiObj.stopGap);
    wireObj.validate_domain = cst_encode_bool(apiObj.validateDomain);
  }

  @protected
  void cst_api_fill_to_wire_esplora_config(
      EsploraConfig apiObj, wire_cst_esplora_config wireObj) {
    wireObj.base_url = cst_encode_String(apiObj.baseUrl);
    wireObj.proxy = cst_encode_opt_String(apiObj.proxy);
    wireObj.concurrency = cst_encode_opt_box_autoadd_u_8(apiObj.concurrency);
    wireObj.stop_gap = cst_encode_u_64(apiObj.stopGap);
    wireObj.timeout = cst_encode_opt_box_autoadd_u_64(apiObj.timeout);
  }

  @protected
  void cst_api_fill_to_wire_fee_rate(
      FeeRate apiObj, wire_cst_fee_rate wireObj) {
    wireObj.sat_per_vb = cst_encode_f_32(apiObj.satPerVb);
  }

  @protected
  void cst_api_fill_to_wire_hex_error(
      HexError apiObj, wire_cst_hex_error wireObj) {
    if (apiObj is HexError_InvalidChar) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.InvalidChar.field0 = pre_field0;
      return;
    }
    if (apiObj is HexError_OddLengthString) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.OddLengthString.field0 = pre_field0;
      return;
    }
    if (apiObj is HexError_InvalidLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind.InvalidLength.field0 = pre_field0;
      wireObj.kind.InvalidLength.field1 = pre_field1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_input(Input apiObj, wire_cst_input wireObj) {
    wireObj.s = cst_encode_String(apiObj.s);
  }

  @protected
  void cst_api_fill_to_wire_local_utxo(
      LocalUtxo apiObj, wire_cst_local_utxo wireObj) {
    cst_api_fill_to_wire_out_point(apiObj.outpoint, wireObj.outpoint);
    cst_api_fill_to_wire_tx_out(apiObj.txout, wireObj.txout);
    wireObj.keychain = cst_encode_keychain_kind(apiObj.keychain);
    wireObj.is_spent = cst_encode_bool(apiObj.isSpent);
  }

  @protected
  void cst_api_fill_to_wire_lock_time(
      LockTime apiObj, wire_cst_lock_time wireObj) {
    if (apiObj is LockTime_Blocks) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Blocks.field0 = pre_field0;
      return;
    }
    if (apiObj is LockTime_Seconds) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Seconds.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    wireObj.txid = cst_encode_String(apiObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_payload(Payload apiObj, wire_cst_payload wireObj) {
    if (apiObj is Payload_PubkeyHash) {
      var pre_pubkey_hash = cst_encode_String(apiObj.pubkeyHash);
      wireObj.tag = 0;
      wireObj.kind.PubkeyHash.pubkey_hash = pre_pubkey_hash;
      return;
    }
    if (apiObj is Payload_ScriptHash) {
      var pre_script_hash = cst_encode_String(apiObj.scriptHash);
      wireObj.tag = 1;
      wireObj.kind.ScriptHash.script_hash = pre_script_hash;
      return;
    }
    if (apiObj is Payload_WitnessProgram) {
      var pre_version = cst_encode_witness_version(apiObj.version);
      var pre_program = cst_encode_list_prim_u_8_strict(apiObj.program);
      wireObj.tag = 2;
      wireObj.kind.WitnessProgram.version = pre_version;
      wireObj.kind.WitnessProgram.program = pre_program;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_psbt_sig_hash_type(
      PsbtSigHashType apiObj, wire_cst_psbt_sig_hash_type wireObj) {
    wireObj.inner = cst_encode_u_32(apiObj.inner);
  }

  @protected
  void cst_api_fill_to_wire_rbf_value(
      RbfValue apiObj, wire_cst_rbf_value wireObj) {
    if (apiObj is RbfValue_RbfDefault) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is RbfValue_Value) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Value.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_record_bdk_address_u_32(
      (BdkAddress, int) apiObj, wire_cst_record_bdk_address_u_32 wireObj) {
    cst_api_fill_to_wire_bdk_address(apiObj.$1, wireObj.field0);
    wireObj.field1 = cst_encode_u_32(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_record_bdk_psbt_transaction_details(
      (BdkPsbt, TransactionDetails) apiObj,
      wire_cst_record_bdk_psbt_transaction_details wireObj) {
    cst_api_fill_to_wire_bdk_psbt(apiObj.$1, wireObj.field0);
    cst_api_fill_to_wire_transaction_details(apiObj.$2, wireObj.field1);
  }

  @protected
  void cst_api_fill_to_wire_record_out_point_input_usize(
      (OutPoint, Input, BigInt) apiObj,
      wire_cst_record_out_point_input_usize wireObj) {
    cst_api_fill_to_wire_out_point(apiObj.$1, wireObj.field0);
    cst_api_fill_to_wire_input(apiObj.$2, wireObj.field1);
    wireObj.field2 = cst_encode_usize(apiObj.$3);
  }

  @protected
  void cst_api_fill_to_wire_rpc_config(
      RpcConfig apiObj, wire_cst_rpc_config wireObj) {
    wireObj.url = cst_encode_String(apiObj.url);
    cst_api_fill_to_wire_auth(apiObj.auth, wireObj.auth);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.wallet_name = cst_encode_String(apiObj.walletName);
    wireObj.sync_params =
        cst_encode_opt_box_autoadd_rpc_sync_params(apiObj.syncParams);
  }

  @protected
  void cst_api_fill_to_wire_rpc_sync_params(
      RpcSyncParams apiObj, wire_cst_rpc_sync_params wireObj) {
    wireObj.start_script_count = cst_encode_u_64(apiObj.startScriptCount);
    wireObj.start_time = cst_encode_u_64(apiObj.startTime);
    wireObj.force_start_time = cst_encode_bool(apiObj.forceStartTime);
    wireObj.poll_rate_sec = cst_encode_u_64(apiObj.pollRateSec);
  }

  @protected
  void cst_api_fill_to_wire_script_amount(
      ScriptAmount apiObj, wire_cst_script_amount wireObj) {
    cst_api_fill_to_wire_bdk_script_buf(apiObj.script, wireObj.script);
    wireObj.amount = cst_encode_u_64(apiObj.amount);
  }

  @protected
  void cst_api_fill_to_wire_sign_options(
      SignOptions apiObj, wire_cst_sign_options wireObj) {
    wireObj.trust_witness_utxo = cst_encode_bool(apiObj.trustWitnessUtxo);
    wireObj.assume_height =
        cst_encode_opt_box_autoadd_u_32(apiObj.assumeHeight);
    wireObj.allow_all_sighashes = cst_encode_bool(apiObj.allowAllSighashes);
    wireObj.remove_partial_sigs = cst_encode_bool(apiObj.removePartialSigs);
    wireObj.try_finalize = cst_encode_bool(apiObj.tryFinalize);
    wireObj.sign_with_tap_internal_key =
        cst_encode_bool(apiObj.signWithTapInternalKey);
    wireObj.allow_grinding = cst_encode_bool(apiObj.allowGrinding);
  }

  @protected
  void cst_api_fill_to_wire_sled_db_configuration(
      SledDbConfiguration apiObj, wire_cst_sled_db_configuration wireObj) {
    wireObj.path = cst_encode_String(apiObj.path);
    wireObj.tree_name = cst_encode_String(apiObj.treeName);
  }

  @protected
  void cst_api_fill_to_wire_sqlite_db_configuration(
      SqliteDbConfiguration apiObj, wire_cst_sqlite_db_configuration wireObj) {
    wireObj.path = cst_encode_String(apiObj.path);
  }

  @protected
  void cst_api_fill_to_wire_transaction_details(
      TransactionDetails apiObj, wire_cst_transaction_details wireObj) {
    wireObj.transaction =
        cst_encode_opt_box_autoadd_bdk_transaction(apiObj.transaction);
    wireObj.txid = cst_encode_String(apiObj.txid);
    wireObj.received = cst_encode_u_64(apiObj.received);
    wireObj.sent = cst_encode_u_64(apiObj.sent);
    wireObj.fee = cst_encode_opt_box_autoadd_u_64(apiObj.fee);
    wireObj.confirmation_time =
        cst_encode_opt_box_autoadd_block_time(apiObj.confirmationTime);
  }

  @protected
  void cst_api_fill_to_wire_tx_in(TxIn apiObj, wire_cst_tx_in wireObj) {
    cst_api_fill_to_wire_out_point(
        apiObj.previousOutput, wireObj.previous_output);
    cst_api_fill_to_wire_bdk_script_buf(apiObj.scriptSig, wireObj.script_sig);
    wireObj.sequence = cst_encode_u_32(apiObj.sequence);
    wireObj.witness = cst_encode_list_list_prim_u_8_strict(apiObj.witness);
  }

  @protected
  void cst_api_fill_to_wire_tx_out(TxOut apiObj, wire_cst_tx_out wireObj) {
    wireObj.value = cst_encode_u_64(apiObj.value);
    cst_api_fill_to_wire_bdk_script_buf(
        apiObj.scriptPubkey, wireObj.script_pubkey);
  }

  @protected
  int cst_encode_RustOpaque_bdkbitcoinAddress(Address raw);

  @protected
  int cst_encode_RustOpaque_bdkbitcoinbip32DerivationPath(DerivationPath raw);

  @protected
  int cst_encode_RustOpaque_bdkblockchainAnyBlockchain(AnyBlockchain raw);

  @protected
  int cst_encode_RustOpaque_bdkdescriptorExtendedDescriptor(
      ExtendedDescriptor raw);

  @protected
  int cst_encode_RustOpaque_bdkkeysDescriptorPublicKey(DescriptorPublicKey raw);

  @protected
  int cst_encode_RustOpaque_bdkkeysDescriptorSecretKey(DescriptorSecretKey raw);

  @protected
  int cst_encode_RustOpaque_bdkkeysKeyMap(KeyMap raw);

  @protected
  int cst_encode_RustOpaque_bdkkeysbip39Mnemonic(Mnemonic raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
      MutexWalletAnyDatabase raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
      MutexPartiallySignedTransaction raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_change_spend_policy(ChangeSpendPolicy raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_keychain_kind(KeychainKind raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_variant(Variant raw);

  @protected
  int cst_encode_witness_version(WitnessVersion raw);

  @protected
  int cst_encode_word_count(WordCount raw);

  @protected
  void sse_encode_RustOpaque_bdkbitcoinAddress(
      Address self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkbitcoinbip32DerivationPath(
      DerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkblockchainAnyBlockchain(
      AnyBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkdescriptorExtendedDescriptor(
      ExtendedDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkkeysDescriptorPublicKey(
      DescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkkeysDescriptorSecretKey(
      DescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkkeysKeyMap(
      KeyMap self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdkkeysbip39Mnemonic(
      Mnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
      MutexWalletAnyDatabase self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
          MutexPartiallySignedTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_error(AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_address_index(AddressIndex self, SseSerializer serializer);

  @protected
  void sse_encode_auth(Auth self, SseSerializer serializer);

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_address(BdkAddress self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_blockchain(BdkBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_derivation_path(
      BdkDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor(BdkDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor_public_key(
      BdkDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_mnemonic(BdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_psbt(BdkPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_script_buf(BdkScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_transaction(
      BdkTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_wallet(BdkWallet self, SseSerializer serializer);

  @protected
  void sse_encode_block_time(BlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_blockchain_config(
      BlockchainConfig self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_error(
      AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_index(
      AddressIndex self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_address(
      BdkAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_blockchain(
      BdkBlockchain self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_derivation_path(
      BdkDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor(
      BdkDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor_public_key(
      BdkDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_descriptor_secret_key(
      BdkDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_mnemonic(
      BdkMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_psbt(BdkPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_script_buf(
      BdkScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_transaction(
      BdkTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bdk_wallet(
      BdkWallet self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_block_time(
      BlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_blockchain_config(
      BlockchainConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_electrum_config(
      ElectrumConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_esplora_config(
      EsploraConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_hex_error(
      HexError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_local_utxo(
      LocalUtxo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lock_time(
      LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rbf_value(
      RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, BigInt) self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rpc_config(
      RpcConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rpc_sync_params(
      RpcSyncParams self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sign_options(
      SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_change_spend_policy(
      ChangeSpendPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_electrum_config(
      ElectrumConfig self, SseSerializer serializer);

  @protected
  void sse_encode_esplora_config(EsploraConfig self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_hex_error(HexError self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_input(Input self, SseSerializer serializer);

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_local_utxo(
      List<LocalUtxo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_out_point(List<OutPoint> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_script_amount(
      List<ScriptAmount> self, SseSerializer serializer);

  @protected
  void sse_encode_list_transaction_details(
      List<TransactionDetails> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_local_utxo(LocalUtxo self, SseSerializer serializer);

  @protected
  void sse_encode_lock_time(LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_address(
      BdkAddress? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_descriptor(
      BdkDescriptor? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_script_buf(
      BdkScriptBuf? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bdk_transaction(
      BdkTransaction? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_block_time(
      BlockTime? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_fee_rate(
      FeeRate? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_psbt_sig_hash_type(
      PsbtSigHashType? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rbf_value(
      RbfValue? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_record_out_point_input_usize(
      (OutPoint, Input, BigInt)? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rpc_sync_params(
      RpcSyncParams? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_sign_options(
      SignOptions? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer);

  @protected
  void sse_encode_psbt_sig_hash_type(
      PsbtSigHashType self, SseSerializer serializer);

  @protected
  void sse_encode_rbf_value(RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_record_bdk_address_u_32(
      (BdkAddress, int) self, SseSerializer serializer);

  @protected
  void sse_encode_record_bdk_psbt_transaction_details(
      (BdkPsbt, TransactionDetails) self, SseSerializer serializer);

  @protected
  void sse_encode_record_out_point_input_usize(
      (OutPoint, Input, BigInt) self, SseSerializer serializer);

  @protected
  void sse_encode_rpc_config(RpcConfig self, SseSerializer serializer);

  @protected
  void sse_encode_rpc_sync_params(RpcSyncParams self, SseSerializer serializer);

  @protected
  void sse_encode_script_amount(ScriptAmount self, SseSerializer serializer);

  @protected
  void sse_encode_sign_options(SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_details(
      TransactionDetails self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer);

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer);

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class coreWire implements BaseWire {
  factory coreWire.fromExternalLibrary(ExternalLibrary lib) =>
      coreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  coreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  coreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__api__blockchain__bdk_blockchain_broadcast(
    int port_,
    ffi.Pointer<wire_cst_bdk_blockchain> that,
    ffi.Pointer<wire_cst_bdk_transaction> transaction,
  ) {
    return _wire__crate__api__blockchain__bdk_blockchain_broadcast(
      port_,
      that,
      transaction,
    );
  }

  late final _wire__crate__api__blockchain__bdk_blockchain_broadcastPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_bdk_blockchain>,
                  ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__blockchain__bdk_blockchain_broadcast');
  late final _wire__crate__api__blockchain__bdk_blockchain_broadcast =
      _wire__crate__api__blockchain__bdk_blockchain_broadcastPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_blockchain>,
              ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__blockchain__bdk_blockchain_create(
    int port_,
    ffi.Pointer<wire_cst_blockchain_config> blockchain_config,
  ) {
    return _wire__crate__api__blockchain__bdk_blockchain_create(
      port_,
      blockchain_config,
    );
  }

  late final _wire__crate__api__blockchain__bdk_blockchain_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_blockchain_config>)>>(
      'frbgen_bdk_flutter_wire__crate__api__blockchain__bdk_blockchain_create');
  late final _wire__crate__api__blockchain__bdk_blockchain_create =
      _wire__crate__api__blockchain__bdk_blockchain_createPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_blockchain_config>)>();

  void wire__crate__api__blockchain__bdk_blockchain_estimate_fee(
    int port_,
    ffi.Pointer<wire_cst_bdk_blockchain> that,
    int target,
  ) {
    return _wire__crate__api__blockchain__bdk_blockchain_estimate_fee(
      port_,
      that,
      target,
    );
  }

  late final _wire__crate__api__blockchain__bdk_blockchain_estimate_feePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_blockchain>, ffi.Uint64)>>(
          'frbgen_bdk_flutter_wire__crate__api__blockchain__bdk_blockchain_estimate_fee');
  late final _wire__crate__api__blockchain__bdk_blockchain_estimate_fee =
      _wire__crate__api__blockchain__bdk_blockchain_estimate_feePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_blockchain>, int)>();

  void wire__crate__api__blockchain__bdk_blockchain_get_block_hash(
    int port_,
    ffi.Pointer<wire_cst_bdk_blockchain> that,
    int height,
  ) {
    return _wire__crate__api__blockchain__bdk_blockchain_get_block_hash(
      port_,
      that,
      height,
    );
  }

  late final _wire__crate__api__blockchain__bdk_blockchain_get_block_hashPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_blockchain>, ffi.Uint32)>>(
          'frbgen_bdk_flutter_wire__crate__api__blockchain__bdk_blockchain_get_block_hash');
  late final _wire__crate__api__blockchain__bdk_blockchain_get_block_hash =
      _wire__crate__api__blockchain__bdk_blockchain_get_block_hashPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_bdk_blockchain>, int)>();

  void wire__crate__api__blockchain__bdk_blockchain_get_height(
    int port_,
    ffi.Pointer<wire_cst_bdk_blockchain> that,
  ) {
    return _wire__crate__api__blockchain__bdk_blockchain_get_height(
      port_,
      that,
    );
  }

  late final _wire__crate__api__blockchain__bdk_blockchain_get_heightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_blockchain>)>>(
      'frbgen_bdk_flutter_wire__crate__api__blockchain__bdk_blockchain_get_height');
  late final _wire__crate__api__blockchain__bdk_blockchain_get_height =
      _wire__crate__api__blockchain__bdk_blockchain_get_heightPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_blockchain>)>();

  WireSyncRust2DartDco wire__crate__api__descriptor__bdk_descriptor_as_string(
    ffi.Pointer<wire_cst_bdk_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_as_string(
      that,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_descriptor>)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_as_string');
  late final _wire__crate__api__descriptor__bdk_descriptor_as_string =
      _wire__crate__api__descriptor__bdk_descriptor_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_descriptor>)>();

  WireSyncRust2DartDco
      wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weight(
    ffi.Pointer<wire_cst_bdk_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weight(
      that,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weightPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor>)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weight');
  late final _wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weight =
      _wire__crate__api__descriptor__bdk_descriptor_max_satisfaction_weightPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_descriptor>)>();

  void wire__crate__api__descriptor__bdk_descriptor_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> descriptor,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new');
  late final _wire__crate__api__descriptor__bdk_descriptor_new =
      _wire__crate__api__descriptor__bdk_descriptor_newPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip44(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip44(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip44Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip44');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip44 =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip44Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip44_public(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip44_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip44_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip44_public');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip44_public =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip44_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip49(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip49(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip49Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip49');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip49 =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip49Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip49_public(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip49_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip49_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip49_public');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip49_public =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip49_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip84(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip84(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip84Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip84');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip84 =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip84Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip84_public(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip84_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip84_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip84_public');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip84_public =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip84_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip86(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip86(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip86Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip86');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip86 =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip86Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__bdk_descriptor_new_bip86_public(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_new_bip86_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip86_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_new_bip86_public');
  late final _wire__crate__api__descriptor__bdk_descriptor_new_bip86_public =
      _wire__crate__api__descriptor__bdk_descriptor_new_bip86_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  WireSyncRust2DartDco
      wire__crate__api__descriptor__bdk_descriptor_to_string_private(
    ffi.Pointer<wire_cst_bdk_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__bdk_descriptor_to_string_private(
      that,
    );
  }

  late final _wire__crate__api__descriptor__bdk_descriptor_to_string_privatePtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor>)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__bdk_descriptor_to_string_private');
  late final _wire__crate__api__descriptor__bdk_descriptor_to_string_private =
      _wire__crate__api__descriptor__bdk_descriptor_to_string_privatePtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_descriptor>)>();

  WireSyncRust2DartDco wire__crate__api__key__bdk_derivation_path_as_string(
    ffi.Pointer<wire_cst_bdk_derivation_path> that,
  ) {
    return _wire__crate__api__key__bdk_derivation_path_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__bdk_derivation_path_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_derivation_path_as_string');
  late final _wire__crate__api__key__bdk_derivation_path_as_string =
      _wire__crate__api__key__bdk_derivation_path_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_derivation_path>)>();

  void wire__crate__api__key__bdk_derivation_path_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> path,
  ) {
    return _wire__crate__api__key__bdk_derivation_path_from_string(
      port_,
      path,
    );
  }

  late final _wire__crate__api__key__bdk_derivation_path_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_derivation_path_from_string');
  late final _wire__crate__api__key__bdk_derivation_path_from_string =
      _wire__crate__api__key__bdk_derivation_path_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__bdk_descriptor_public_key_as_string(
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> that,
  ) {
    return _wire__crate__api__key__bdk_descriptor_public_key_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_public_key_as_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor_public_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_public_key_as_string');
  late final _wire__crate__api__key__bdk_descriptor_public_key_as_string =
      _wire__crate__api__key__bdk_descriptor_public_key_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_descriptor_public_key>)>();

  void wire__crate__api__key__bdk_descriptor_public_key_derive(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> ptr,
    ffi.Pointer<wire_cst_bdk_derivation_path> path,
  ) {
    return _wire__crate__api__key__bdk_descriptor_public_key_derive(
      port_,
      ptr,
      path,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_public_key_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_bdk_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_public_key_derive');
  late final _wire__crate__api__key__bdk_descriptor_public_key_derive =
      _wire__crate__api__key__bdk_descriptor_public_key_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
              ffi.Pointer<wire_cst_bdk_derivation_path>)>();

  void wire__crate__api__key__bdk_descriptor_public_key_extend(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_public_key> ptr,
    ffi.Pointer<wire_cst_bdk_derivation_path> path,
  ) {
    return _wire__crate__api__key__bdk_descriptor_public_key_extend(
      port_,
      ptr,
      path,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_public_key_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
                  ffi.Pointer<wire_cst_bdk_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_public_key_extend');
  late final _wire__crate__api__key__bdk_descriptor_public_key_extend =
      _wire__crate__api__key__bdk_descriptor_public_key_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_public_key>,
              ffi.Pointer<wire_cst_bdk_derivation_path>)>();

  void wire__crate__api__key__bdk_descriptor_public_key_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key,
  ) {
    return _wire__crate__api__key__bdk_descriptor_public_key_from_string(
      port_,
      public_key,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_public_key_from_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_public_key_from_string');
  late final _wire__crate__api__key__bdk_descriptor_public_key_from_string =
      _wire__crate__api__key__bdk_descriptor_public_key_from_stringPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__bdk_descriptor_secret_key_as_public(
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> ptr,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_as_public(
      ptr,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_as_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_as_public');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_as_public =
      _wire__crate__api__key__bdk_descriptor_secret_key_as_publicPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__bdk_descriptor_secret_key_as_string(
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> that,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_as_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_as_string');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_as_string =
      _wire__crate__api__key__bdk_descriptor_secret_key_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>();

  void wire__crate__api__key__bdk_descriptor_secret_key_create(
    int port_,
    int network,
    ffi.Pointer<wire_cst_bdk_mnemonic> mnemonic,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> password,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_create(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_bdk_mnemonic>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_create');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_create =
      _wire__crate__api__key__bdk_descriptor_secret_key_createPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_cst_bdk_mnemonic>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__key__bdk_descriptor_secret_key_derive(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> ptr,
    ffi.Pointer<wire_cst_bdk_derivation_path> path,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_derive(
      port_,
      ptr,
      path,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Pointer<wire_cst_bdk_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_derive');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_derive =
      _wire__crate__api__key__bdk_descriptor_secret_key_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              ffi.Pointer<wire_cst_bdk_derivation_path>)>();

  void wire__crate__api__key__bdk_descriptor_secret_key_extend(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> ptr,
    ffi.Pointer<wire_cst_bdk_derivation_path> path,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_extend(
      port_,
      ptr,
      path,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
                  ffi.Pointer<wire_cst_bdk_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_extend');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_extend =
      _wire__crate__api__key__bdk_descriptor_secret_key_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_descriptor_secret_key>,
              ffi.Pointer<wire_cst_bdk_derivation_path>)>();

  void wire__crate__api__key__bdk_descriptor_secret_key_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> secret_key,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_from_string(
      port_,
      secret_key,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_from_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_from_string');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_from_string =
      _wire__crate__api__key__bdk_descriptor_secret_key_from_stringPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__bdk_descriptor_secret_key_secret_bytes(
    ffi.Pointer<wire_cst_bdk_descriptor_secret_key> that,
  ) {
    return _wire__crate__api__key__bdk_descriptor_secret_key_secret_bytes(
      that,
    );
  }

  late final _wire__crate__api__key__bdk_descriptor_secret_key_secret_bytesPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_descriptor_secret_key_secret_bytes');
  late final _wire__crate__api__key__bdk_descriptor_secret_key_secret_bytes =
      _wire__crate__api__key__bdk_descriptor_secret_key_secret_bytesPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>)>();

  WireSyncRust2DartDco wire__crate__api__key__bdk_mnemonic_as_string(
    ffi.Pointer<wire_cst_bdk_mnemonic> that,
  ) {
    return _wire__crate__api__key__bdk_mnemonic_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__bdk_mnemonic_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_mnemonic>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_mnemonic_as_string');
  late final _wire__crate__api__key__bdk_mnemonic_as_string =
      _wire__crate__api__key__bdk_mnemonic_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_mnemonic>)>();

  void wire__crate__api__key__bdk_mnemonic_from_entropy(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> entropy,
  ) {
    return _wire__crate__api__key__bdk_mnemonic_from_entropy(
      port_,
      entropy,
    );
  }

  late final _wire__crate__api__key__bdk_mnemonic_from_entropyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_mnemonic_from_entropy');
  late final _wire__crate__api__key__bdk_mnemonic_from_entropy =
      _wire__crate__api__key__bdk_mnemonic_from_entropyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire__crate__api__key__bdk_mnemonic_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
  ) {
    return _wire__crate__api__key__bdk_mnemonic_from_string(
      port_,
      mnemonic,
    );
  }

  late final _wire__crate__api__key__bdk_mnemonic_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__bdk_mnemonic_from_string');
  late final _wire__crate__api__key__bdk_mnemonic_from_string =
      _wire__crate__api__key__bdk_mnemonic_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__key__bdk_mnemonic_new(
    int port_,
    int word_count,
  ) {
    return _wire__crate__api__key__bdk_mnemonic_new(
      port_,
      word_count,
    );
  }

  late final _wire__crate__api__key__bdk_mnemonic_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__bdk_mnemonic_new');
  late final _wire__crate__api__key__bdk_mnemonic_new =
      _wire__crate__api__key__bdk_mnemonic_newPtr
          .asFunction<void Function(int, int)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_as_string(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_as_string(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_as_string');
  late final _wire__crate__api__psbt__bdk_psbt_as_string =
      _wire__crate__api__psbt__bdk_psbt_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  void wire__crate__api__psbt__bdk_psbt_combine(
    int port_,
    ffi.Pointer<wire_cst_bdk_psbt> ptr,
    ffi.Pointer<wire_cst_bdk_psbt> other,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_combine(
      port_,
      ptr,
      other,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_combinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_bdk_psbt>,
                  ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_combine');
  late final _wire__crate__api__psbt__bdk_psbt_combine =
      _wire__crate__api__psbt__bdk_psbt_combinePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_psbt>,
              ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_extract_tx(
    ffi.Pointer<wire_cst_bdk_psbt> ptr,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_extract_tx(
      ptr,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_extract_txPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_extract_tx');
  late final _wire__crate__api__psbt__bdk_psbt_extract_tx =
      _wire__crate__api__psbt__bdk_psbt_extract_txPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_fee_amount(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_fee_amount(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_fee_amountPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_fee_amount');
  late final _wire__crate__api__psbt__bdk_psbt_fee_amount =
      _wire__crate__api__psbt__bdk_psbt_fee_amountPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_fee_rate(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_fee_rate(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_fee_ratePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_fee_rate');
  late final _wire__crate__api__psbt__bdk_psbt_fee_rate =
      _wire__crate__api__psbt__bdk_psbt_fee_ratePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  void wire__crate__api__psbt__bdk_psbt_from_str(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> psbt_base64,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_from_str(
      port_,
      psbt_base64,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_from_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_from_str');
  late final _wire__crate__api__psbt__bdk_psbt_from_str =
      _wire__crate__api__psbt__bdk_psbt_from_strPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_json_serialize(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_json_serialize(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_json_serializePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_json_serialize');
  late final _wire__crate__api__psbt__bdk_psbt_json_serialize =
      _wire__crate__api__psbt__bdk_psbt_json_serializePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_serialize(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_serialize(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_serializePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_serialize');
  late final _wire__crate__api__psbt__bdk_psbt_serialize =
      _wire__crate__api__psbt__bdk_psbt_serializePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__psbt__bdk_psbt_txid(
    ffi.Pointer<wire_cst_bdk_psbt> that,
  ) {
    return _wire__crate__api__psbt__bdk_psbt_txid(
      that,
    );
  }

  late final _wire__crate__api__psbt__bdk_psbt_txidPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__psbt__bdk_psbt_txid');
  late final _wire__crate__api__psbt__bdk_psbt_txid =
      _wire__crate__api__psbt__bdk_psbt_txidPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_address_as_string(
    ffi.Pointer<wire_cst_bdk_address> that,
  ) {
    return _wire__crate__api__types__bdk_address_as_string(
      that,
    );
  }

  late final _wire__crate__api__types__bdk_address_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_as_string');
  late final _wire__crate__api__types__bdk_address_as_string =
      _wire__crate__api__types__bdk_address_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_address>)>();

  void wire__crate__api__types__bdk_address_from_script(
    int port_,
    ffi.Pointer<wire_cst_bdk_script_buf> script,
    int network,
  ) {
    return _wire__crate__api__types__bdk_address_from_script(
      port_,
      script,
      network,
    );
  }

  late final _wire__crate__api__types__bdk_address_from_scriptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_script_buf>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_from_script');
  late final _wire__crate__api__types__bdk_address_from_script =
      _wire__crate__api__types__bdk_address_from_scriptPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_script_buf>, int)>();

  void wire__crate__api__types__bdk_address_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int network,
  ) {
    return _wire__crate__api__types__bdk_address_from_string(
      port_,
      address,
      network,
    );
  }

  late final _wire__crate__api__types__bdk_address_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_from_string');
  late final _wire__crate__api__types__bdk_address_from_string =
      _wire__crate__api__types__bdk_address_from_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  WireSyncRust2DartDco
      wire__crate__api__types__bdk_address_is_valid_for_network(
    ffi.Pointer<wire_cst_bdk_address> that,
    int network,
  ) {
    return _wire__crate__api__types__bdk_address_is_valid_for_network(
      that,
      network,
    );
  }

  late final _wire__crate__api__types__bdk_address_is_valid_for_networkPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_address>, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_is_valid_for_network');
  late final _wire__crate__api__types__bdk_address_is_valid_for_network =
      _wire__crate__api__types__bdk_address_is_valid_for_networkPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_address>, int)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_address_network(
    ffi.Pointer<wire_cst_bdk_address> that,
  ) {
    return _wire__crate__api__types__bdk_address_network(
      that,
    );
  }

  late final _wire__crate__api__types__bdk_address_networkPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_network');
  late final _wire__crate__api__types__bdk_address_network =
      _wire__crate__api__types__bdk_address_networkPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_address>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_address_payload(
    ffi.Pointer<wire_cst_bdk_address> that,
  ) {
    return _wire__crate__api__types__bdk_address_payload(
      that,
    );
  }

  late final _wire__crate__api__types__bdk_address_payloadPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_payload');
  late final _wire__crate__api__types__bdk_address_payload =
      _wire__crate__api__types__bdk_address_payloadPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_address>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_address_script(
    ffi.Pointer<wire_cst_bdk_address> ptr,
  ) {
    return _wire__crate__api__types__bdk_address_script(
      ptr,
    );
  }

  late final _wire__crate__api__types__bdk_address_scriptPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_script');
  late final _wire__crate__api__types__bdk_address_script =
      _wire__crate__api__types__bdk_address_scriptPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_address>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_address_to_qr_uri(
    ffi.Pointer<wire_cst_bdk_address> that,
  ) {
    return _wire__crate__api__types__bdk_address_to_qr_uri(
      that,
    );
  }

  late final _wire__crate__api__types__bdk_address_to_qr_uriPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_address_to_qr_uri');
  late final _wire__crate__api__types__bdk_address_to_qr_uri =
      _wire__crate__api__types__bdk_address_to_qr_uriPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_address>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_script_buf_as_string(
    ffi.Pointer<wire_cst_bdk_script_buf> that,
  ) {
    return _wire__crate__api__types__bdk_script_buf_as_string(
      that,
    );
  }

  late final _wire__crate__api__types__bdk_script_buf_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_script_buf>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_script_buf_as_string');
  late final _wire__crate__api__types__bdk_script_buf_as_string =
      _wire__crate__api__types__bdk_script_buf_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_script_buf>)>();

  WireSyncRust2DartDco wire__crate__api__types__bdk_script_buf_empty() {
    return _wire__crate__api__types__bdk_script_buf_empty();
  }

  late final _wire__crate__api__types__bdk_script_buf_emptyPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'frbgen_bdk_flutter_wire__crate__api__types__bdk_script_buf_empty');
  late final _wire__crate__api__types__bdk_script_buf_empty =
      _wire__crate__api__types__bdk_script_buf_emptyPtr
          .asFunction<WireSyncRust2DartDco Function()>();

  void wire__crate__api__types__bdk_script_buf_from_hex(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
  ) {
    return _wire__crate__api__types__bdk_script_buf_from_hex(
      port_,
      s,
    );
  }

  late final _wire__crate__api__types__bdk_script_buf_from_hexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_script_buf_from_hex');
  late final _wire__crate__api__types__bdk_script_buf_from_hex =
      _wire__crate__api__types__bdk_script_buf_from_hexPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__types__bdk_script_buf_with_capacity(
    int port_,
    int capacity,
  ) {
    return _wire__crate__api__types__bdk_script_buf_with_capacity(
      port_,
      capacity,
    );
  }

  late final _wire__crate__api__types__bdk_script_buf_with_capacityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_script_buf_with_capacity');
  late final _wire__crate__api__types__bdk_script_buf_with_capacity =
      _wire__crate__api__types__bdk_script_buf_with_capacityPtr
          .asFunction<void Function(int, int)>();

  void wire__crate__api__types__bdk_transaction_from_bytes(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> transaction_bytes,
  ) {
    return _wire__crate__api__types__bdk_transaction_from_bytes(
      port_,
      transaction_bytes,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_from_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_from_bytes');
  late final _wire__crate__api__types__bdk_transaction_from_bytes =
      _wire__crate__api__types__bdk_transaction_from_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire__crate__api__types__bdk_transaction_input(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_input(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_input');
  late final _wire__crate__api__types__bdk_transaction_input =
      _wire__crate__api__types__bdk_transaction_inputPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_is_coin_base(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_is_coin_base(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_is_coin_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_is_coin_base');
  late final _wire__crate__api__types__bdk_transaction_is_coin_base =
      _wire__crate__api__types__bdk_transaction_is_coin_basePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_is_explicitly_rbf(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_is_explicitly_rbf(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_is_explicitly_rbfPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_is_explicitly_rbf');
  late final _wire__crate__api__types__bdk_transaction_is_explicitly_rbf =
      _wire__crate__api__types__bdk_transaction_is_explicitly_rbfPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_is_lock_time_enabled(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_is_lock_time_enabled(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_is_lock_time_enabledPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_is_lock_time_enabled');
  late final _wire__crate__api__types__bdk_transaction_is_lock_time_enabled =
      _wire__crate__api__types__bdk_transaction_is_lock_time_enabledPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_lock_time(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_lock_time(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_lock_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_lock_time');
  late final _wire__crate__api__types__bdk_transaction_lock_time =
      _wire__crate__api__types__bdk_transaction_lock_timePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_new(
    int port_,
    int version,
    ffi.Pointer<wire_cst_lock_time> lock_time,
    ffi.Pointer<wire_cst_list_tx_in> input,
    ffi.Pointer<wire_cst_list_tx_out> output,
  ) {
    return _wire__crate__api__types__bdk_transaction_new(
      port_,
      version,
      lock_time,
      input,
      output,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_lock_time>,
                  ffi.Pointer<wire_cst_list_tx_in>,
                  ffi.Pointer<wire_cst_list_tx_out>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_new');
  late final _wire__crate__api__types__bdk_transaction_new =
      _wire__crate__api__types__bdk_transaction_newPtr.asFunction<
          void Function(
              int,
              int,
              ffi.Pointer<wire_cst_lock_time>,
              ffi.Pointer<wire_cst_list_tx_in>,
              ffi.Pointer<wire_cst_list_tx_out>)>();

  void wire__crate__api__types__bdk_transaction_output(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_output(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_output');
  late final _wire__crate__api__types__bdk_transaction_output =
      _wire__crate__api__types__bdk_transaction_outputPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_serialize(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_serialize(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_serialize');
  late final _wire__crate__api__types__bdk_transaction_serialize =
      _wire__crate__api__types__bdk_transaction_serializePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_size(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_size(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_size');
  late final _wire__crate__api__types__bdk_transaction_size =
      _wire__crate__api__types__bdk_transaction_sizePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_txid(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_txid(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_txidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_txid');
  late final _wire__crate__api__types__bdk_transaction_txid =
      _wire__crate__api__types__bdk_transaction_txidPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_version(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_version(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_version');
  late final _wire__crate__api__types__bdk_transaction_version =
      _wire__crate__api__types__bdk_transaction_versionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_vsize(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_vsize(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_vsizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_vsize');
  late final _wire__crate__api__types__bdk_transaction_vsize =
      _wire__crate__api__types__bdk_transaction_vsizePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  void wire__crate__api__types__bdk_transaction_weight(
    int port_,
    ffi.Pointer<wire_cst_bdk_transaction> that,
  ) {
    return _wire__crate__api__types__bdk_transaction_weight(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__bdk_transaction_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_bdk_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__bdk_transaction_weight');
  late final _wire__crate__api__types__bdk_transaction_weight =
      _wire__crate__api__types__bdk_transaction_weightPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_get_address(
    ffi.Pointer<wire_cst_bdk_wallet> ptr,
    ffi.Pointer<wire_cst_address_index> address_index,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_get_address(
      ptr,
      address_index,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_get_addressPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_address_index>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_get_address');
  late final _wire__crate__api__wallet__bdk_wallet_get_address =
      _wire__crate__api__wallet__bdk_wallet_get_addressPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_address_index>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_get_balance(
    ffi.Pointer<wire_cst_bdk_wallet> that,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_get_balance(
      that,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_get_balancePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_get_balance');
  late final _wire__crate__api__wallet__bdk_wallet_get_balance =
      _wire__crate__api__wallet__bdk_wallet_get_balancePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>();

  WireSyncRust2DartDco
      wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychain(
    ffi.Pointer<wire_cst_bdk_wallet> ptr,
    int keychain,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychain(
      ptr,
      keychain,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychainPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_wallet>, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychain');
  late final _wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychain =
      _wire__crate__api__wallet__bdk_wallet_get_descriptor_for_keychainPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_wallet>, int)>();

  WireSyncRust2DartDco
      wire__crate__api__wallet__bdk_wallet_get_internal_address(
    ffi.Pointer<wire_cst_bdk_wallet> ptr,
    ffi.Pointer<wire_cst_address_index> address_index,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_get_internal_address(
      ptr,
      address_index,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_get_internal_addressPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_bdk_wallet>,
                      ffi.Pointer<wire_cst_address_index>)>>(
          'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_get_internal_address');
  late final _wire__crate__api__wallet__bdk_wallet_get_internal_address =
      _wire__crate__api__wallet__bdk_wallet_get_internal_addressPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_address_index>)>();

  void wire__crate__api__wallet__bdk_wallet_get_psbt_input(
    int port_,
    ffi.Pointer<wire_cst_bdk_wallet> that,
    ffi.Pointer<wire_cst_local_utxo> utxo,
    bool only_witness_utxo,
    ffi.Pointer<wire_cst_psbt_sig_hash_type> sighash_type,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_get_psbt_input(
      port_,
      that,
      utxo,
      only_witness_utxo,
      sighash_type,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_get_psbt_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_local_utxo>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_psbt_sig_hash_type>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_get_psbt_input');
  late final _wire__crate__api__wallet__bdk_wallet_get_psbt_input =
      _wire__crate__api__wallet__bdk_wallet_get_psbt_inputPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_local_utxo>,
              bool,
              ffi.Pointer<wire_cst_psbt_sig_hash_type>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_is_mine(
    ffi.Pointer<wire_cst_bdk_wallet> that,
    ffi.Pointer<wire_cst_bdk_script_buf> script,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_is_mine(
      that,
      script,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_is_minePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_bdk_script_buf>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_is_mine');
  late final _wire__crate__api__wallet__bdk_wallet_is_mine =
      _wire__crate__api__wallet__bdk_wallet_is_minePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_bdk_script_buf>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_list_transactions(
    ffi.Pointer<wire_cst_bdk_wallet> that,
    bool include_raw,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_list_transactions(
      that,
      include_raw,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_list_transactionsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_bdk_wallet>, ffi.Bool)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_list_transactions');
  late final _wire__crate__api__wallet__bdk_wallet_list_transactions =
      _wire__crate__api__wallet__bdk_wallet_list_transactionsPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_bdk_wallet>, bool)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_list_unspent(
    ffi.Pointer<wire_cst_bdk_wallet> that,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_list_unspent(
      that,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_list_unspentPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_list_unspent');
  late final _wire__crate__api__wallet__bdk_wallet_list_unspent =
      _wire__crate__api__wallet__bdk_wallet_list_unspentPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__bdk_wallet_network(
    ffi.Pointer<wire_cst_bdk_wallet> that,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_network(
      that,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_networkPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_network');
  late final _wire__crate__api__wallet__bdk_wallet_network =
      _wire__crate__api__wallet__bdk_wallet_networkPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_bdk_wallet>)>();

  void wire__crate__api__wallet__bdk_wallet_new(
    int port_,
    ffi.Pointer<wire_cst_bdk_descriptor> descriptor,
    ffi.Pointer<wire_cst_bdk_descriptor> change_descriptor,
    int network,
    ffi.Pointer<wire_cst_database_config> database_config,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_new(
      port_,
      descriptor,
      change_descriptor,
      network,
      database_config,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_descriptor>,
                  ffi.Pointer<wire_cst_bdk_descriptor>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_database_config>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_new');
  late final _wire__crate__api__wallet__bdk_wallet_new =
      _wire__crate__api__wallet__bdk_wallet_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_bdk_descriptor>,
              ffi.Pointer<wire_cst_bdk_descriptor>,
              int,
              ffi.Pointer<wire_cst_database_config>)>();

  void wire__crate__api__wallet__bdk_wallet_sign(
    int port_,
    ffi.Pointer<wire_cst_bdk_wallet> ptr,
    ffi.Pointer<wire_cst_bdk_psbt> psbt,
    ffi.Pointer<wire_cst_sign_options> sign_options,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_sign(
      port_,
      ptr,
      psbt,
      sign_options,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_bdk_psbt>,
                  ffi.Pointer<wire_cst_sign_options>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_sign');
  late final _wire__crate__api__wallet__bdk_wallet_sign =
      _wire__crate__api__wallet__bdk_wallet_signPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_bdk_psbt>,
              ffi.Pointer<wire_cst_sign_options>)>();

  void wire__crate__api__wallet__bdk_wallet_sync(
    int port_,
    ffi.Pointer<wire_cst_bdk_wallet> ptr,
    ffi.Pointer<wire_cst_bdk_blockchain> blockchain,
  ) {
    return _wire__crate__api__wallet__bdk_wallet_sync(
      port_,
      ptr,
      blockchain,
    );
  }

  late final _wire__crate__api__wallet__bdk_wallet_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_bdk_blockchain>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__bdk_wallet_sync');
  late final _wire__crate__api__wallet__bdk_wallet_sync =
      _wire__crate__api__wallet__bdk_wallet_syncPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_bdk_blockchain>)>();

  void wire__crate__api__wallet__finish_bump_fee_tx_builder(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> txid,
    double fee_rate,
    ffi.Pointer<wire_cst_bdk_address> allow_shrinking,
    ffi.Pointer<wire_cst_bdk_wallet> wallet,
    bool enable_rbf,
    ffi.Pointer<ffi.Uint32> n_sequence,
  ) {
    return _wire__crate__api__wallet__finish_bump_fee_tx_builder(
      port_,
      txid,
      fee_rate,
      allow_shrinking,
      wallet,
      enable_rbf,
      n_sequence,
    );
  }

  late final _wire__crate__api__wallet__finish_bump_fee_tx_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Float,
                  ffi.Pointer<wire_cst_bdk_address>,
                  ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Bool,
                  ffi.Pointer<ffi.Uint32>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__finish_bump_fee_tx_builder');
  late final _wire__crate__api__wallet__finish_bump_fee_tx_builder =
      _wire__crate__api__wallet__finish_bump_fee_tx_builderPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              double,
              ffi.Pointer<wire_cst_bdk_address>,
              ffi.Pointer<wire_cst_bdk_wallet>,
              bool,
              ffi.Pointer<ffi.Uint32>)>();

  void wire__crate__api__wallet__tx_builder_finish(
    int port_,
    ffi.Pointer<wire_cst_bdk_wallet> wallet,
    ffi.Pointer<wire_cst_list_script_amount> recipients,
    ffi.Pointer<wire_cst_list_out_point> utxos,
    ffi.Pointer<wire_cst_record_out_point_input_usize> foreign_utxo,
    ffi.Pointer<wire_cst_list_out_point> un_spendable,
    int change_policy,
    bool manually_selected_only,
    ffi.Pointer<ffi.Float> fee_rate,
    ffi.Pointer<ffi.Uint64> fee_absolute,
    bool drain_wallet,
    ffi.Pointer<wire_cst_bdk_script_buf> drain_to,
    ffi.Pointer<wire_cst_rbf_value> rbf,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> data,
  ) {
    return _wire__crate__api__wallet__tx_builder_finish(
      port_,
      wallet,
      recipients,
      utxos,
      foreign_utxo,
      un_spendable,
      change_policy,
      manually_selected_only,
      fee_rate,
      fee_absolute,
      drain_wallet,
      drain_to,
      rbf,
      data,
    );
  }

  late final _wire__crate__api__wallet__tx_builder_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_bdk_wallet>,
                  ffi.Pointer<wire_cst_list_script_amount>,
                  ffi.Pointer<wire_cst_list_out_point>,
                  ffi.Pointer<wire_cst_record_out_point_input_usize>,
                  ffi.Pointer<wire_cst_list_out_point>,
                  ffi.Int32,
                  ffi.Bool,
                  ffi.Pointer<ffi.Float>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_bdk_script_buf>,
                  ffi.Pointer<wire_cst_rbf_value>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__tx_builder_finish');
  late final _wire__crate__api__wallet__tx_builder_finish =
      _wire__crate__api__wallet__tx_builder_finishPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_bdk_wallet>,
              ffi.Pointer<wire_cst_list_script_amount>,
              ffi.Pointer<wire_cst_list_out_point>,
              ffi.Pointer<wire_cst_record_out_point_input_usize>,
              ffi.Pointer<wire_cst_list_out_point>,
              int,
              bool,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Uint64>,
              bool,
              ffi.Pointer<wire_cst_bdk_script_buf>,
              ffi.Pointer<wire_cst_rbf_value>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddress =
      _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddress =
      _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath =
      _rust_arc_increment_strong_count_RustOpaque_bdkbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPath =
      _rust_arc_decrement_strong_count_RustOpaque_bdkbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchain(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchain(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchain');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchain =
      _rust_arc_increment_strong_count_RustOpaque_bdkblockchainAnyBlockchainPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchain(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchain(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchain');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchain =
      _rust_arc_decrement_strong_count_RustOpaque_bdkblockchainAnyBlockchainPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor =
      _rust_arc_increment_strong_count_RustOpaque_bdkdescriptorExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptor =
      _rust_arc_decrement_strong_count_RustOpaque_bdkdescriptorExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKey');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKey =
      _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKey =
      _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKey');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKey =
      _rust_arc_increment_strong_count_RustOpaque_bdkkeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKey =
      _rust_arc_decrement_strong_count_RustOpaque_bdkkeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMap');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMap =
      _rust_arc_increment_strong_count_RustOpaque_bdkkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMap');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMap =
      _rust_arc_decrement_strong_count_RustOpaque_bdkkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39Mnemonic');
  late final _rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39Mnemonic =
      _rust_arc_increment_strong_count_RustOpaque_bdkkeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39Mnemonic');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39Mnemonic =
      _rust_arc_decrement_strong_count_RustOpaque_bdkkeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabasePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabase =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkWalletbdkdatabaseAnyDatabasePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransactionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransaction =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdkbitcoinpsbtPartiallySignedTransactionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_address_error> cst_new_box_autoadd_address_error() {
    return _cst_new_box_autoadd_address_error();
  }

  late final _cst_new_box_autoadd_address_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_address_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_address_error');
  late final _cst_new_box_autoadd_address_error =
      _cst_new_box_autoadd_address_errorPtr
          .asFunction<ffi.Pointer<wire_cst_address_error> Function()>();

  ffi.Pointer<wire_cst_address_index> cst_new_box_autoadd_address_index() {
    return _cst_new_box_autoadd_address_index();
  }

  late final _cst_new_box_autoadd_address_indexPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_address_index> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_address_index');
  late final _cst_new_box_autoadd_address_index =
      _cst_new_box_autoadd_address_indexPtr
          .asFunction<ffi.Pointer<wire_cst_address_index> Function()>();

  ffi.Pointer<wire_cst_bdk_address> cst_new_box_autoadd_bdk_address() {
    return _cst_new_box_autoadd_bdk_address();
  }

  late final _cst_new_box_autoadd_bdk_addressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_address> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_address');
  late final _cst_new_box_autoadd_bdk_address =
      _cst_new_box_autoadd_bdk_addressPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_address> Function()>();

  ffi.Pointer<wire_cst_bdk_blockchain> cst_new_box_autoadd_bdk_blockchain() {
    return _cst_new_box_autoadd_bdk_blockchain();
  }

  late final _cst_new_box_autoadd_bdk_blockchainPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_blockchain> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_blockchain');
  late final _cst_new_box_autoadd_bdk_blockchain =
      _cst_new_box_autoadd_bdk_blockchainPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_blockchain> Function()>();

  ffi.Pointer<wire_cst_bdk_derivation_path>
      cst_new_box_autoadd_bdk_derivation_path() {
    return _cst_new_box_autoadd_bdk_derivation_path();
  }

  late final _cst_new_box_autoadd_bdk_derivation_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bdk_derivation_path> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_derivation_path');
  late final _cst_new_box_autoadd_bdk_derivation_path =
      _cst_new_box_autoadd_bdk_derivation_pathPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_derivation_path> Function()>();

  ffi.Pointer<wire_cst_bdk_descriptor> cst_new_box_autoadd_bdk_descriptor() {
    return _cst_new_box_autoadd_bdk_descriptor();
  }

  late final _cst_new_box_autoadd_bdk_descriptorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_descriptor> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_descriptor');
  late final _cst_new_box_autoadd_bdk_descriptor =
      _cst_new_box_autoadd_bdk_descriptorPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_descriptor> Function()>();

  ffi.Pointer<wire_cst_bdk_descriptor_public_key>
      cst_new_box_autoadd_bdk_descriptor_public_key() {
    return _cst_new_box_autoadd_bdk_descriptor_public_key();
  }

  late final _cst_new_box_autoadd_bdk_descriptor_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bdk_descriptor_public_key> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_descriptor_public_key');
  late final _cst_new_box_autoadd_bdk_descriptor_public_key =
      _cst_new_box_autoadd_bdk_descriptor_public_keyPtr.asFunction<
          ffi.Pointer<wire_cst_bdk_descriptor_public_key> Function()>();

  ffi.Pointer<wire_cst_bdk_descriptor_secret_key>
      cst_new_box_autoadd_bdk_descriptor_secret_key() {
    return _cst_new_box_autoadd_bdk_descriptor_secret_key();
  }

  late final _cst_new_box_autoadd_bdk_descriptor_secret_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bdk_descriptor_secret_key> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_descriptor_secret_key');
  late final _cst_new_box_autoadd_bdk_descriptor_secret_key =
      _cst_new_box_autoadd_bdk_descriptor_secret_keyPtr.asFunction<
          ffi.Pointer<wire_cst_bdk_descriptor_secret_key> Function()>();

  ffi.Pointer<wire_cst_bdk_mnemonic> cst_new_box_autoadd_bdk_mnemonic() {
    return _cst_new_box_autoadd_bdk_mnemonic();
  }

  late final _cst_new_box_autoadd_bdk_mnemonicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_mnemonic> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_mnemonic');
  late final _cst_new_box_autoadd_bdk_mnemonic =
      _cst_new_box_autoadd_bdk_mnemonicPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_mnemonic> Function()>();

  ffi.Pointer<wire_cst_bdk_psbt> cst_new_box_autoadd_bdk_psbt() {
    return _cst_new_box_autoadd_bdk_psbt();
  }

  late final _cst_new_box_autoadd_bdk_psbtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_psbt> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_psbt');
  late final _cst_new_box_autoadd_bdk_psbt = _cst_new_box_autoadd_bdk_psbtPtr
      .asFunction<ffi.Pointer<wire_cst_bdk_psbt> Function()>();

  ffi.Pointer<wire_cst_bdk_script_buf> cst_new_box_autoadd_bdk_script_buf() {
    return _cst_new_box_autoadd_bdk_script_buf();
  }

  late final _cst_new_box_autoadd_bdk_script_bufPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_script_buf> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_script_buf');
  late final _cst_new_box_autoadd_bdk_script_buf =
      _cst_new_box_autoadd_bdk_script_bufPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_script_buf> Function()>();

  ffi.Pointer<wire_cst_bdk_transaction> cst_new_box_autoadd_bdk_transaction() {
    return _cst_new_box_autoadd_bdk_transaction();
  }

  late final _cst_new_box_autoadd_bdk_transactionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_transaction> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_transaction');
  late final _cst_new_box_autoadd_bdk_transaction =
      _cst_new_box_autoadd_bdk_transactionPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_transaction> Function()>();

  ffi.Pointer<wire_cst_bdk_wallet> cst_new_box_autoadd_bdk_wallet() {
    return _cst_new_box_autoadd_bdk_wallet();
  }

  late final _cst_new_box_autoadd_bdk_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_bdk_wallet> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_bdk_wallet');
  late final _cst_new_box_autoadd_bdk_wallet =
      _cst_new_box_autoadd_bdk_walletPtr
          .asFunction<ffi.Pointer<wire_cst_bdk_wallet> Function()>();

  ffi.Pointer<wire_cst_block_time> cst_new_box_autoadd_block_time() {
    return _cst_new_box_autoadd_block_time();
  }

  late final _cst_new_box_autoadd_block_timePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_block_time> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_block_time');
  late final _cst_new_box_autoadd_block_time =
      _cst_new_box_autoadd_block_timePtr
          .asFunction<ffi.Pointer<wire_cst_block_time> Function()>();

  ffi.Pointer<wire_cst_blockchain_config>
      cst_new_box_autoadd_blockchain_config() {
    return _cst_new_box_autoadd_blockchain_config();
  }

  late final _cst_new_box_autoadd_blockchain_configPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_blockchain_config> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_blockchain_config');
  late final _cst_new_box_autoadd_blockchain_config =
      _cst_new_box_autoadd_blockchain_configPtr
          .asFunction<ffi.Pointer<wire_cst_blockchain_config> Function()>();

  ffi.Pointer<wire_cst_consensus_error> cst_new_box_autoadd_consensus_error() {
    return _cst_new_box_autoadd_consensus_error();
  }

  late final _cst_new_box_autoadd_consensus_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_consensus_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_consensus_error');
  late final _cst_new_box_autoadd_consensus_error =
      _cst_new_box_autoadd_consensus_errorPtr
          .asFunction<ffi.Pointer<wire_cst_consensus_error> Function()>();

  ffi.Pointer<wire_cst_database_config> cst_new_box_autoadd_database_config() {
    return _cst_new_box_autoadd_database_config();
  }

  late final _cst_new_box_autoadd_database_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_database_config> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_database_config');
  late final _cst_new_box_autoadd_database_config =
      _cst_new_box_autoadd_database_configPtr
          .asFunction<ffi.Pointer<wire_cst_database_config> Function()>();

  ffi.Pointer<wire_cst_descriptor_error>
      cst_new_box_autoadd_descriptor_error() {
    return _cst_new_box_autoadd_descriptor_error();
  }

  late final _cst_new_box_autoadd_descriptor_errorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_descriptor_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_descriptor_error');
  late final _cst_new_box_autoadd_descriptor_error =
      _cst_new_box_autoadd_descriptor_errorPtr
          .asFunction<ffi.Pointer<wire_cst_descriptor_error> Function()>();

  ffi.Pointer<wire_cst_electrum_config> cst_new_box_autoadd_electrum_config() {
    return _cst_new_box_autoadd_electrum_config();
  }

  late final _cst_new_box_autoadd_electrum_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_electrum_config> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_electrum_config');
  late final _cst_new_box_autoadd_electrum_config =
      _cst_new_box_autoadd_electrum_configPtr
          .asFunction<ffi.Pointer<wire_cst_electrum_config> Function()>();

  ffi.Pointer<wire_cst_esplora_config> cst_new_box_autoadd_esplora_config() {
    return _cst_new_box_autoadd_esplora_config();
  }

  late final _cst_new_box_autoadd_esplora_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_esplora_config> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_esplora_config');
  late final _cst_new_box_autoadd_esplora_config =
      _cst_new_box_autoadd_esplora_configPtr
          .asFunction<ffi.Pointer<wire_cst_esplora_config> Function()>();

  ffi.Pointer<ffi.Float> cst_new_box_autoadd_f_32(
    double value,
  ) {
    return _cst_new_box_autoadd_f_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_f_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_f_32');
  late final _cst_new_box_autoadd_f_32 = _cst_new_box_autoadd_f_32Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<wire_cst_fee_rate> cst_new_box_autoadd_fee_rate() {
    return _cst_new_box_autoadd_fee_rate();
  }

  late final _cst_new_box_autoadd_fee_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_fee_rate> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_fee_rate');
  late final _cst_new_box_autoadd_fee_rate = _cst_new_box_autoadd_fee_ratePtr
      .asFunction<ffi.Pointer<wire_cst_fee_rate> Function()>();

  ffi.Pointer<wire_cst_hex_error> cst_new_box_autoadd_hex_error() {
    return _cst_new_box_autoadd_hex_error();
  }

  late final _cst_new_box_autoadd_hex_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_hex_error> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_hex_error');
  late final _cst_new_box_autoadd_hex_error = _cst_new_box_autoadd_hex_errorPtr
      .asFunction<ffi.Pointer<wire_cst_hex_error> Function()>();

  ffi.Pointer<wire_cst_local_utxo> cst_new_box_autoadd_local_utxo() {
    return _cst_new_box_autoadd_local_utxo();
  }

  late final _cst_new_box_autoadd_local_utxoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_local_utxo> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_local_utxo');
  late final _cst_new_box_autoadd_local_utxo =
      _cst_new_box_autoadd_local_utxoPtr
          .asFunction<ffi.Pointer<wire_cst_local_utxo> Function()>();

  ffi.Pointer<wire_cst_lock_time> cst_new_box_autoadd_lock_time() {
    return _cst_new_box_autoadd_lock_time();
  }

  late final _cst_new_box_autoadd_lock_timePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_lock_time> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_lock_time');
  late final _cst_new_box_autoadd_lock_time = _cst_new_box_autoadd_lock_timePtr
      .asFunction<ffi.Pointer<wire_cst_lock_time> Function()>();

  ffi.Pointer<wire_cst_out_point> cst_new_box_autoadd_out_point() {
    return _cst_new_box_autoadd_out_point();
  }

  late final _cst_new_box_autoadd_out_pointPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_out_point> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_out_point');
  late final _cst_new_box_autoadd_out_point = _cst_new_box_autoadd_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_out_point> Function()>();

  ffi.Pointer<wire_cst_psbt_sig_hash_type>
      cst_new_box_autoadd_psbt_sig_hash_type() {
    return _cst_new_box_autoadd_psbt_sig_hash_type();
  }

  late final _cst_new_box_autoadd_psbt_sig_hash_typePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_psbt_sig_hash_type> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_psbt_sig_hash_type');
  late final _cst_new_box_autoadd_psbt_sig_hash_type =
      _cst_new_box_autoadd_psbt_sig_hash_typePtr
          .asFunction<ffi.Pointer<wire_cst_psbt_sig_hash_type> Function()>();

  ffi.Pointer<wire_cst_rbf_value> cst_new_box_autoadd_rbf_value() {
    return _cst_new_box_autoadd_rbf_value();
  }

  late final _cst_new_box_autoadd_rbf_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_rbf_value> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_rbf_value');
  late final _cst_new_box_autoadd_rbf_value = _cst_new_box_autoadd_rbf_valuePtr
      .asFunction<ffi.Pointer<wire_cst_rbf_value> Function()>();

  ffi.Pointer<wire_cst_record_out_point_input_usize>
      cst_new_box_autoadd_record_out_point_input_usize() {
    return _cst_new_box_autoadd_record_out_point_input_usize();
  }

  late final _cst_new_box_autoadd_record_out_point_input_usizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_record_out_point_input_usize> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_record_out_point_input_usize');
  late final _cst_new_box_autoadd_record_out_point_input_usize =
      _cst_new_box_autoadd_record_out_point_input_usizePtr.asFunction<
          ffi.Pointer<wire_cst_record_out_point_input_usize> Function()>();

  ffi.Pointer<wire_cst_rpc_config> cst_new_box_autoadd_rpc_config() {
    return _cst_new_box_autoadd_rpc_config();
  }

  late final _cst_new_box_autoadd_rpc_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_rpc_config> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_rpc_config');
  late final _cst_new_box_autoadd_rpc_config =
      _cst_new_box_autoadd_rpc_configPtr
          .asFunction<ffi.Pointer<wire_cst_rpc_config> Function()>();

  ffi.Pointer<wire_cst_rpc_sync_params> cst_new_box_autoadd_rpc_sync_params() {
    return _cst_new_box_autoadd_rpc_sync_params();
  }

  late final _cst_new_box_autoadd_rpc_sync_paramsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_rpc_sync_params> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_rpc_sync_params');
  late final _cst_new_box_autoadd_rpc_sync_params =
      _cst_new_box_autoadd_rpc_sync_paramsPtr
          .asFunction<ffi.Pointer<wire_cst_rpc_sync_params> Function()>();

  ffi.Pointer<wire_cst_sign_options> cst_new_box_autoadd_sign_options() {
    return _cst_new_box_autoadd_sign_options();
  }

  late final _cst_new_box_autoadd_sign_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_sign_options> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sign_options');
  late final _cst_new_box_autoadd_sign_options =
      _cst_new_box_autoadd_sign_optionsPtr
          .asFunction<ffi.Pointer<wire_cst_sign_options> Function()>();

  ffi.Pointer<wire_cst_sled_db_configuration>
      cst_new_box_autoadd_sled_db_configuration() {
    return _cst_new_box_autoadd_sled_db_configuration();
  }

  late final _cst_new_box_autoadd_sled_db_configurationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_sled_db_configuration> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sled_db_configuration');
  late final _cst_new_box_autoadd_sled_db_configuration =
      _cst_new_box_autoadd_sled_db_configurationPtr
          .asFunction<ffi.Pointer<wire_cst_sled_db_configuration> Function()>();

  ffi.Pointer<wire_cst_sqlite_db_configuration>
      cst_new_box_autoadd_sqlite_db_configuration() {
    return _cst_new_box_autoadd_sqlite_db_configuration();
  }

  late final _cst_new_box_autoadd_sqlite_db_configurationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_sqlite_db_configuration> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sqlite_db_configuration');
  late final _cst_new_box_autoadd_sqlite_db_configuration =
      _cst_new_box_autoadd_sqlite_db_configurationPtr.asFunction<
          ffi.Pointer<wire_cst_sqlite_db_configuration> Function()>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.Uint8> cst_new_box_autoadd_u_8(
    int value,
  ) {
    return _cst_new_box_autoadd_u_8(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_u_8');
  late final _cst_new_box_autoadd_u_8 = _cst_new_box_autoadd_u_8Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_new_list_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_list_prim_u_8_strict');
  late final _cst_new_list_list_prim_u_8_strict =
      _cst_new_list_list_prim_u_8_strictPtr.asFunction<
          ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_local_utxo> cst_new_list_local_utxo(
    int len,
  ) {
    return _cst_new_list_local_utxo(
      len,
    );
  }

  late final _cst_new_list_local_utxoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_local_utxo> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_local_utxo');
  late final _cst_new_list_local_utxo = _cst_new_list_local_utxoPtr
      .asFunction<ffi.Pointer<wire_cst_list_local_utxo> Function(int)>();

  ffi.Pointer<wire_cst_list_out_point> cst_new_list_out_point(
    int len,
  ) {
    return _cst_new_list_out_point(
      len,
    );
  }

  late final _cst_new_list_out_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_out_point> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_out_point');
  late final _cst_new_list_out_point = _cst_new_list_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_list_out_point> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_script_amount> cst_new_list_script_amount(
    int len,
  ) {
    return _cst_new_list_script_amount(
      len,
    );
  }

  late final _cst_new_list_script_amountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_script_amount> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_script_amount');
  late final _cst_new_list_script_amount = _cst_new_list_script_amountPtr
      .asFunction<ffi.Pointer<wire_cst_list_script_amount> Function(int)>();

  ffi.Pointer<wire_cst_list_transaction_details>
      cst_new_list_transaction_details(
    int len,
  ) {
    return _cst_new_list_transaction_details(
      len,
    );
  }

  late final _cst_new_list_transaction_detailsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_transaction_details> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_transaction_details');
  late final _cst_new_list_transaction_details =
      _cst_new_list_transaction_detailsPtr.asFunction<
          ffi.Pointer<wire_cst_list_transaction_details> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_in> cst_new_list_tx_in(
    int len,
  ) {
    return _cst_new_list_tx_in(
      len,
    );
  }

  late final _cst_new_list_tx_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_in> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_in');
  late final _cst_new_list_tx_in = _cst_new_list_tx_inPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_in> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_out> cst_new_list_tx_out(
    int len,
  ) {
    return _cst_new_list_tx_out(
      len,
    );
  }

  late final _cst_new_list_tx_outPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_out> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_out');
  late final _cst_new_list_tx_out = _cst_new_list_tx_outPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_out> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;
typedef DartPostCObjectFnTypeFunction = ffi.Bool Function(
    DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction = bool Function(
    DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

final class wire_cst_bdk_blockchain extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_bdk_transaction extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_electrum_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> socks5;

  @ffi.Uint8()
  external int retry;

  external ffi.Pointer<ffi.Uint8> timeout;

  @ffi.Uint64()
  external int stop_gap;

  @ffi.Bool()
  external bool validate_domain;
}

final class wire_cst_BlockchainConfig_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_cst_electrum_config> config;
}

final class wire_cst_esplora_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> base_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> proxy;

  external ffi.Pointer<ffi.Uint8> concurrency;

  @ffi.Uint64()
  external int stop_gap;

  external ffi.Pointer<ffi.Uint64> timeout;
}

final class wire_cst_BlockchainConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_cst_esplora_config> config;
}

final class wire_cst_Auth_UserPass extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> username;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> password;
}

final class wire_cst_Auth_Cookie extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> file;
}

final class AuthKind extends ffi.Union {
  external wire_cst_Auth_UserPass UserPass;

  external wire_cst_Auth_Cookie Cookie;
}

final class wire_cst_auth extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AuthKind kind;
}

final class wire_cst_rpc_sync_params extends ffi.Struct {
  @ffi.Uint64()
  external int start_script_count;

  @ffi.Uint64()
  external int start_time;

  @ffi.Bool()
  external bool force_start_time;

  @ffi.Uint64()
  external int poll_rate_sec;
}

final class wire_cst_rpc_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;

  external wire_cst_auth auth;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> wallet_name;

  external ffi.Pointer<wire_cst_rpc_sync_params> sync_params;
}

final class wire_cst_BlockchainConfig_Rpc extends ffi.Struct {
  external ffi.Pointer<wire_cst_rpc_config> config;
}

final class BlockchainConfigKind extends ffi.Union {
  external wire_cst_BlockchainConfig_Electrum Electrum;

  external wire_cst_BlockchainConfig_Esplora Esplora;

  external wire_cst_BlockchainConfig_Rpc Rpc;
}

final class wire_cst_blockchain_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BlockchainConfigKind kind;
}

final class wire_cst_bdk_descriptor extends ffi.Struct {
  @ffi.UintPtr()
  external int extended_descriptor;

  @ffi.UintPtr()
  external int key_map;
}

final class wire_cst_bdk_descriptor_secret_key extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bdk_descriptor_public_key extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bdk_derivation_path extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bdk_mnemonic extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_bdk_psbt extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bdk_address extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_bdk_script_buf extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bytes;
}

final class wire_cst_LockTime_Blocks extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_cst_LockTime_Seconds extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class LockTimeKind extends ffi.Union {
  external wire_cst_LockTime_Blocks Blocks;

  external wire_cst_LockTime_Seconds Seconds;
}

final class wire_cst_lock_time extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LockTimeKind kind;
}

final class wire_cst_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_list_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_in extends ffi.Struct {
  external wire_cst_out_point previous_output;

  external wire_cst_bdk_script_buf script_sig;

  @ffi.Uint32()
  external int sequence;

  external ffi.Pointer<wire_cst_list_list_prim_u_8_strict> witness;
}

final class wire_cst_list_tx_in extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_in> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_out extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external wire_cst_bdk_script_buf script_pubkey;
}

final class wire_cst_list_tx_out extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_out> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_bdk_wallet extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_AddressIndex_Peek extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

final class wire_cst_AddressIndex_Reset extends ffi.Struct {
  @ffi.Uint32()
  external int index;
}

final class AddressIndexKind extends ffi.Union {
  external wire_cst_AddressIndex_Peek Peek;

  external wire_cst_AddressIndex_Reset Reset;
}

final class wire_cst_address_index extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AddressIndexKind kind;
}

final class wire_cst_local_utxo extends ffi.Struct {
  external wire_cst_out_point outpoint;

  external wire_cst_tx_out txout;

  @ffi.Int32()
  external int keychain;

  @ffi.Bool()
  external bool is_spent;
}

final class wire_cst_psbt_sig_hash_type extends ffi.Struct {
  @ffi.Uint32()
  external int inner;
}

final class wire_cst_sqlite_db_configuration extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;
}

final class wire_cst_DatabaseConfig_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_cst_sqlite_db_configuration> config;
}

final class wire_cst_sled_db_configuration extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> tree_name;
}

final class wire_cst_DatabaseConfig_Sled extends ffi.Struct {
  external ffi.Pointer<wire_cst_sled_db_configuration> config;
}

final class DatabaseConfigKind extends ffi.Union {
  external wire_cst_DatabaseConfig_Sqlite Sqlite;

  external wire_cst_DatabaseConfig_Sled Sled;
}

final class wire_cst_database_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DatabaseConfigKind kind;
}

final class wire_cst_sign_options extends ffi.Struct {
  @ffi.Bool()
  external bool trust_witness_utxo;

  external ffi.Pointer<ffi.Uint32> assume_height;

  @ffi.Bool()
  external bool allow_all_sighashes;

  @ffi.Bool()
  external bool remove_partial_sigs;

  @ffi.Bool()
  external bool try_finalize;

  @ffi.Bool()
  external bool sign_with_tap_internal_key;

  @ffi.Bool()
  external bool allow_grinding;
}

final class wire_cst_script_amount extends ffi.Struct {
  external wire_cst_bdk_script_buf script;

  @ffi.Uint64()
  external int amount;
}

final class wire_cst_list_script_amount extends ffi.Struct {
  external ffi.Pointer<wire_cst_script_amount> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_out_point> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_input extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> s;
}

final class wire_cst_record_out_point_input_usize extends ffi.Struct {
  external wire_cst_out_point field0;

  external wire_cst_input field1;

  @ffi.UintPtr()
  external int field2;
}

final class wire_cst_RbfValue_Value extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class RbfValueKind extends ffi.Union {
  external wire_cst_RbfValue_Value Value;
}

final class wire_cst_rbf_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external RbfValueKind kind;
}

final class wire_cst_AddressError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_Bech32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_InvalidBech32Variant extends ffi.Struct {
  @ffi.Int32()
  external int expected;

  @ffi.Int32()
  external int found;
}

final class wire_cst_AddressError_InvalidWitnessVersion extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_AddressError_UnparsableWitnessVersion extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_InvalidWitnessProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_AddressError_InvalidSegwitV0ProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_AddressError_UnknownAddressType extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_NetworkValidation extends ffi.Struct {
  @ffi.Int32()
  external int network_required;

  @ffi.Int32()
  external int network_found;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> address;
}

final class AddressErrorKind extends ffi.Union {
  external wire_cst_AddressError_Base58 Base58;

  external wire_cst_AddressError_Bech32 Bech32;

  external wire_cst_AddressError_InvalidBech32Variant InvalidBech32Variant;

  external wire_cst_AddressError_InvalidWitnessVersion InvalidWitnessVersion;

  external wire_cst_AddressError_UnparsableWitnessVersion
      UnparsableWitnessVersion;

  external wire_cst_AddressError_InvalidWitnessProgramLength
      InvalidWitnessProgramLength;

  external wire_cst_AddressError_InvalidSegwitV0ProgramLength
      InvalidSegwitV0ProgramLength;

  external wire_cst_AddressError_UnknownAddressType UnknownAddressType;

  external wire_cst_AddressError_NetworkValidation NetworkValidation;
}

final class wire_cst_address_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AddressErrorKind kind;
}

final class wire_cst_block_time extends ffi.Struct {
  @ffi.Uint32()
  external int height;

  @ffi.Uint64()
  external int timestamp;
}

final class wire_cst_ConsensusError_Io extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ConsensusError_OversizedVectorAllocation
    extends ffi.Struct {
  @ffi.UintPtr()
  external int requested;

  @ffi.UintPtr()
  external int max;
}

final class wire_cst_ConsensusError_InvalidChecksum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> expected;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> actual;
}

final class wire_cst_ConsensusError_ParseFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ConsensusError_UnsupportedSegwitFlag extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class ConsensusErrorKind extends ffi.Union {
  external wire_cst_ConsensusError_Io Io;

  external wire_cst_ConsensusError_OversizedVectorAllocation
      OversizedVectorAllocation;

  external wire_cst_ConsensusError_InvalidChecksum InvalidChecksum;

  external wire_cst_ConsensusError_ParseFailed ParseFailed;

  external wire_cst_ConsensusError_UnsupportedSegwitFlag UnsupportedSegwitFlag;
}

final class wire_cst_consensus_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ConsensusErrorKind kind;
}

final class wire_cst_DescriptorError_Key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Policy extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_InvalidDescriptorCharacter
    extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_DescriptorError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Pk extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Miniscript extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class DescriptorErrorKind extends ffi.Union {
  external wire_cst_DescriptorError_Key Key;

  external wire_cst_DescriptorError_Policy Policy;

  external wire_cst_DescriptorError_InvalidDescriptorCharacter
      InvalidDescriptorCharacter;

  external wire_cst_DescriptorError_Bip32 Bip32;

  external wire_cst_DescriptorError_Base58 Base58;

  external wire_cst_DescriptorError_Pk Pk;

  external wire_cst_DescriptorError_Miniscript Miniscript;

  external wire_cst_DescriptorError_Hex Hex;
}

final class wire_cst_descriptor_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DescriptorErrorKind kind;
}

final class wire_cst_fee_rate extends ffi.Struct {
  @ffi.Float()
  external double sat_per_vb;
}

final class wire_cst_HexError_InvalidChar extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_HexError_OddLengthString extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_HexError_InvalidLength extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class HexErrorKind extends ffi.Union {
  external wire_cst_HexError_InvalidChar InvalidChar;

  external wire_cst_HexError_OddLengthString OddLengthString;

  external wire_cst_HexError_InvalidLength InvalidLength;
}

final class wire_cst_hex_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external HexErrorKind kind;
}

final class wire_cst_list_local_utxo extends ffi.Struct {
  external ffi.Pointer<wire_cst_local_utxo> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_transaction_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_bdk_transaction> transaction;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint64()
  external int received;

  @ffi.Uint64()
  external int sent;

  external ffi.Pointer<ffi.Uint64> fee;

  external ffi.Pointer<wire_cst_block_time> confirmation_time;
}

final class wire_cst_list_transaction_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_transaction_details> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_balance extends ffi.Struct {
  @ffi.Uint64()
  external int immature;

  @ffi.Uint64()
  external int trusted_pending;

  @ffi.Uint64()
  external int untrusted_pending;

  @ffi.Uint64()
  external int confirmed;

  @ffi.Uint64()
  external int spendable;

  @ffi.Uint64()
  external int total;
}

final class wire_cst_BdkError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_hex_error> field0;
}

final class wire_cst_BdkError_Consensus extends ffi.Struct {
  external ffi.Pointer<wire_cst_consensus_error> field0;
}

final class wire_cst_BdkError_VerifyTransaction extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Address extends ffi.Struct {
  external ffi.Pointer<wire_cst_address_error> field0;
}

final class wire_cst_BdkError_Descriptor extends ffi.Struct {
  external ffi.Pointer<wire_cst_descriptor_error> field0;
}

final class wire_cst_BdkError_InvalidU32Bytes extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Generic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_OutputBelowDustLimit extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_BdkError_InsufficientFunds extends ffi.Struct {
  @ffi.Uint64()
  external int needed;

  @ffi.Uint64()
  external int available;
}

final class wire_cst_BdkError_FeeRateTooLow extends ffi.Struct {
  @ffi.Float()
  external double needed;
}

final class wire_cst_BdkError_FeeTooLow extends ffi.Struct {
  @ffi.Uint64()
  external int needed;
}

final class wire_cst_BdkError_MissingKeyOrigin extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_SpendingPolicyRequired extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_BdkError_InvalidPolicyPathError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Signer extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_InvalidNetwork extends ffi.Struct {
  @ffi.Int32()
  external int requested;

  @ffi.Int32()
  external int found;
}

final class wire_cst_BdkError_InvalidOutpoint extends ffi.Struct {
  external ffi.Pointer<wire_cst_out_point> field0;
}

final class wire_cst_BdkError_Encode extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Miniscript extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_MiniscriptPsbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Bip39 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Secp256k1 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Json extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Psbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_PsbtParse extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_MissingCachedScripts extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class wire_cst_BdkError_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Sled extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Rpc extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Rusqlite extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_InvalidInput extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_InvalidLockTime extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_InvalidTransaction extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class BdkErrorKind extends ffi.Union {
  external wire_cst_BdkError_Hex Hex;

  external wire_cst_BdkError_Consensus Consensus;

  external wire_cst_BdkError_VerifyTransaction VerifyTransaction;

  external wire_cst_BdkError_Address Address;

  external wire_cst_BdkError_Descriptor Descriptor;

  external wire_cst_BdkError_InvalidU32Bytes InvalidU32Bytes;

  external wire_cst_BdkError_Generic Generic;

  external wire_cst_BdkError_OutputBelowDustLimit OutputBelowDustLimit;

  external wire_cst_BdkError_InsufficientFunds InsufficientFunds;

  external wire_cst_BdkError_FeeRateTooLow FeeRateTooLow;

  external wire_cst_BdkError_FeeTooLow FeeTooLow;

  external wire_cst_BdkError_MissingKeyOrigin MissingKeyOrigin;

  external wire_cst_BdkError_Key Key;

  external wire_cst_BdkError_SpendingPolicyRequired SpendingPolicyRequired;

  external wire_cst_BdkError_InvalidPolicyPathError InvalidPolicyPathError;

  external wire_cst_BdkError_Signer Signer;

  external wire_cst_BdkError_InvalidNetwork InvalidNetwork;

  external wire_cst_BdkError_InvalidOutpoint InvalidOutpoint;

  external wire_cst_BdkError_Encode Encode;

  external wire_cst_BdkError_Miniscript Miniscript;

  external wire_cst_BdkError_MiniscriptPsbt MiniscriptPsbt;

  external wire_cst_BdkError_Bip32 Bip32;

  external wire_cst_BdkError_Bip39 Bip39;

  external wire_cst_BdkError_Secp256k1 Secp256k1;

  external wire_cst_BdkError_Json Json;

  external wire_cst_BdkError_Psbt Psbt;

  external wire_cst_BdkError_PsbtParse PsbtParse;

  external wire_cst_BdkError_MissingCachedScripts MissingCachedScripts;

  external wire_cst_BdkError_Electrum Electrum;

  external wire_cst_BdkError_Esplora Esplora;

  external wire_cst_BdkError_Sled Sled;

  external wire_cst_BdkError_Rpc Rpc;

  external wire_cst_BdkError_Rusqlite Rusqlite;

  external wire_cst_BdkError_InvalidInput InvalidInput;

  external wire_cst_BdkError_InvalidLockTime InvalidLockTime;

  external wire_cst_BdkError_InvalidTransaction InvalidTransaction;
}

final class wire_cst_bdk_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BdkErrorKind kind;
}

final class wire_cst_Payload_PubkeyHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pubkey_hash;
}

final class wire_cst_Payload_ScriptHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_hash;
}

final class wire_cst_Payload_WitnessProgram extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> program;
}

final class PayloadKind extends ffi.Union {
  external wire_cst_Payload_PubkeyHash PubkeyHash;

  external wire_cst_Payload_ScriptHash ScriptHash;

  external wire_cst_Payload_WitnessProgram WitnessProgram;
}

final class wire_cst_payload extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PayloadKind kind;
}

final class wire_cst_record_bdk_address_u_32 extends ffi.Struct {
  external wire_cst_bdk_address field0;

  @ffi.Uint32()
  external int field1;
}

final class wire_cst_record_bdk_psbt_transaction_details extends ffi.Struct {
  external wire_cst_bdk_psbt field0;

  external wire_cst_transaction_details field1;
}
