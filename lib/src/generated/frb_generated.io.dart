// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.4.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bitcoin.dart';
import 'api/descriptor.dart';
import 'api/electrum.dart';
import 'api/error.dart';
import 'api/esplora.dart';
import 'api/key.dart';
import 'api/store.dart';
import 'api/tx_builder.dart';
import 'api/types.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class coreApiImplPlatform extends BaseApiImpl<coreWire> {
  coreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_AddressPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddressPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TransactionPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransactionPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkElectrumClientClientPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClientPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BlockingClientPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClientPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UpdatePtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdatePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DerivationPathPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPathPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtendedDescriptorPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptorPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DescriptorPublicKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKeyPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_DescriptorSecretKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKeyPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyMapPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMapPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MnemonicPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39MnemonicPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionFullScanRequestBuilderKeychainKindPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKindPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionFullScanRequestKeychainKindPtr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKindPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionSyncRequestBuilderKeychainKindU32Ptr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32Ptr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionSyncRequestKeychainKindU32Ptr =>
          wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32Ptr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MutexPsbtPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbtPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexPersistedWalletConnectionPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnectionPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexConnectionPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnectionPtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  FutureOr<void> Function(FfiScriptBuf, BigInt)
      dco_decode_DartFn_Inputs_ffi_script_buf_u_64_Output_unit_AnyhowException(
          dynamic raw);

  @protected
  FutureOr<void> Function(KeychainKind, int, FfiScriptBuf)
      dco_decode_DartFn_Inputs_keychain_kind_u_32_ffi_script_buf_Output_unit_AnyhowException(
          dynamic raw);

  @protected
  Object dco_decode_DartOpaque(dynamic raw);

  @protected
  Address dco_decode_RustOpaque_bdk_corebitcoinAddress(dynamic raw);

  @protected
  Transaction dco_decode_RustOpaque_bdk_corebitcoinTransaction(dynamic raw);

  @protected
  BdkElectrumClientClient
      dco_decode_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
          dynamic raw);

  @protected
  BlockingClient dco_decode_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      dynamic raw);

  @protected
  Update dco_decode_RustOpaque_bdk_walletUpdate(dynamic raw);

  @protected
  DerivationPath dco_decode_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      dynamic raw);

  @protected
  ExtendedDescriptor
      dco_decode_RustOpaque_bdk_walletdescriptorExtendedDescriptor(dynamic raw);

  @protected
  DescriptorPublicKey dco_decode_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      dynamic raw);

  @protected
  DescriptorSecretKey dco_decode_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      dynamic raw);

  @protected
  KeyMap dco_decode_RustOpaque_bdk_walletkeysKeyMap(dynamic raw);

  @protected
  Mnemonic dco_decode_RustOpaque_bdk_walletkeysbip39Mnemonic(dynamic raw);

  @protected
  MutexOptionFullScanRequestBuilderKeychainKind
      dco_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
          dynamic raw);

  @protected
  MutexOptionFullScanRequestKeychainKind
      dco_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
          dynamic raw);

  @protected
  MutexOptionSyncRequestBuilderKeychainKindU32
      dco_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
          dynamic raw);

  @protected
  MutexOptionSyncRequestKeychainKindU32
      dco_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
          dynamic raw);

  @protected
  MutexPsbt dco_decode_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
      dynamic raw);

  @protected
  MutexPersistedWalletConnection
      dco_decode_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
          dynamic raw);

  @protected
  MutexConnection
      dco_decode_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressInfo dco_decode_address_info(dynamic raw);

  @protected
  AddressParseError dco_decode_address_parse_error(dynamic raw);

  @protected
  Balance dco_decode_balance(dynamic raw);

  @protected
  Bip32Error dco_decode_bip_32_error(dynamic raw);

  @protected
  Bip39Error dco_decode_bip_39_error(dynamic raw);

  @protected
  BlockId dco_decode_block_id(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  ConfirmationBlockTime dco_decode_box_autoadd_confirmation_block_time(
      dynamic raw);

  @protected
  FeeRate dco_decode_box_autoadd_fee_rate(dynamic raw);

  @protected
  FfiAddress dco_decode_box_autoadd_ffi_address(dynamic raw);

  @protected
  FfiCanonicalTx dco_decode_box_autoadd_ffi_canonical_tx(dynamic raw);

  @protected
  FfiConnection dco_decode_box_autoadd_ffi_connection(dynamic raw);

  @protected
  FfiDerivationPath dco_decode_box_autoadd_ffi_derivation_path(dynamic raw);

  @protected
  FfiDescriptor dco_decode_box_autoadd_ffi_descriptor(dynamic raw);

  @protected
  FfiDescriptorPublicKey dco_decode_box_autoadd_ffi_descriptor_public_key(
      dynamic raw);

  @protected
  FfiDescriptorSecretKey dco_decode_box_autoadd_ffi_descriptor_secret_key(
      dynamic raw);

  @protected
  FfiElectrumClient dco_decode_box_autoadd_ffi_electrum_client(dynamic raw);

  @protected
  FfiEsploraClient dco_decode_box_autoadd_ffi_esplora_client(dynamic raw);

  @protected
  FfiFullScanRequest dco_decode_box_autoadd_ffi_full_scan_request(dynamic raw);

  @protected
  FfiFullScanRequestBuilder
      dco_decode_box_autoadd_ffi_full_scan_request_builder(dynamic raw);

  @protected
  FfiMnemonic dco_decode_box_autoadd_ffi_mnemonic(dynamic raw);

  @protected
  FfiPsbt dco_decode_box_autoadd_ffi_psbt(dynamic raw);

  @protected
  FfiScriptBuf dco_decode_box_autoadd_ffi_script_buf(dynamic raw);

  @protected
  FfiSyncRequest dco_decode_box_autoadd_ffi_sync_request(dynamic raw);

  @protected
  FfiSyncRequestBuilder dco_decode_box_autoadd_ffi_sync_request_builder(
      dynamic raw);

  @protected
  FfiTransaction dco_decode_box_autoadd_ffi_transaction(dynamic raw);

  @protected
  FfiUpdate dco_decode_box_autoadd_ffi_update(dynamic raw);

  @protected
  FfiWallet dco_decode_box_autoadd_ffi_wallet(dynamic raw);

  @protected
  LockTime dco_decode_box_autoadd_lock_time(dynamic raw);

  @protected
  RbfValue dco_decode_box_autoadd_rbf_value(dynamic raw);

  @protected
  SignOptions dco_decode_box_autoadd_sign_options(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  CalculateFeeError dco_decode_calculate_fee_error(dynamic raw);

  @protected
  CannotConnectError dco_decode_cannot_connect_error(dynamic raw);

  @protected
  ChainPosition dco_decode_chain_position(dynamic raw);

  @protected
  ChangeSpendPolicy dco_decode_change_spend_policy(dynamic raw);

  @protected
  ConfirmationBlockTime dco_decode_confirmation_block_time(dynamic raw);

  @protected
  CreateTxError dco_decode_create_tx_error(dynamic raw);

  @protected
  CreateWithPersistError dco_decode_create_with_persist_error(dynamic raw);

  @protected
  DescriptorError dco_decode_descriptor_error(dynamic raw);

  @protected
  DescriptorKeyError dco_decode_descriptor_key_error(dynamic raw);

  @protected
  ElectrumError dco_decode_electrum_error(dynamic raw);

  @protected
  EsploraError dco_decode_esplora_error(dynamic raw);

  @protected
  ExtractTxError dco_decode_extract_tx_error(dynamic raw);

  @protected
  FeeRate dco_decode_fee_rate(dynamic raw);

  @protected
  FfiAddress dco_decode_ffi_address(dynamic raw);

  @protected
  FfiCanonicalTx dco_decode_ffi_canonical_tx(dynamic raw);

  @protected
  FfiConnection dco_decode_ffi_connection(dynamic raw);

  @protected
  FfiDerivationPath dco_decode_ffi_derivation_path(dynamic raw);

  @protected
  FfiDescriptor dco_decode_ffi_descriptor(dynamic raw);

  @protected
  FfiDescriptorPublicKey dco_decode_ffi_descriptor_public_key(dynamic raw);

  @protected
  FfiDescriptorSecretKey dco_decode_ffi_descriptor_secret_key(dynamic raw);

  @protected
  FfiElectrumClient dco_decode_ffi_electrum_client(dynamic raw);

  @protected
  FfiEsploraClient dco_decode_ffi_esplora_client(dynamic raw);

  @protected
  FfiFullScanRequest dco_decode_ffi_full_scan_request(dynamic raw);

  @protected
  FfiFullScanRequestBuilder dco_decode_ffi_full_scan_request_builder(
      dynamic raw);

  @protected
  FfiMnemonic dco_decode_ffi_mnemonic(dynamic raw);

  @protected
  FfiPsbt dco_decode_ffi_psbt(dynamic raw);

  @protected
  FfiScriptBuf dco_decode_ffi_script_buf(dynamic raw);

  @protected
  FfiSyncRequest dco_decode_ffi_sync_request(dynamic raw);

  @protected
  FfiSyncRequestBuilder dco_decode_ffi_sync_request_builder(dynamic raw);

  @protected
  FfiTransaction dco_decode_ffi_transaction(dynamic raw);

  @protected
  FfiUpdate dco_decode_ffi_update(dynamic raw);

  @protected
  FfiWallet dco_decode_ffi_wallet(dynamic raw);

  @protected
  FromScriptError dco_decode_from_script_error(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_isize(dynamic raw);

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw);

  @protected
  List<FfiCanonicalTx> dco_decode_list_ffi_canonical_tx(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<LocalOutput> dco_decode_list_local_output(dynamic raw);

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(FfiScriptBuf, BigInt)> dco_decode_list_record_ffi_script_buf_u_64(
      dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  LoadWithPersistError dco_decode_load_with_persist_error(dynamic raw);

  @protected
  LocalOutput dco_decode_local_output(dynamic raw);

  @protected
  LockTime dco_decode_lock_time(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  FeeRate? dco_decode_opt_box_autoadd_fee_rate(dynamic raw);

  @protected
  FfiCanonicalTx? dco_decode_opt_box_autoadd_ffi_canonical_tx(dynamic raw);

  @protected
  FfiScriptBuf? dco_decode_opt_box_autoadd_ffi_script_buf(dynamic raw);

  @protected
  RbfValue? dco_decode_opt_box_autoadd_rbf_value(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  PsbtError dco_decode_psbt_error(dynamic raw);

  @protected
  PsbtParseError dco_decode_psbt_parse_error(dynamic raw);

  @protected
  RbfValue dco_decode_rbf_value(dynamic raw);

  @protected
  (FfiScriptBuf, BigInt) dco_decode_record_ffi_script_buf_u_64(dynamic raw);

  @protected
  RequestBuilderError dco_decode_request_builder_error(dynamic raw);

  @protected
  SignOptions dco_decode_sign_options(dynamic raw);

  @protected
  SignerError dco_decode_signer_error(dynamic raw);

  @protected
  SqliteError dco_decode_sqlite_error(dynamic raw);

  @protected
  TransactionError dco_decode_transaction_error(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  TxidParseError dco_decode_txid_parse_error(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  WordCount dco_decode_word_count(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer);

  @protected
  Address sse_decode_RustOpaque_bdk_corebitcoinAddress(
      SseDeserializer deserializer);

  @protected
  Transaction sse_decode_RustOpaque_bdk_corebitcoinTransaction(
      SseDeserializer deserializer);

  @protected
  BdkElectrumClientClient
      sse_decode_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
          SseDeserializer deserializer);

  @protected
  BlockingClient sse_decode_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      SseDeserializer deserializer);

  @protected
  Update sse_decode_RustOpaque_bdk_walletUpdate(SseDeserializer deserializer);

  @protected
  DerivationPath sse_decode_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      SseDeserializer deserializer);

  @protected
  ExtendedDescriptor
      sse_decode_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
          SseDeserializer deserializer);

  @protected
  DescriptorPublicKey sse_decode_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      SseDeserializer deserializer);

  @protected
  DescriptorSecretKey sse_decode_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      SseDeserializer deserializer);

  @protected
  KeyMap sse_decode_RustOpaque_bdk_walletkeysKeyMap(
      SseDeserializer deserializer);

  @protected
  Mnemonic sse_decode_RustOpaque_bdk_walletkeysbip39Mnemonic(
      SseDeserializer deserializer);

  @protected
  MutexOptionFullScanRequestBuilderKeychainKind
      sse_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
          SseDeserializer deserializer);

  @protected
  MutexOptionFullScanRequestKeychainKind
      sse_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
          SseDeserializer deserializer);

  @protected
  MutexOptionSyncRequestBuilderKeychainKindU32
      sse_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
          SseDeserializer deserializer);

  @protected
  MutexOptionSyncRequestKeychainKindU32
      sse_decode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
          SseDeserializer deserializer);

  @protected
  MutexPsbt sse_decode_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
      SseDeserializer deserializer);

  @protected
  MutexPersistedWalletConnection
      sse_decode_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
          SseDeserializer deserializer);

  @protected
  MutexConnection
      sse_decode_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressInfo sse_decode_address_info(SseDeserializer deserializer);

  @protected
  AddressParseError sse_decode_address_parse_error(
      SseDeserializer deserializer);

  @protected
  Balance sse_decode_balance(SseDeserializer deserializer);

  @protected
  Bip32Error sse_decode_bip_32_error(SseDeserializer deserializer);

  @protected
  Bip39Error sse_decode_bip_39_error(SseDeserializer deserializer);

  @protected
  BlockId sse_decode_block_id(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  ConfirmationBlockTime sse_decode_box_autoadd_confirmation_block_time(
      SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  FfiAddress sse_decode_box_autoadd_ffi_address(SseDeserializer deserializer);

  @protected
  FfiCanonicalTx sse_decode_box_autoadd_ffi_canonical_tx(
      SseDeserializer deserializer);

  @protected
  FfiConnection sse_decode_box_autoadd_ffi_connection(
      SseDeserializer deserializer);

  @protected
  FfiDerivationPath sse_decode_box_autoadd_ffi_derivation_path(
      SseDeserializer deserializer);

  @protected
  FfiDescriptor sse_decode_box_autoadd_ffi_descriptor(
      SseDeserializer deserializer);

  @protected
  FfiDescriptorPublicKey sse_decode_box_autoadd_ffi_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  FfiDescriptorSecretKey sse_decode_box_autoadd_ffi_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  FfiElectrumClient sse_decode_box_autoadd_ffi_electrum_client(
      SseDeserializer deserializer);

  @protected
  FfiEsploraClient sse_decode_box_autoadd_ffi_esplora_client(
      SseDeserializer deserializer);

  @protected
  FfiFullScanRequest sse_decode_box_autoadd_ffi_full_scan_request(
      SseDeserializer deserializer);

  @protected
  FfiFullScanRequestBuilder
      sse_decode_box_autoadd_ffi_full_scan_request_builder(
          SseDeserializer deserializer);

  @protected
  FfiMnemonic sse_decode_box_autoadd_ffi_mnemonic(SseDeserializer deserializer);

  @protected
  FfiPsbt sse_decode_box_autoadd_ffi_psbt(SseDeserializer deserializer);

  @protected
  FfiScriptBuf sse_decode_box_autoadd_ffi_script_buf(
      SseDeserializer deserializer);

  @protected
  FfiSyncRequest sse_decode_box_autoadd_ffi_sync_request(
      SseDeserializer deserializer);

  @protected
  FfiSyncRequestBuilder sse_decode_box_autoadd_ffi_sync_request_builder(
      SseDeserializer deserializer);

  @protected
  FfiTransaction sse_decode_box_autoadd_ffi_transaction(
      SseDeserializer deserializer);

  @protected
  FfiUpdate sse_decode_box_autoadd_ffi_update(SseDeserializer deserializer);

  @protected
  FfiWallet sse_decode_box_autoadd_ffi_wallet(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_box_autoadd_lock_time(SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_box_autoadd_sign_options(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  CalculateFeeError sse_decode_calculate_fee_error(
      SseDeserializer deserializer);

  @protected
  CannotConnectError sse_decode_cannot_connect_error(
      SseDeserializer deserializer);

  @protected
  ChainPosition sse_decode_chain_position(SseDeserializer deserializer);

  @protected
  ChangeSpendPolicy sse_decode_change_spend_policy(
      SseDeserializer deserializer);

  @protected
  ConfirmationBlockTime sse_decode_confirmation_block_time(
      SseDeserializer deserializer);

  @protected
  CreateTxError sse_decode_create_tx_error(SseDeserializer deserializer);

  @protected
  CreateWithPersistError sse_decode_create_with_persist_error(
      SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_descriptor_error(SseDeserializer deserializer);

  @protected
  DescriptorKeyError sse_decode_descriptor_key_error(
      SseDeserializer deserializer);

  @protected
  ElectrumError sse_decode_electrum_error(SseDeserializer deserializer);

  @protected
  EsploraError sse_decode_esplora_error(SseDeserializer deserializer);

  @protected
  ExtractTxError sse_decode_extract_tx_error(SseDeserializer deserializer);

  @protected
  FeeRate sse_decode_fee_rate(SseDeserializer deserializer);

  @protected
  FfiAddress sse_decode_ffi_address(SseDeserializer deserializer);

  @protected
  FfiCanonicalTx sse_decode_ffi_canonical_tx(SseDeserializer deserializer);

  @protected
  FfiConnection sse_decode_ffi_connection(SseDeserializer deserializer);

  @protected
  FfiDerivationPath sse_decode_ffi_derivation_path(
      SseDeserializer deserializer);

  @protected
  FfiDescriptor sse_decode_ffi_descriptor(SseDeserializer deserializer);

  @protected
  FfiDescriptorPublicKey sse_decode_ffi_descriptor_public_key(
      SseDeserializer deserializer);

  @protected
  FfiDescriptorSecretKey sse_decode_ffi_descriptor_secret_key(
      SseDeserializer deserializer);

  @protected
  FfiElectrumClient sse_decode_ffi_electrum_client(
      SseDeserializer deserializer);

  @protected
  FfiEsploraClient sse_decode_ffi_esplora_client(SseDeserializer deserializer);

  @protected
  FfiFullScanRequest sse_decode_ffi_full_scan_request(
      SseDeserializer deserializer);

  @protected
  FfiFullScanRequestBuilder sse_decode_ffi_full_scan_request_builder(
      SseDeserializer deserializer);

  @protected
  FfiMnemonic sse_decode_ffi_mnemonic(SseDeserializer deserializer);

  @protected
  FfiPsbt sse_decode_ffi_psbt(SseDeserializer deserializer);

  @protected
  FfiScriptBuf sse_decode_ffi_script_buf(SseDeserializer deserializer);

  @protected
  FfiSyncRequest sse_decode_ffi_sync_request(SseDeserializer deserializer);

  @protected
  FfiSyncRequestBuilder sse_decode_ffi_sync_request_builder(
      SseDeserializer deserializer);

  @protected
  FfiTransaction sse_decode_ffi_transaction(SseDeserializer deserializer);

  @protected
  FfiUpdate sse_decode_ffi_update(SseDeserializer deserializer);

  @protected
  FfiWallet sse_decode_ffi_wallet(SseDeserializer deserializer);

  @protected
  FromScriptError sse_decode_from_script_error(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_isize(SseDeserializer deserializer);

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer);

  @protected
  List<FfiCanonicalTx> sse_decode_list_ffi_canonical_tx(
      SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<LocalOutput> sse_decode_list_local_output(SseDeserializer deserializer);

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(FfiScriptBuf, BigInt)> sse_decode_list_record_ffi_script_buf_u_64(
      SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  LoadWithPersistError sse_decode_load_with_persist_error(
      SseDeserializer deserializer);

  @protected
  LocalOutput sse_decode_local_output(SseDeserializer deserializer);

  @protected
  LockTime sse_decode_lock_time(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  FeeRate? sse_decode_opt_box_autoadd_fee_rate(SseDeserializer deserializer);

  @protected
  FfiCanonicalTx? sse_decode_opt_box_autoadd_ffi_canonical_tx(
      SseDeserializer deserializer);

  @protected
  FfiScriptBuf? sse_decode_opt_box_autoadd_ffi_script_buf(
      SseDeserializer deserializer);

  @protected
  RbfValue? sse_decode_opt_box_autoadd_rbf_value(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  PsbtError sse_decode_psbt_error(SseDeserializer deserializer);

  @protected
  PsbtParseError sse_decode_psbt_parse_error(SseDeserializer deserializer);

  @protected
  RbfValue sse_decode_rbf_value(SseDeserializer deserializer);

  @protected
  (FfiScriptBuf, BigInt) sse_decode_record_ffi_script_buf_u_64(
      SseDeserializer deserializer);

  @protected
  RequestBuilderError sse_decode_request_builder_error(
      SseDeserializer deserializer);

  @protected
  SignOptions sse_decode_sign_options(SseDeserializer deserializer);

  @protected
  SignerError sse_decode_signer_error(SseDeserializer deserializer);

  @protected
  SqliteError sse_decode_sqlite_error(SseDeserializer deserializer);

  @protected
  TransactionError sse_decode_transaction_error(SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  TxidParseError sse_decode_txid_parse_error(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(
      AnyhowException raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_confirmation_block_time>
      cst_encode_box_autoadd_confirmation_block_time(
          ConfirmationBlockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_confirmation_block_time();
    cst_api_fill_to_wire_confirmation_block_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_fee_rate> cst_encode_box_autoadd_fee_rate(FeeRate raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_fee_rate();
    cst_api_fill_to_wire_fee_rate(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_address> cst_encode_box_autoadd_ffi_address(
      FfiAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_address();
    cst_api_fill_to_wire_ffi_address(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_canonical_tx>
      cst_encode_box_autoadd_ffi_canonical_tx(FfiCanonicalTx raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_canonical_tx();
    cst_api_fill_to_wire_ffi_canonical_tx(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_connection> cst_encode_box_autoadd_ffi_connection(
      FfiConnection raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_connection();
    cst_api_fill_to_wire_ffi_connection(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_derivation_path>
      cst_encode_box_autoadd_ffi_derivation_path(FfiDerivationPath raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_derivation_path();
    cst_api_fill_to_wire_ffi_derivation_path(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_descriptor> cst_encode_box_autoadd_ffi_descriptor(
      FfiDescriptor raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_descriptor();
    cst_api_fill_to_wire_ffi_descriptor(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_descriptor_public_key>
      cst_encode_box_autoadd_ffi_descriptor_public_key(
          FfiDescriptorPublicKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_descriptor_public_key();
    cst_api_fill_to_wire_ffi_descriptor_public_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>
      cst_encode_box_autoadd_ffi_descriptor_secret_key(
          FfiDescriptorSecretKey raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_descriptor_secret_key();
    cst_api_fill_to_wire_ffi_descriptor_secret_key(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_electrum_client>
      cst_encode_box_autoadd_ffi_electrum_client(FfiElectrumClient raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_electrum_client();
    cst_api_fill_to_wire_ffi_electrum_client(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_esplora_client>
      cst_encode_box_autoadd_ffi_esplora_client(FfiEsploraClient raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_esplora_client();
    cst_api_fill_to_wire_ffi_esplora_client(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_full_scan_request>
      cst_encode_box_autoadd_ffi_full_scan_request(FfiFullScanRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_full_scan_request();
    cst_api_fill_to_wire_ffi_full_scan_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_full_scan_request_builder>
      cst_encode_box_autoadd_ffi_full_scan_request_builder(
          FfiFullScanRequestBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_full_scan_request_builder();
    cst_api_fill_to_wire_ffi_full_scan_request_builder(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_mnemonic> cst_encode_box_autoadd_ffi_mnemonic(
      FfiMnemonic raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_mnemonic();
    cst_api_fill_to_wire_ffi_mnemonic(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_psbt> cst_encode_box_autoadd_ffi_psbt(FfiPsbt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_psbt();
    cst_api_fill_to_wire_ffi_psbt(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_script_buf> cst_encode_box_autoadd_ffi_script_buf(
      FfiScriptBuf raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_script_buf();
    cst_api_fill_to_wire_ffi_script_buf(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_sync_request>
      cst_encode_box_autoadd_ffi_sync_request(FfiSyncRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_sync_request();
    cst_api_fill_to_wire_ffi_sync_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_sync_request_builder>
      cst_encode_box_autoadd_ffi_sync_request_builder(
          FfiSyncRequestBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_sync_request_builder();
    cst_api_fill_to_wire_ffi_sync_request_builder(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_transaction> cst_encode_box_autoadd_ffi_transaction(
      FfiTransaction raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_transaction();
    cst_api_fill_to_wire_ffi_transaction(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_update> cst_encode_box_autoadd_ffi_update(
      FfiUpdate raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_update();
    cst_api_fill_to_wire_ffi_update(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ffi_wallet> cst_encode_box_autoadd_ffi_wallet(
      FfiWallet raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ffi_wallet();
    cst_api_fill_to_wire_ffi_wallet(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lock_time> cst_encode_box_autoadd_lock_time(
      LockTime raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lock_time();
    cst_api_fill_to_wire_lock_time(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_rbf_value> cst_encode_box_autoadd_rbf_value(
      RbfValue raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_rbf_value();
    cst_api_fill_to_wire_rbf_value(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sign_options> cst_encode_box_autoadd_sign_options(
      SignOptions raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sign_options();
    cst_api_fill_to_wire_sign_options(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  int cst_encode_isize(PlatformInt64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_ffi_canonical_tx> cst_encode_list_ffi_canonical_tx(
      List<FfiCanonicalTx> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_ffi_canonical_tx(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_ffi_canonical_tx(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_list_prim_u_8_strict(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_list_prim_u_8_strict(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_local_output> cst_encode_list_local_output(
      List<LocalOutput> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_local_output(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_local_output(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_out_point> cst_encode_list_out_point(
      List<OutPoint> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_out_point(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_out_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64>
      cst_encode_list_record_ffi_script_buf_u_64(
          List<(FfiScriptBuf, BigInt)> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_record_ffi_script_buf_u_64(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_record_ffi_script_buf_u_64(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_in> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_in(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_in(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_out> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_out(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_out(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_fee_rate> cst_encode_opt_box_autoadd_fee_rate(
      FeeRate? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_fee_rate(raw);
  }

  @protected
  ffi.Pointer<wire_cst_ffi_canonical_tx>
      cst_encode_opt_box_autoadd_ffi_canonical_tx(FfiCanonicalTx? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_ffi_canonical_tx(raw);
  }

  @protected
  ffi.Pointer<wire_cst_ffi_script_buf>
      cst_encode_opt_box_autoadd_ffi_script_buf(FfiScriptBuf? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_ffi_script_buf(raw);
  }

  @protected
  ffi.Pointer<wire_cst_rbf_value> cst_encode_opt_box_autoadd_rbf_value(
      RbfValue? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_rbf_value(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  int cst_encode_usize(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_address_info(
      AddressInfo apiObj, wire_cst_address_info wireObj) {
    wireObj.index = cst_encode_u_32(apiObj.index);
    cst_api_fill_to_wire_ffi_address(apiObj.address, wireObj.address);
    wireObj.keychain = cst_encode_keychain_kind(apiObj.keychain);
  }

  @protected
  void cst_api_fill_to_wire_address_parse_error(
      AddressParseError apiObj, wire_cst_address_parse_error wireObj) {
    if (apiObj is AddressParseError_Base58) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is AddressParseError_Bech32) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is AddressParseError_WitnessVersion) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.WitnessVersion.error_message = pre_error_message;
      return;
    }
    if (apiObj is AddressParseError_WitnessProgram) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 3;
      wireObj.kind.WitnessProgram.error_message = pre_error_message;
      return;
    }
    if (apiObj is AddressParseError_UnknownHrp) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is AddressParseError_LegacyAddressTooLong) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is AddressParseError_InvalidBase58PayloadLength) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is AddressParseError_InvalidLegacyPrefix) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is AddressParseError_NetworkValidation) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is AddressParseError_OtherAddressParseErr) {
      wireObj.tag = 9;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_balance(Balance apiObj, wire_cst_balance wireObj) {
    wireObj.immature = cst_encode_u_64(apiObj.immature);
    wireObj.trusted_pending = cst_encode_u_64(apiObj.trustedPending);
    wireObj.untrusted_pending = cst_encode_u_64(apiObj.untrustedPending);
    wireObj.confirmed = cst_encode_u_64(apiObj.confirmed);
    wireObj.spendable = cst_encode_u_64(apiObj.spendable);
    wireObj.total = cst_encode_u_64(apiObj.total);
  }

  @protected
  void cst_api_fill_to_wire_bip_32_error(
      Bip32Error apiObj, wire_cst_bip_32_error wireObj) {
    if (apiObj is Bip32Error_CannotDeriveFromHardenedKey) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Bip32Error_Secp256k1) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.Secp256k1.error_message = pre_error_message;
      return;
    }
    if (apiObj is Bip32Error_InvalidChildNumber) {
      var pre_child_number = cst_encode_u_32(apiObj.childNumber);
      wireObj.tag = 2;
      wireObj.kind.InvalidChildNumber.child_number = pre_child_number;
      return;
    }
    if (apiObj is Bip32Error_InvalidChildNumberFormat) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is Bip32Error_InvalidDerivationPathFormat) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is Bip32Error_UnknownVersion) {
      var pre_version = cst_encode_String(apiObj.version);
      wireObj.tag = 5;
      wireObj.kind.UnknownVersion.version = pre_version;
      return;
    }
    if (apiObj is Bip32Error_WrongExtendedKeyLength) {
      var pre_length = cst_encode_u_32(apiObj.length);
      wireObj.tag = 6;
      wireObj.kind.WrongExtendedKeyLength.length = pre_length;
      return;
    }
    if (apiObj is Bip32Error_Base58) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 7;
      wireObj.kind.Base58.error_message = pre_error_message;
      return;
    }
    if (apiObj is Bip32Error_Hex) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 8;
      wireObj.kind.Hex.error_message = pre_error_message;
      return;
    }
    if (apiObj is Bip32Error_InvalidPublicKeyHexLength) {
      var pre_length = cst_encode_u_32(apiObj.length);
      wireObj.tag = 9;
      wireObj.kind.InvalidPublicKeyHexLength.length = pre_length;
      return;
    }
    if (apiObj is Bip32Error_UnknownError) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 10;
      wireObj.kind.UnknownError.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bip_39_error(
      Bip39Error apiObj, wire_cst_bip_39_error wireObj) {
    if (apiObj is Bip39Error_BadWordCount) {
      var pre_word_count = cst_encode_u_64(apiObj.wordCount);
      wireObj.tag = 0;
      wireObj.kind.BadWordCount.word_count = pre_word_count;
      return;
    }
    if (apiObj is Bip39Error_UnknownWord) {
      var pre_index = cst_encode_u_64(apiObj.index);
      wireObj.tag = 1;
      wireObj.kind.UnknownWord.index = pre_index;
      return;
    }
    if (apiObj is Bip39Error_BadEntropyBitCount) {
      var pre_bit_count = cst_encode_u_64(apiObj.bitCount);
      wireObj.tag = 2;
      wireObj.kind.BadEntropyBitCount.bit_count = pre_bit_count;
      return;
    }
    if (apiObj is Bip39Error_InvalidChecksum) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is Bip39Error_AmbiguousLanguages) {
      var pre_languages = cst_encode_String(apiObj.languages);
      wireObj.tag = 4;
      wireObj.kind.AmbiguousLanguages.languages = pre_languages;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_block_id(
      BlockId apiObj, wire_cst_block_id wireObj) {
    wireObj.height = cst_encode_u_32(apiObj.height);
    wireObj.hash = cst_encode_String(apiObj.hash);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_confirmation_block_time(
      ConfirmationBlockTime apiObj,
      ffi.Pointer<wire_cst_confirmation_block_time> wireObj) {
    cst_api_fill_to_wire_confirmation_block_time(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_fee_rate(
      FeeRate apiObj, ffi.Pointer<wire_cst_fee_rate> wireObj) {
    cst_api_fill_to_wire_fee_rate(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_address(
      FfiAddress apiObj, ffi.Pointer<wire_cst_ffi_address> wireObj) {
    cst_api_fill_to_wire_ffi_address(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_canonical_tx(
      FfiCanonicalTx apiObj, ffi.Pointer<wire_cst_ffi_canonical_tx> wireObj) {
    cst_api_fill_to_wire_ffi_canonical_tx(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_connection(
      FfiConnection apiObj, ffi.Pointer<wire_cst_ffi_connection> wireObj) {
    cst_api_fill_to_wire_ffi_connection(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_derivation_path(
      FfiDerivationPath apiObj,
      ffi.Pointer<wire_cst_ffi_derivation_path> wireObj) {
    cst_api_fill_to_wire_ffi_derivation_path(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_descriptor(
      FfiDescriptor apiObj, ffi.Pointer<wire_cst_ffi_descriptor> wireObj) {
    cst_api_fill_to_wire_ffi_descriptor(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_descriptor_public_key(
      FfiDescriptorPublicKey apiObj,
      ffi.Pointer<wire_cst_ffi_descriptor_public_key> wireObj) {
    cst_api_fill_to_wire_ffi_descriptor_public_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_descriptor_secret_key(
      FfiDescriptorSecretKey apiObj,
      ffi.Pointer<wire_cst_ffi_descriptor_secret_key> wireObj) {
    cst_api_fill_to_wire_ffi_descriptor_secret_key(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_electrum_client(
      FfiElectrumClient apiObj,
      ffi.Pointer<wire_cst_ffi_electrum_client> wireObj) {
    cst_api_fill_to_wire_ffi_electrum_client(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_esplora_client(
      FfiEsploraClient apiObj,
      ffi.Pointer<wire_cst_ffi_esplora_client> wireObj) {
    cst_api_fill_to_wire_ffi_esplora_client(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_full_scan_request(
      FfiFullScanRequest apiObj,
      ffi.Pointer<wire_cst_ffi_full_scan_request> wireObj) {
    cst_api_fill_to_wire_ffi_full_scan_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_full_scan_request_builder(
      FfiFullScanRequestBuilder apiObj,
      ffi.Pointer<wire_cst_ffi_full_scan_request_builder> wireObj) {
    cst_api_fill_to_wire_ffi_full_scan_request_builder(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_mnemonic(
      FfiMnemonic apiObj, ffi.Pointer<wire_cst_ffi_mnemonic> wireObj) {
    cst_api_fill_to_wire_ffi_mnemonic(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_psbt(
      FfiPsbt apiObj, ffi.Pointer<wire_cst_ffi_psbt> wireObj) {
    cst_api_fill_to_wire_ffi_psbt(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_script_buf(
      FfiScriptBuf apiObj, ffi.Pointer<wire_cst_ffi_script_buf> wireObj) {
    cst_api_fill_to_wire_ffi_script_buf(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_sync_request(
      FfiSyncRequest apiObj, ffi.Pointer<wire_cst_ffi_sync_request> wireObj) {
    cst_api_fill_to_wire_ffi_sync_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_sync_request_builder(
      FfiSyncRequestBuilder apiObj,
      ffi.Pointer<wire_cst_ffi_sync_request_builder> wireObj) {
    cst_api_fill_to_wire_ffi_sync_request_builder(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_transaction(
      FfiTransaction apiObj, ffi.Pointer<wire_cst_ffi_transaction> wireObj) {
    cst_api_fill_to_wire_ffi_transaction(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_update(
      FfiUpdate apiObj, ffi.Pointer<wire_cst_ffi_update> wireObj) {
    cst_api_fill_to_wire_ffi_update(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ffi_wallet(
      FfiWallet apiObj, ffi.Pointer<wire_cst_ffi_wallet> wireObj) {
    cst_api_fill_to_wire_ffi_wallet(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lock_time(
      LockTime apiObj, ffi.Pointer<wire_cst_lock_time> wireObj) {
    cst_api_fill_to_wire_lock_time(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_rbf_value(
      RbfValue apiObj, ffi.Pointer<wire_cst_rbf_value> wireObj) {
    cst_api_fill_to_wire_rbf_value(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sign_options(
      SignOptions apiObj, ffi.Pointer<wire_cst_sign_options> wireObj) {
    cst_api_fill_to_wire_sign_options(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_calculate_fee_error(
      CalculateFeeError apiObj, wire_cst_calculate_fee_error wireObj) {
    if (apiObj is CalculateFeeError_Generic) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Generic.error_message = pre_error_message;
      return;
    }
    if (apiObj is CalculateFeeError_MissingTxOut) {
      var pre_out_points = cst_encode_list_out_point(apiObj.outPoints);
      wireObj.tag = 1;
      wireObj.kind.MissingTxOut.out_points = pre_out_points;
      return;
    }
    if (apiObj is CalculateFeeError_NegativeFee) {
      var pre_amount = cst_encode_String(apiObj.amount);
      wireObj.tag = 2;
      wireObj.kind.NegativeFee.amount = pre_amount;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_cannot_connect_error(
      CannotConnectError apiObj, wire_cst_cannot_connect_error wireObj) {
    if (apiObj is CannotConnectError_Include) {
      var pre_height = cst_encode_u_32(apiObj.height);
      wireObj.tag = 0;
      wireObj.kind.Include.height = pre_height;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_chain_position(
      ChainPosition apiObj, wire_cst_chain_position wireObj) {
    if (apiObj is ChainPosition_Confirmed) {
      var pre_confirmation_block_time =
          cst_encode_box_autoadd_confirmation_block_time(
              apiObj.confirmationBlockTime);
      wireObj.tag = 0;
      wireObj.kind.Confirmed.confirmation_block_time =
          pre_confirmation_block_time;
      return;
    }
    if (apiObj is ChainPosition_Unconfirmed) {
      var pre_timestamp = cst_encode_u_64(apiObj.timestamp);
      wireObj.tag = 1;
      wireObj.kind.Unconfirmed.timestamp = pre_timestamp;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_confirmation_block_time(
      ConfirmationBlockTime apiObj, wire_cst_confirmation_block_time wireObj) {
    cst_api_fill_to_wire_block_id(apiObj.blockId, wireObj.block_id);
    wireObj.confirmation_time = cst_encode_u_64(apiObj.confirmationTime);
  }

  @protected
  void cst_api_fill_to_wire_create_tx_error(
      CreateTxError apiObj, wire_cst_create_tx_error wireObj) {
    if (apiObj is CreateTxError_Generic) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Generic.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateTxError_Descriptor) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.Descriptor.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateTxError_Policy) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.Policy.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateTxError_SpendingPolicyRequired) {
      var pre_kind = cst_encode_String(apiObj.kind);
      wireObj.tag = 3;
      wireObj.kind.SpendingPolicyRequired.kind = pre_kind;
      return;
    }
    if (apiObj is CreateTxError_Version0) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is CreateTxError_Version1Csv) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is CreateTxError_LockTime) {
      var pre_requested_time = cst_encode_String(apiObj.requestedTime);
      var pre_required_time = cst_encode_String(apiObj.requiredTime);
      wireObj.tag = 6;
      wireObj.kind.LockTime.requested_time = pre_requested_time;
      wireObj.kind.LockTime.required_time = pre_required_time;
      return;
    }
    if (apiObj is CreateTxError_RbfSequence) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is CreateTxError_RbfSequenceCsv) {
      var pre_rbf = cst_encode_String(apiObj.rbf);
      var pre_csv = cst_encode_String(apiObj.csv);
      wireObj.tag = 8;
      wireObj.kind.RbfSequenceCsv.rbf = pre_rbf;
      wireObj.kind.RbfSequenceCsv.csv = pre_csv;
      return;
    }
    if (apiObj is CreateTxError_FeeTooLow) {
      var pre_fee_required = cst_encode_String(apiObj.feeRequired);
      wireObj.tag = 9;
      wireObj.kind.FeeTooLow.fee_required = pre_fee_required;
      return;
    }
    if (apiObj is CreateTxError_FeeRateTooLow) {
      var pre_fee_rate_required = cst_encode_String(apiObj.feeRateRequired);
      wireObj.tag = 10;
      wireObj.kind.FeeRateTooLow.fee_rate_required = pre_fee_rate_required;
      return;
    }
    if (apiObj is CreateTxError_NoUtxosSelected) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is CreateTxError_OutputBelowDustLimit) {
      var pre_index = cst_encode_u_64(apiObj.index);
      wireObj.tag = 12;
      wireObj.kind.OutputBelowDustLimit.index = pre_index;
      return;
    }
    if (apiObj is CreateTxError_ChangePolicyDescriptor) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is CreateTxError_CoinSelection) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 14;
      wireObj.kind.CoinSelection.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateTxError_InsufficientFunds) {
      var pre_needed = cst_encode_u_64(apiObj.needed);
      var pre_available = cst_encode_u_64(apiObj.available);
      wireObj.tag = 15;
      wireObj.kind.InsufficientFunds.needed = pre_needed;
      wireObj.kind.InsufficientFunds.available = pre_available;
      return;
    }
    if (apiObj is CreateTxError_NoRecipients) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is CreateTxError_Psbt) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 17;
      wireObj.kind.Psbt.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateTxError_MissingKeyOrigin) {
      var pre_key = cst_encode_String(apiObj.key);
      wireObj.tag = 18;
      wireObj.kind.MissingKeyOrigin.key = pre_key;
      return;
    }
    if (apiObj is CreateTxError_UnknownUtxo) {
      var pre_outpoint = cst_encode_String(apiObj.outpoint);
      wireObj.tag = 19;
      wireObj.kind.UnknownUtxo.outpoint = pre_outpoint;
      return;
    }
    if (apiObj is CreateTxError_MissingNonWitnessUtxo) {
      var pre_outpoint = cst_encode_String(apiObj.outpoint);
      wireObj.tag = 20;
      wireObj.kind.MissingNonWitnessUtxo.outpoint = pre_outpoint;
      return;
    }
    if (apiObj is CreateTxError_MiniscriptPsbt) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 21;
      wireObj.kind.MiniscriptPsbt.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_create_with_persist_error(
      CreateWithPersistError apiObj,
      wire_cst_create_with_persist_error wireObj) {
    if (apiObj is CreateWithPersistError_Persist) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Persist.error_message = pre_error_message;
      return;
    }
    if (apiObj is CreateWithPersistError_DataAlreadyExists) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is CreateWithPersistError_Descriptor) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.Descriptor.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_descriptor_error(
      DescriptorError apiObj, wire_cst_descriptor_error wireObj) {
    if (apiObj is DescriptorError_InvalidHdKeyPath) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DescriptorError_MissingPrivateData) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorChecksum) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DescriptorError_HardenedDerivationXpub) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DescriptorError_MultiPath) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is DescriptorError_Key) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 5;
      wireObj.kind.Key.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Generic) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 6;
      wireObj.kind.Generic.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Policy) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 7;
      wireObj.kind.Policy.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorCharacter) {
      var pre_charector = cst_encode_String(apiObj.charector);
      wireObj.tag = 8;
      wireObj.kind.InvalidDescriptorCharacter.charector = pre_charector;
      return;
    }
    if (apiObj is DescriptorError_Bip32) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 9;
      wireObj.kind.Bip32.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Base58) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 10;
      wireObj.kind.Base58.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Pk) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 11;
      wireObj.kind.Pk.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Miniscript) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 12;
      wireObj.kind.Miniscript.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_Hex) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 13;
      wireObj.kind.Hex.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorError_ExternalAndInternalAreTheSame) {
      wireObj.tag = 14;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_descriptor_key_error(
      DescriptorKeyError apiObj, wire_cst_descriptor_key_error wireObj) {
    if (apiObj is DescriptorKeyError_Parse) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Parse.error_message = pre_error_message;
      return;
    }
    if (apiObj is DescriptorKeyError_InvalidKeyType) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DescriptorKeyError_Bip32) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.Bip32.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_electrum_error(
      ElectrumError apiObj, wire_cst_electrum_error wireObj) {
    if (apiObj is ElectrumError_IOError) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.IOError.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_Json) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.Json.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_Hex) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.Hex.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_Protocol) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 3;
      wireObj.kind.Protocol.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_Bitcoin) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 4;
      wireObj.kind.Bitcoin.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_AlreadySubscribed) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is ElectrumError_NotSubscribed) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is ElectrumError_InvalidResponse) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 7;
      wireObj.kind.InvalidResponse.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_Message) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 8;
      wireObj.kind.Message.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_InvalidDNSNameError) {
      var pre_domain = cst_encode_String(apiObj.domain);
      wireObj.tag = 9;
      wireObj.kind.InvalidDNSNameError.domain = pre_domain;
      return;
    }
    if (apiObj is ElectrumError_MissingDomain) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is ElectrumError_AllAttemptsErrored) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is ElectrumError_SharedIOError) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 12;
      wireObj.kind.SharedIOError.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_CouldntLockReader) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is ElectrumError_Mpsc) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is ElectrumError_CouldNotCreateConnection) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 15;
      wireObj.kind.CouldNotCreateConnection.error_message = pre_error_message;
      return;
    }
    if (apiObj is ElectrumError_RequestAlreadyConsumed) {
      wireObj.tag = 16;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_esplora_error(
      EsploraError apiObj, wire_cst_esplora_error wireObj) {
    if (apiObj is EsploraError_Minreq) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Minreq.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_HttpResponse) {
      var pre_status = cst_encode_u_16(apiObj.status);
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.HttpResponse.status = pre_status;
      wireObj.kind.HttpResponse.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_Parsing) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.Parsing.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_StatusCode) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 3;
      wireObj.kind.StatusCode.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_BitcoinEncoding) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 4;
      wireObj.kind.BitcoinEncoding.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_HexToArray) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 5;
      wireObj.kind.HexToArray.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_HexToBytes) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 6;
      wireObj.kind.HexToBytes.error_message = pre_error_message;
      return;
    }
    if (apiObj is EsploraError_TransactionNotFound) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is EsploraError_HeaderHeightNotFound) {
      var pre_height = cst_encode_u_32(apiObj.height);
      wireObj.tag = 8;
      wireObj.kind.HeaderHeightNotFound.height = pre_height;
      return;
    }
    if (apiObj is EsploraError_HeaderHashNotFound) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is EsploraError_InvalidHttpHeaderName) {
      var pre_name = cst_encode_String(apiObj.name);
      wireObj.tag = 10;
      wireObj.kind.InvalidHttpHeaderName.name = pre_name;
      return;
    }
    if (apiObj is EsploraError_InvalidHttpHeaderValue) {
      var pre_value = cst_encode_String(apiObj.value);
      wireObj.tag = 11;
      wireObj.kind.InvalidHttpHeaderValue.value = pre_value;
      return;
    }
    if (apiObj is EsploraError_RequestAlreadyConsumed) {
      wireObj.tag = 12;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_extract_tx_error(
      ExtractTxError apiObj, wire_cst_extract_tx_error wireObj) {
    if (apiObj is ExtractTxError_AbsurdFeeRate) {
      var pre_fee_rate = cst_encode_u_64(apiObj.feeRate);
      wireObj.tag = 0;
      wireObj.kind.AbsurdFeeRate.fee_rate = pre_fee_rate;
      return;
    }
    if (apiObj is ExtractTxError_MissingInputValue) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is ExtractTxError_SendingTooMuch) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is ExtractTxError_OtherExtractTxErr) {
      wireObj.tag = 3;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_fee_rate(
      FeeRate apiObj, wire_cst_fee_rate wireObj) {
    wireObj.sat_kwu = cst_encode_u_64(apiObj.satKwu);
  }

  @protected
  void cst_api_fill_to_wire_ffi_address(
      FfiAddress apiObj, wire_cst_ffi_address wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_bdk_corebitcoinAddress(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_canonical_tx(
      FfiCanonicalTx apiObj, wire_cst_ffi_canonical_tx wireObj) {
    cst_api_fill_to_wire_ffi_transaction(
        apiObj.transaction, wireObj.transaction);
    cst_api_fill_to_wire_chain_position(
        apiObj.chainPosition, wireObj.chain_position);
  }

  @protected
  void cst_api_fill_to_wire_ffi_connection(
      FfiConnection apiObj, wire_cst_ffi_connection wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_derivation_path(
      FfiDerivationPath apiObj, wire_cst_ffi_derivation_path wireObj) {
    wireObj.opaque = cst_encode_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
        apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_descriptor(
      FfiDescriptor apiObj, wire_cst_ffi_descriptor wireObj) {
    wireObj.extended_descriptor =
        cst_encode_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
            apiObj.extendedDescriptor);
    wireObj.key_map = cst_encode_RustOpaque_bdk_walletkeysKeyMap(apiObj.keyMap);
  }

  @protected
  void cst_api_fill_to_wire_ffi_descriptor_public_key(
      FfiDescriptorPublicKey apiObj,
      wire_cst_ffi_descriptor_public_key wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_walletkeysDescriptorPublicKey(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_descriptor_secret_key(
      FfiDescriptorSecretKey apiObj,
      wire_cst_ffi_descriptor_secret_key wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_walletkeysDescriptorSecretKey(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_electrum_client(
      FfiElectrumClient apiObj, wire_cst_ffi_electrum_client wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
            apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_esplora_client(
      FfiEsploraClient apiObj, wire_cst_ffi_esplora_client wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_esploraesplora_clientBlockingClient(
            apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_full_scan_request(
      FfiFullScanRequest apiObj, wire_cst_ffi_full_scan_request wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_full_scan_request_builder(
      FfiFullScanRequestBuilder apiObj,
      wire_cst_ffi_full_scan_request_builder wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_mnemonic(
      FfiMnemonic apiObj, wire_cst_ffi_mnemonic wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_walletkeysbip39Mnemonic(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_psbt(
      FfiPsbt apiObj, wire_cst_ffi_psbt wireObj) {
    wireObj.opaque = cst_encode_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
        apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_script_buf(
      FfiScriptBuf apiObj, wire_cst_ffi_script_buf wireObj) {
    wireObj.bytes = cst_encode_list_prim_u_8_strict(apiObj.bytes);
  }

  @protected
  void cst_api_fill_to_wire_ffi_sync_request(
      FfiSyncRequest apiObj, wire_cst_ffi_sync_request wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_sync_request_builder(
      FfiSyncRequestBuilder apiObj, wire_cst_ffi_sync_request_builder wireObj) {
    wireObj.field0 =
        cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_transaction(
      FfiTransaction apiObj, wire_cst_ffi_transaction wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_bdk_corebitcoinTransaction(apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_ffi_update(
      FfiUpdate apiObj, wire_cst_ffi_update wireObj) {
    wireObj.field0 = cst_encode_RustOpaque_bdk_walletUpdate(apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_ffi_wallet(
      FfiWallet apiObj, wire_cst_ffi_wallet wireObj) {
    wireObj.opaque =
        cst_encode_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
            apiObj.opaque);
  }

  @protected
  void cst_api_fill_to_wire_from_script_error(
      FromScriptError apiObj, wire_cst_from_script_error wireObj) {
    if (apiObj is FromScriptError_UnrecognizedScript) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is FromScriptError_WitnessProgram) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.WitnessProgram.error_message = pre_error_message;
      return;
    }
    if (apiObj is FromScriptError_WitnessVersion) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 2;
      wireObj.kind.WitnessVersion.error_message = pre_error_message;
      return;
    }
    if (apiObj is FromScriptError_OtherFromScriptErr) {
      wireObj.tag = 3;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_load_with_persist_error(
      LoadWithPersistError apiObj, wire_cst_load_with_persist_error wireObj) {
    if (apiObj is LoadWithPersistError_Persist) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.Persist.error_message = pre_error_message;
      return;
    }
    if (apiObj is LoadWithPersistError_InvalidChangeSet) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.InvalidChangeSet.error_message = pre_error_message;
      return;
    }
    if (apiObj is LoadWithPersistError_CouldNotLoad) {
      wireObj.tag = 2;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_local_output(
      LocalOutput apiObj, wire_cst_local_output wireObj) {
    cst_api_fill_to_wire_out_point(apiObj.outpoint, wireObj.outpoint);
    cst_api_fill_to_wire_tx_out(apiObj.txout, wireObj.txout);
    wireObj.keychain = cst_encode_keychain_kind(apiObj.keychain);
    wireObj.is_spent = cst_encode_bool(apiObj.isSpent);
  }

  @protected
  void cst_api_fill_to_wire_lock_time(
      LockTime apiObj, wire_cst_lock_time wireObj) {
    if (apiObj is LockTime_Blocks) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Blocks.field0 = pre_field0;
      return;
    }
    if (apiObj is LockTime_Seconds) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Seconds.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    wireObj.txid = cst_encode_String(apiObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_psbt_error(
      PsbtError apiObj, wire_cst_psbt_error wireObj) {
    if (apiObj is PsbtError_InvalidMagic) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is PsbtError_MissingUtxo) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is PsbtError_InvalidSeparator) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is PsbtError_PsbtUtxoOutOfBounds) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is PsbtError_InvalidKey) {
      var pre_key = cst_encode_String(apiObj.key);
      wireObj.tag = 4;
      wireObj.kind.InvalidKey.key = pre_key;
      return;
    }
    if (apiObj is PsbtError_InvalidProprietaryKey) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is PsbtError_DuplicateKey) {
      var pre_key = cst_encode_String(apiObj.key);
      wireObj.tag = 6;
      wireObj.kind.DuplicateKey.key = pre_key;
      return;
    }
    if (apiObj is PsbtError_UnsignedTxHasScriptSigs) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is PsbtError_UnsignedTxHasScriptWitnesses) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is PsbtError_MustHaveUnsignedTx) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is PsbtError_NoMorePairs) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is PsbtError_UnexpectedUnsignedTx) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is PsbtError_NonStandardSighashType) {
      var pre_sighash = cst_encode_u_32(apiObj.sighash);
      wireObj.tag = 12;
      wireObj.kind.NonStandardSighashType.sighash = pre_sighash;
      return;
    }
    if (apiObj is PsbtError_InvalidHash) {
      var pre_hash = cst_encode_String(apiObj.hash);
      wireObj.tag = 13;
      wireObj.kind.InvalidHash.hash = pre_hash;
      return;
    }
    if (apiObj is PsbtError_InvalidPreimageHashPair) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is PsbtError_CombineInconsistentKeySources) {
      var pre_xpub = cst_encode_String(apiObj.xpub);
      wireObj.tag = 15;
      wireObj.kind.CombineInconsistentKeySources.xpub = pre_xpub;
      return;
    }
    if (apiObj is PsbtError_ConsensusEncoding) {
      var pre_encoding_error = cst_encode_String(apiObj.encodingError);
      wireObj.tag = 16;
      wireObj.kind.ConsensusEncoding.encoding_error = pre_encoding_error;
      return;
    }
    if (apiObj is PsbtError_NegativeFee) {
      wireObj.tag = 17;
      return;
    }
    if (apiObj is PsbtError_FeeOverflow) {
      wireObj.tag = 18;
      return;
    }
    if (apiObj is PsbtError_InvalidPublicKey) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 19;
      wireObj.kind.InvalidPublicKey.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_InvalidSecp256k1PublicKey) {
      var pre_secp256k1_error = cst_encode_String(apiObj.secp256K1Error);
      wireObj.tag = 20;
      wireObj.kind.InvalidSecp256k1PublicKey.secp256k1_error =
          pre_secp256k1_error;
      return;
    }
    if (apiObj is PsbtError_InvalidXOnlyPublicKey) {
      wireObj.tag = 21;
      return;
    }
    if (apiObj is PsbtError_InvalidEcdsaSignature) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 22;
      wireObj.kind.InvalidEcdsaSignature.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_InvalidTaprootSignature) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 23;
      wireObj.kind.InvalidTaprootSignature.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_InvalidControlBlock) {
      wireObj.tag = 24;
      return;
    }
    if (apiObj is PsbtError_InvalidLeafVersion) {
      wireObj.tag = 25;
      return;
    }
    if (apiObj is PsbtError_Taproot) {
      wireObj.tag = 26;
      return;
    }
    if (apiObj is PsbtError_TapTree) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 27;
      wireObj.kind.TapTree.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_XPubKey) {
      wireObj.tag = 28;
      return;
    }
    if (apiObj is PsbtError_Version) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 29;
      wireObj.kind.Version.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_PartialDataConsumption) {
      wireObj.tag = 30;
      return;
    }
    if (apiObj is PsbtError_Io) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 31;
      wireObj.kind.Io.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtError_OtherPsbtErr) {
      wireObj.tag = 32;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_psbt_parse_error(
      PsbtParseError apiObj, wire_cst_psbt_parse_error wireObj) {
    if (apiObj is PsbtParseError_PsbtEncoding) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 0;
      wireObj.kind.PsbtEncoding.error_message = pre_error_message;
      return;
    }
    if (apiObj is PsbtParseError_Base64Encoding) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 1;
      wireObj.kind.Base64Encoding.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_rbf_value(
      RbfValue apiObj, wire_cst_rbf_value wireObj) {
    if (apiObj is RbfValue_RbfDefault) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is RbfValue_Value) {
      var pre_field0 = cst_encode_u_32(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Value.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_record_ffi_script_buf_u_64(
      (FfiScriptBuf, BigInt) apiObj,
      wire_cst_record_ffi_script_buf_u_64 wireObj) {
    cst_api_fill_to_wire_ffi_script_buf(apiObj.$1, wireObj.field0);
    wireObj.field1 = cst_encode_u_64(apiObj.$2);
  }

  @protected
  void cst_api_fill_to_wire_sign_options(
      SignOptions apiObj, wire_cst_sign_options wireObj) {
    wireObj.trust_witness_utxo = cst_encode_bool(apiObj.trustWitnessUtxo);
    wireObj.assume_height =
        cst_encode_opt_box_autoadd_u_32(apiObj.assumeHeight);
    wireObj.allow_all_sighashes = cst_encode_bool(apiObj.allowAllSighashes);
    wireObj.try_finalize = cst_encode_bool(apiObj.tryFinalize);
    wireObj.sign_with_tap_internal_key =
        cst_encode_bool(apiObj.signWithTapInternalKey);
    wireObj.allow_grinding = cst_encode_bool(apiObj.allowGrinding);
  }

  @protected
  void cst_api_fill_to_wire_signer_error(
      SignerError apiObj, wire_cst_signer_error wireObj) {
    if (apiObj is SignerError_MissingKey) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is SignerError_InvalidKey) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is SignerError_UserCanceled) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is SignerError_InputIndexOutOfRange) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is SignerError_MissingNonWitnessUtxo) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is SignerError_InvalidNonWitnessUtxo) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is SignerError_MissingWitnessUtxo) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is SignerError_MissingWitnessScript) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is SignerError_MissingHdKeypath) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is SignerError_NonStandardSighash) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is SignerError_InvalidSighash) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is SignerError_SighashP2wpkh) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 11;
      wireObj.kind.SighashP2wpkh.error_message = pre_error_message;
      return;
    }
    if (apiObj is SignerError_SighashTaproot) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 12;
      wireObj.kind.SighashTaproot.error_message = pre_error_message;
      return;
    }
    if (apiObj is SignerError_TxInputsIndexError) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 13;
      wireObj.kind.TxInputsIndexError.error_message = pre_error_message;
      return;
    }
    if (apiObj is SignerError_MiniscriptPsbt) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 14;
      wireObj.kind.MiniscriptPsbt.error_message = pre_error_message;
      return;
    }
    if (apiObj is SignerError_External) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 15;
      wireObj.kind.External.error_message = pre_error_message;
      return;
    }
    if (apiObj is SignerError_Psbt) {
      var pre_error_message = cst_encode_String(apiObj.errorMessage);
      wireObj.tag = 16;
      wireObj.kind.Psbt.error_message = pre_error_message;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_sqlite_error(
      SqliteError apiObj, wire_cst_sqlite_error wireObj) {
    if (apiObj is SqliteError_Sqlite) {
      var pre_rusqlite_error = cst_encode_String(apiObj.rusqliteError);
      wireObj.tag = 0;
      wireObj.kind.Sqlite.rusqlite_error = pre_rusqlite_error;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_transaction_error(
      TransactionError apiObj, wire_cst_transaction_error wireObj) {
    if (apiObj is TransactionError_Io) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is TransactionError_OversizedVectorAllocation) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is TransactionError_InvalidChecksum) {
      var pre_expected = cst_encode_String(apiObj.expected);
      var pre_actual = cst_encode_String(apiObj.actual);
      wireObj.tag = 2;
      wireObj.kind.InvalidChecksum.expected = pre_expected;
      wireObj.kind.InvalidChecksum.actual = pre_actual;
      return;
    }
    if (apiObj is TransactionError_NonMinimalVarInt) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is TransactionError_ParseFailed) {
      wireObj.tag = 4;
      return;
    }
    if (apiObj is TransactionError_UnsupportedSegwitFlag) {
      var pre_flag = cst_encode_u_8(apiObj.flag);
      wireObj.tag = 5;
      wireObj.kind.UnsupportedSegwitFlag.flag = pre_flag;
      return;
    }
    if (apiObj is TransactionError_OtherTransactionErr) {
      wireObj.tag = 6;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_tx_in(TxIn apiObj, wire_cst_tx_in wireObj) {
    cst_api_fill_to_wire_out_point(
        apiObj.previousOutput, wireObj.previous_output);
    cst_api_fill_to_wire_ffi_script_buf(apiObj.scriptSig, wireObj.script_sig);
    wireObj.sequence = cst_encode_u_32(apiObj.sequence);
    wireObj.witness = cst_encode_list_list_prim_u_8_strict(apiObj.witness);
  }

  @protected
  void cst_api_fill_to_wire_tx_out(TxOut apiObj, wire_cst_tx_out wireObj) {
    wireObj.value = cst_encode_u_64(apiObj.value);
    cst_api_fill_to_wire_ffi_script_buf(
        apiObj.scriptPubkey, wireObj.script_pubkey);
  }

  @protected
  void cst_api_fill_to_wire_txid_parse_error(
      TxidParseError apiObj, wire_cst_txid_parse_error wireObj) {
    if (apiObj is TxidParseError_InvalidTxid) {
      var pre_txid = cst_encode_String(apiObj.txid);
      wireObj.tag = 0;
      wireObj.kind.InvalidTxid.txid = pre_txid;
      return;
    }
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_ffi_script_buf_u_64_Output_unit_AnyhowException(
          FutureOr<void> Function(FfiScriptBuf, BigInt) raw);

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_keychain_kind_u_32_ffi_script_buf_Output_unit_AnyhowException(
          FutureOr<void> Function(KeychainKind, int, FfiScriptBuf) raw);

  @protected
  PlatformPointer cst_encode_DartOpaque(Object raw);

  @protected
  int cst_encode_RustOpaque_bdk_corebitcoinAddress(Address raw);

  @protected
  int cst_encode_RustOpaque_bdk_corebitcoinTransaction(Transaction raw);

  @protected
  int cst_encode_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
      BdkElectrumClientClient raw);

  @protected
  int cst_encode_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      BlockingClient raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletUpdate(Update raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      DerivationPath raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
      ExtendedDescriptor raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      DescriptorPublicKey raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      DescriptorSecretKey raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletkeysKeyMap(KeyMap raw);

  @protected
  int cst_encode_RustOpaque_bdk_walletkeysbip39Mnemonic(Mnemonic raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
      MutexOptionFullScanRequestBuilderKeychainKind raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
      MutexOptionFullScanRequestKeychainKind raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
      MutexOptionSyncRequestBuilderKeychainKindU32 raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
      MutexOptionSyncRequestKeychainKindU32 raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(MutexPsbt raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
      MutexPersistedWalletConnection raw);

  @protected
  int cst_encode_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
      MutexConnection raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_change_spend_policy(ChangeSpendPolicy raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_keychain_kind(KeychainKind raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_request_builder_error(RequestBuilderError raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_word_count(WordCount raw);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_DartFn_Inputs_ffi_script_buf_u_64_Output_unit_AnyhowException(
      FutureOr<void> Function(FfiScriptBuf, BigInt) self,
      SseSerializer serializer);

  @protected
  void
      sse_encode_DartFn_Inputs_keychain_kind_u_32_ffi_script_buf_Output_unit_AnyhowException(
          FutureOr<void> Function(KeychainKind, int, FfiScriptBuf) self,
          SseSerializer serializer);

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_corebitcoinAddress(
      Address self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_corebitcoinTransaction(
      Transaction self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
          BdkElectrumClientClient self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      BlockingClient self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletUpdate(
      Update self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      DerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
      ExtendedDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      DescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      DescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletkeysKeyMap(
      KeyMap self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_bdk_walletkeysbip39Mnemonic(
      Mnemonic self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
          MutexOptionFullScanRequestBuilderKeychainKind self,
          SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
          MutexOptionFullScanRequestKeychainKind self,
          SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
          MutexOptionSyncRequestBuilderKeychainKindU32 self,
          SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
          MutexOptionSyncRequestKeychainKindU32 self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
      MutexPsbt self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
          MutexPersistedWalletConnection self, SseSerializer serializer);

  @protected
  void sse_encode_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
      MutexConnection self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_info(AddressInfo self, SseSerializer serializer);

  @protected
  void sse_encode_address_parse_error(
      AddressParseError self, SseSerializer serializer);

  @protected
  void sse_encode_balance(Balance self, SseSerializer serializer);

  @protected
  void sse_encode_bip_32_error(Bip32Error self, SseSerializer serializer);

  @protected
  void sse_encode_bip_39_error(Bip39Error self, SseSerializer serializer);

  @protected
  void sse_encode_block_id(BlockId self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_confirmation_block_time(
      ConfirmationBlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_address(
      FfiAddress self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_canonical_tx(
      FfiCanonicalTx self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_connection(
      FfiConnection self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_derivation_path(
      FfiDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_descriptor(
      FfiDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_descriptor_public_key(
      FfiDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_descriptor_secret_key(
      FfiDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_electrum_client(
      FfiElectrumClient self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_esplora_client(
      FfiEsploraClient self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_full_scan_request(
      FfiFullScanRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_full_scan_request_builder(
      FfiFullScanRequestBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_mnemonic(
      FfiMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_psbt(FfiPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_script_buf(
      FfiScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_sync_request(
      FfiSyncRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_sync_request_builder(
      FfiSyncRequestBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_transaction(
      FfiTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_update(
      FfiUpdate self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ffi_wallet(
      FfiWallet self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lock_time(
      LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_rbf_value(
      RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sign_options(
      SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_calculate_fee_error(
      CalculateFeeError self, SseSerializer serializer);

  @protected
  void sse_encode_cannot_connect_error(
      CannotConnectError self, SseSerializer serializer);

  @protected
  void sse_encode_chain_position(ChainPosition self, SseSerializer serializer);

  @protected
  void sse_encode_change_spend_policy(
      ChangeSpendPolicy self, SseSerializer serializer);

  @protected
  void sse_encode_confirmation_block_time(
      ConfirmationBlockTime self, SseSerializer serializer);

  @protected
  void sse_encode_create_tx_error(CreateTxError self, SseSerializer serializer);

  @protected
  void sse_encode_create_with_persist_error(
      CreateWithPersistError self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_key_error(
      DescriptorKeyError self, SseSerializer serializer);

  @protected
  void sse_encode_electrum_error(ElectrumError self, SseSerializer serializer);

  @protected
  void sse_encode_esplora_error(EsploraError self, SseSerializer serializer);

  @protected
  void sse_encode_extract_tx_error(
      ExtractTxError self, SseSerializer serializer);

  @protected
  void sse_encode_fee_rate(FeeRate self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_address(FfiAddress self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_canonical_tx(
      FfiCanonicalTx self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_connection(FfiConnection self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_derivation_path(
      FfiDerivationPath self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_descriptor(FfiDescriptor self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_descriptor_public_key(
      FfiDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_descriptor_secret_key(
      FfiDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_electrum_client(
      FfiElectrumClient self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_esplora_client(
      FfiEsploraClient self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_full_scan_request(
      FfiFullScanRequest self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_full_scan_request_builder(
      FfiFullScanRequestBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_mnemonic(FfiMnemonic self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_psbt(FfiPsbt self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_script_buf(FfiScriptBuf self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_sync_request(
      FfiSyncRequest self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_sync_request_builder(
      FfiSyncRequestBuilder self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_transaction(
      FfiTransaction self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_update(FfiUpdate self, SseSerializer serializer);

  @protected
  void sse_encode_ffi_wallet(FfiWallet self, SseSerializer serializer);

  @protected
  void sse_encode_from_script_error(
      FromScriptError self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_isize(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer);

  @protected
  void sse_encode_list_ffi_canonical_tx(
      List<FfiCanonicalTx> self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_local_output(
      List<LocalOutput> self, SseSerializer serializer);

  @protected
  void sse_encode_list_out_point(List<OutPoint> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_record_ffi_script_buf_u_64(
      List<(FfiScriptBuf, BigInt)> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_load_with_persist_error(
      LoadWithPersistError self, SseSerializer serializer);

  @protected
  void sse_encode_local_output(LocalOutput self, SseSerializer serializer);

  @protected
  void sse_encode_lock_time(LockTime self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_fee_rate(
      FeeRate? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_ffi_canonical_tx(
      FfiCanonicalTx? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_ffi_script_buf(
      FfiScriptBuf? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_rbf_value(
      RbfValue? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_psbt_error(PsbtError self, SseSerializer serializer);

  @protected
  void sse_encode_psbt_parse_error(
      PsbtParseError self, SseSerializer serializer);

  @protected
  void sse_encode_rbf_value(RbfValue self, SseSerializer serializer);

  @protected
  void sse_encode_record_ffi_script_buf_u_64(
      (FfiScriptBuf, BigInt) self, SseSerializer serializer);

  @protected
  void sse_encode_request_builder_error(
      RequestBuilderError self, SseSerializer serializer);

  @protected
  void sse_encode_sign_options(SignOptions self, SseSerializer serializer);

  @protected
  void sse_encode_signer_error(SignerError self, SseSerializer serializer);

  @protected
  void sse_encode_sqlite_error(SqliteError self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_error(
      TransactionError self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_txid_parse_error(
      TxidParseError self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class coreWire implements BaseWire {
  factory coreWire.fromExternalLibrary(ExternalLibrary lib) =>
      coreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  coreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  coreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_address_as_string(
    ffi.Pointer<wire_cst_ffi_address> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_as_string(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_as_string');
  late final _wire__crate__api__bitcoin__ffi_address_as_string =
      _wire__crate__api__bitcoin__ffi_address_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_address>)>();

  void wire__crate__api__bitcoin__ffi_address_from_script(
    int port_,
    ffi.Pointer<wire_cst_ffi_script_buf> script,
    int network,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_from_script(
      port_,
      script,
      network,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_from_scriptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ffi_script_buf>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_from_script');
  late final _wire__crate__api__bitcoin__ffi_address_from_script =
      _wire__crate__api__bitcoin__ffi_address_from_scriptPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_script_buf>, int)>();

  void wire__crate__api__bitcoin__ffi_address_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int network,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_from_string(
      port_,
      address,
      network,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_from_string');
  late final _wire__crate__api__bitcoin__ffi_address_from_string =
      _wire__crate__api__bitcoin__ffi_address_from_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  WireSyncRust2DartDco
      wire__crate__api__bitcoin__ffi_address_is_valid_for_network(
    ffi.Pointer<wire_cst_ffi_address> that,
    int network,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_is_valid_for_network(
      that,
      network,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_is_valid_for_networkPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_address>, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_is_valid_for_network');
  late final _wire__crate__api__bitcoin__ffi_address_is_valid_for_network =
      _wire__crate__api__bitcoin__ffi_address_is_valid_for_networkPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_address>, int)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_address_script(
    ffi.Pointer<wire_cst_ffi_address> opaque,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_script(
      opaque,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_scriptPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_script');
  late final _wire__crate__api__bitcoin__ffi_address_script =
      _wire__crate__api__bitcoin__ffi_address_scriptPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_address>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_address_to_qr_uri(
    ffi.Pointer<wire_cst_ffi_address> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_address_to_qr_uri(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_address_to_qr_uriPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_address>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_address_to_qr_uri');
  late final _wire__crate__api__bitcoin__ffi_address_to_qr_uri =
      _wire__crate__api__bitcoin__ffi_address_to_qr_uriPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_address>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_psbt_as_string(
    ffi.Pointer<wire_cst_ffi_psbt> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_as_string(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_as_string');
  late final _wire__crate__api__bitcoin__ffi_psbt_as_string =
      _wire__crate__api__bitcoin__ffi_psbt_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>();

  void wire__crate__api__bitcoin__ffi_psbt_combine(
    int port_,
    ffi.Pointer<wire_cst_ffi_psbt> opaque,
    ffi.Pointer<wire_cst_ffi_psbt> other,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_combine(
      port_,
      opaque,
      other,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_combinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_psbt>,
                  ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_combine');
  late final _wire__crate__api__bitcoin__ffi_psbt_combine =
      _wire__crate__api__bitcoin__ffi_psbt_combinePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_psbt>,
              ffi.Pointer<wire_cst_ffi_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_psbt_extract_tx(
    ffi.Pointer<wire_cst_ffi_psbt> opaque,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_extract_tx(
      opaque,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_extract_txPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_extract_tx');
  late final _wire__crate__api__bitcoin__ffi_psbt_extract_tx =
      _wire__crate__api__bitcoin__ffi_psbt_extract_txPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_psbt_fee_amount(
    ffi.Pointer<wire_cst_ffi_psbt> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_fee_amount(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_fee_amountPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_fee_amount');
  late final _wire__crate__api__bitcoin__ffi_psbt_fee_amount =
      _wire__crate__api__bitcoin__ffi_psbt_fee_amountPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>();

  void wire__crate__api__bitcoin__ffi_psbt_from_str(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> psbt_base64,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_from_str(
      port_,
      psbt_base64,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_from_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_from_str');
  late final _wire__crate__api__bitcoin__ffi_psbt_from_str =
      _wire__crate__api__bitcoin__ffi_psbt_from_strPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_psbt_json_serialize(
    ffi.Pointer<wire_cst_ffi_psbt> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_json_serialize(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_json_serializePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_json_serialize');
  late final _wire__crate__api__bitcoin__ffi_psbt_json_serialize =
      _wire__crate__api__bitcoin__ffi_psbt_json_serializePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_psbt_serialize(
    ffi.Pointer<wire_cst_ffi_psbt> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_psbt_serialize(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_psbt_serializePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_psbt_serialize');
  late final _wire__crate__api__bitcoin__ffi_psbt_serialize =
      _wire__crate__api__bitcoin__ffi_psbt_serializePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_psbt>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_script_buf_as_string(
    ffi.Pointer<wire_cst_ffi_script_buf> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_script_buf_as_string(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_script_buf_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_script_buf>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_script_buf_as_string');
  late final _wire__crate__api__bitcoin__ffi_script_buf_as_string =
      _wire__crate__api__bitcoin__ffi_script_buf_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_script_buf>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_script_buf_empty() {
    return _wire__crate__api__bitcoin__ffi_script_buf_empty();
  }

  late final _wire__crate__api__bitcoin__ffi_script_buf_emptyPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
          'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_script_buf_empty');
  late final _wire__crate__api__bitcoin__ffi_script_buf_empty =
      _wire__crate__api__bitcoin__ffi_script_buf_emptyPtr
          .asFunction<WireSyncRust2DartDco Function()>();

  void wire__crate__api__bitcoin__ffi_script_buf_with_capacity(
    int port_,
    int capacity,
  ) {
    return _wire__crate__api__bitcoin__ffi_script_buf_with_capacity(
      port_,
      capacity,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_script_buf_with_capacityPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_script_buf_with_capacity');
  late final _wire__crate__api__bitcoin__ffi_script_buf_with_capacity =
      _wire__crate__api__bitcoin__ffi_script_buf_with_capacityPtr
          .asFunction<void Function(int, int)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_compute_txid(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_compute_txid(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_compute_txidPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_compute_txid');
  late final _wire__crate__api__bitcoin__ffi_transaction_compute_txid =
      _wire__crate__api__bitcoin__ffi_transaction_compute_txidPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__bitcoin__ffi_transaction_from_bytes(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> transaction_bytes,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_from_bytes(
      port_,
      transaction_bytes,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_from_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_from_bytes');
  late final _wire__crate__api__bitcoin__ffi_transaction_from_bytes =
      _wire__crate__api__bitcoin__ffi_transaction_from_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_input(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_input(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_inputPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_input');
  late final _wire__crate__api__bitcoin__ffi_transaction_input =
      _wire__crate__api__bitcoin__ffi_transaction_inputPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_is_coinbase(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_is_coinbase(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_is_coinbasePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_is_coinbase');
  late final _wire__crate__api__bitcoin__ffi_transaction_is_coinbase =
      _wire__crate__api__bitcoin__ffi_transaction_is_coinbasePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco
      wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbf(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbf(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbfPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_transaction>)>>(
          'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbf');
  late final _wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbf =
      _wire__crate__api__bitcoin__ffi_transaction_is_explicitly_rbfPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco
      wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabled(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabled(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabledPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_transaction>)>>(
          'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabled');
  late final _wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabled =
      _wire__crate__api__bitcoin__ffi_transaction_is_lock_time_enabledPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_lock_time(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_lock_time(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_lock_timePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_lock_time');
  late final _wire__crate__api__bitcoin__ffi_transaction_lock_time =
      _wire__crate__api__bitcoin__ffi_transaction_lock_timePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__bitcoin__ffi_transaction_new(
    int port_,
    int version,
    ffi.Pointer<wire_cst_lock_time> lock_time,
    ffi.Pointer<wire_cst_list_tx_in> input,
    ffi.Pointer<wire_cst_list_tx_out> output,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_new(
      port_,
      version,
      lock_time,
      input,
      output,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_lock_time>,
                  ffi.Pointer<wire_cst_list_tx_in>,
                  ffi.Pointer<wire_cst_list_tx_out>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_new');
  late final _wire__crate__api__bitcoin__ffi_transaction_new =
      _wire__crate__api__bitcoin__ffi_transaction_newPtr.asFunction<
          void Function(
              int,
              int,
              ffi.Pointer<wire_cst_lock_time>,
              ffi.Pointer<wire_cst_list_tx_in>,
              ffi.Pointer<wire_cst_list_tx_out>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_output(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_output(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_outputPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_output');
  late final _wire__crate__api__bitcoin__ffi_transaction_output =
      _wire__crate__api__bitcoin__ffi_transaction_outputPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_serialize(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_serialize(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_serializePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_serialize');
  late final _wire__crate__api__bitcoin__ffi_transaction_serialize =
      _wire__crate__api__bitcoin__ffi_transaction_serializePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_version(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_version(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_versionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_version');
  late final _wire__crate__api__bitcoin__ffi_transaction_version =
      _wire__crate__api__bitcoin__ffi_transaction_versionPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__bitcoin__ffi_transaction_vsize(
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_vsize(
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_vsizePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_vsize');
  late final _wire__crate__api__bitcoin__ffi_transaction_vsize =
      _wire__crate__api__bitcoin__ffi_transaction_vsizePtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__bitcoin__ffi_transaction_weight(
    int port_,
    ffi.Pointer<wire_cst_ffi_transaction> that,
  ) {
    return _wire__crate__api__bitcoin__ffi_transaction_weight(
      port_,
      that,
    );
  }

  late final _wire__crate__api__bitcoin__ffi_transaction_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__bitcoin__ffi_transaction_weight');
  late final _wire__crate__api__bitcoin__ffi_transaction_weight =
      _wire__crate__api__bitcoin__ffi_transaction_weightPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__descriptor__ffi_descriptor_as_string(
    ffi.Pointer<wire_cst_ffi_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_as_string(
      that,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_descriptor>)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_as_string');
  late final _wire__crate__api__descriptor__ffi_descriptor_as_string =
      _wire__crate__api__descriptor__ffi_descriptor_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_descriptor>)>();

  WireSyncRust2DartDco
      wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weight(
    ffi.Pointer<wire_cst_ffi_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weight(
      that,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weightPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor>)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weight');
  late final _wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weight =
      _wire__crate__api__descriptor__ffi_descriptor_max_satisfaction_weightPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_descriptor>)>();

  void wire__crate__api__descriptor__ffi_descriptor_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> descriptor,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new');
  late final _wire__crate__api__descriptor__ffi_descriptor_new =
      _wire__crate__api__descriptor__ffi_descriptor_newPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip44(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip44(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip44Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip44');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip44 =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip44Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip44_public(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip44_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip44_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip44_public');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip44_public =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip44_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip49(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip49(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip49Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip49');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip49 =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip49Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip49_public(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip49_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip49_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip49_public');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip49_public =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip49_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip84(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip84(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip84Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip84');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip84 =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip84Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip84_public(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip84_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip84_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip84_public');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip84_public =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip84_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip86(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip86(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip86Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip86');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip86 =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip86Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              int, int)>();

  void wire__crate__api__descriptor__ffi_descriptor_new_bip86_public(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_new_bip86_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip86_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                      ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                      ffi.Int32,
                      ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_new_bip86_public');
  late final _wire__crate__api__descriptor__ffi_descriptor_new_bip86_public =
      _wire__crate__api__descriptor__ffi_descriptor_new_bip86_publicPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  int,
                  int)>();

  WireSyncRust2DartDco
      wire__crate__api__descriptor__ffi_descriptor_to_string_with_secret(
    ffi.Pointer<wire_cst_ffi_descriptor> that,
  ) {
    return _wire__crate__api__descriptor__ffi_descriptor_to_string_with_secret(
      that,
    );
  }

  late final _wire__crate__api__descriptor__ffi_descriptor_to_string_with_secretPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor>)>>(
          'frbgen_bdk_flutter_wire__crate__api__descriptor__ffi_descriptor_to_string_with_secret');
  late final _wire__crate__api__descriptor__ffi_descriptor_to_string_with_secret =
      _wire__crate__api__descriptor__ffi_descriptor_to_string_with_secretPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_descriptor>)>();

  void wire__crate__api__electrum__ffi_electrum_client_broadcast(
    int port_,
    ffi.Pointer<wire_cst_ffi_electrum_client> opaque,
    ffi.Pointer<wire_cst_ffi_transaction> transaction,
  ) {
    return _wire__crate__api__electrum__ffi_electrum_client_broadcast(
      port_,
      opaque,
      transaction,
    );
  }

  late final _wire__crate__api__electrum__ffi_electrum_client_broadcastPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_electrum_client>,
                      ffi.Pointer<wire_cst_ffi_transaction>)>>(
          'frbgen_bdk_flutter_wire__crate__api__electrum__ffi_electrum_client_broadcast');
  late final _wire__crate__api__electrum__ffi_electrum_client_broadcast =
      _wire__crate__api__electrum__ffi_electrum_client_broadcastPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_electrum_client>,
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__electrum__ffi_electrum_client_full_scan(
    int port_,
    ffi.Pointer<wire_cst_ffi_electrum_client> opaque,
    ffi.Pointer<wire_cst_ffi_full_scan_request> request,
    int stop_gap,
    int batch_size,
    bool fetch_prev_txouts,
  ) {
    return _wire__crate__api__electrum__ffi_electrum_client_full_scan(
      port_,
      opaque,
      request,
      stop_gap,
      batch_size,
      fetch_prev_txouts,
    );
  }

  late final _wire__crate__api__electrum__ffi_electrum_client_full_scanPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_electrum_client>,
                      ffi.Pointer<wire_cst_ffi_full_scan_request>,
                      ffi.Uint64,
                      ffi.Uint64,
                      ffi.Bool)>>(
          'frbgen_bdk_flutter_wire__crate__api__electrum__ffi_electrum_client_full_scan');
  late final _wire__crate__api__electrum__ffi_electrum_client_full_scan =
      _wire__crate__api__electrum__ffi_electrum_client_full_scanPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_electrum_client>,
              ffi.Pointer<wire_cst_ffi_full_scan_request>, int, int, bool)>();

  void wire__crate__api__electrum__ffi_electrum_client_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> url,
  ) {
    return _wire__crate__api__electrum__ffi_electrum_client_new(
      port_,
      url,
    );
  }

  late final _wire__crate__api__electrum__ffi_electrum_client_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__electrum__ffi_electrum_client_new');
  late final _wire__crate__api__electrum__ffi_electrum_client_new =
      _wire__crate__api__electrum__ffi_electrum_client_newPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__electrum__ffi_electrum_client_sync(
    int port_,
    ffi.Pointer<wire_cst_ffi_electrum_client> opaque,
    ffi.Pointer<wire_cst_ffi_sync_request> request,
    int batch_size,
    bool fetch_prev_txouts,
  ) {
    return _wire__crate__api__electrum__ffi_electrum_client_sync(
      port_,
      opaque,
      request,
      batch_size,
      fetch_prev_txouts,
    );
  }

  late final _wire__crate__api__electrum__ffi_electrum_client_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_electrum_client>,
                  ffi.Pointer<wire_cst_ffi_sync_request>,
                  ffi.Uint64,
                  ffi.Bool)>>(
      'frbgen_bdk_flutter_wire__crate__api__electrum__ffi_electrum_client_sync');
  late final _wire__crate__api__electrum__ffi_electrum_client_sync =
      _wire__crate__api__electrum__ffi_electrum_client_syncPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_electrum_client>,
              ffi.Pointer<wire_cst_ffi_sync_request>, int, bool)>();

  void wire__crate__api__esplora__ffi_esplora_client_broadcast(
    int port_,
    ffi.Pointer<wire_cst_ffi_esplora_client> opaque,
    ffi.Pointer<wire_cst_ffi_transaction> transaction,
  ) {
    return _wire__crate__api__esplora__ffi_esplora_client_broadcast(
      port_,
      opaque,
      transaction,
    );
  }

  late final _wire__crate__api__esplora__ffi_esplora_client_broadcastPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_esplora_client>,
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__esplora__ffi_esplora_client_broadcast');
  late final _wire__crate__api__esplora__ffi_esplora_client_broadcast =
      _wire__crate__api__esplora__ffi_esplora_client_broadcastPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_esplora_client>,
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__esplora__ffi_esplora_client_full_scan(
    int port_,
    ffi.Pointer<wire_cst_ffi_esplora_client> opaque,
    ffi.Pointer<wire_cst_ffi_full_scan_request> request,
    int stop_gap,
    int parallel_requests,
  ) {
    return _wire__crate__api__esplora__ffi_esplora_client_full_scan(
      port_,
      opaque,
      request,
      stop_gap,
      parallel_requests,
    );
  }

  late final _wire__crate__api__esplora__ffi_esplora_client_full_scanPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_esplora_client>,
                  ffi.Pointer<wire_cst_ffi_full_scan_request>,
                  ffi.Uint64,
                  ffi.Uint64)>>(
      'frbgen_bdk_flutter_wire__crate__api__esplora__ffi_esplora_client_full_scan');
  late final _wire__crate__api__esplora__ffi_esplora_client_full_scan =
      _wire__crate__api__esplora__ffi_esplora_client_full_scanPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_esplora_client>,
              ffi.Pointer<wire_cst_ffi_full_scan_request>, int, int)>();

  void wire__crate__api__esplora__ffi_esplora_client_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> url,
  ) {
    return _wire__crate__api__esplora__ffi_esplora_client_new(
      port_,
      url,
    );
  }

  late final _wire__crate__api__esplora__ffi_esplora_client_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__esplora__ffi_esplora_client_new');
  late final _wire__crate__api__esplora__ffi_esplora_client_new =
      _wire__crate__api__esplora__ffi_esplora_client_newPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__esplora__ffi_esplora_client_sync(
    int port_,
    ffi.Pointer<wire_cst_ffi_esplora_client> opaque,
    ffi.Pointer<wire_cst_ffi_sync_request> request,
    int parallel_requests,
  ) {
    return _wire__crate__api__esplora__ffi_esplora_client_sync(
      port_,
      opaque,
      request,
      parallel_requests,
    );
  }

  late final _wire__crate__api__esplora__ffi_esplora_client_syncPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_esplora_client>,
                  ffi.Pointer<wire_cst_ffi_sync_request>,
                  ffi.Uint64)>>(
      'frbgen_bdk_flutter_wire__crate__api__esplora__ffi_esplora_client_sync');
  late final _wire__crate__api__esplora__ffi_esplora_client_sync =
      _wire__crate__api__esplora__ffi_esplora_client_syncPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_esplora_client>,
              ffi.Pointer<wire_cst_ffi_sync_request>, int)>();

  WireSyncRust2DartDco wire__crate__api__key__ffi_derivation_path_as_string(
    ffi.Pointer<wire_cst_ffi_derivation_path> that,
  ) {
    return _wire__crate__api__key__ffi_derivation_path_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__ffi_derivation_path_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_derivation_path_as_string');
  late final _wire__crate__api__key__ffi_derivation_path_as_string =
      _wire__crate__api__key__ffi_derivation_path_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_derivation_path>)>();

  void wire__crate__api__key__ffi_derivation_path_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> path,
  ) {
    return _wire__crate__api__key__ffi_derivation_path_from_string(
      port_,
      path,
    );
  }

  late final _wire__crate__api__key__ffi_derivation_path_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_derivation_path_from_string');
  late final _wire__crate__api__key__ffi_derivation_path_from_string =
      _wire__crate__api__key__ffi_derivation_path_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__ffi_descriptor_public_key_as_string(
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> that,
  ) {
    return _wire__crate__api__key__ffi_descriptor_public_key_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_public_key_as_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor_public_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_public_key_as_string');
  late final _wire__crate__api__key__ffi_descriptor_public_key_as_string =
      _wire__crate__api__key__ffi_descriptor_public_key_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_descriptor_public_key>)>();

  void wire__crate__api__key__ffi_descriptor_public_key_derive(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> opaque,
    ffi.Pointer<wire_cst_ffi_derivation_path> path,
  ) {
    return _wire__crate__api__key__ffi_descriptor_public_key_derive(
      port_,
      opaque,
      path,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_public_key_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_ffi_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_public_key_derive');
  late final _wire__crate__api__key__ffi_descriptor_public_key_derive =
      _wire__crate__api__key__ffi_descriptor_public_key_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
              ffi.Pointer<wire_cst_ffi_derivation_path>)>();

  void wire__crate__api__key__ffi_descriptor_public_key_extend(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_public_key> opaque,
    ffi.Pointer<wire_cst_ffi_derivation_path> path,
  ) {
    return _wire__crate__api__key__ffi_descriptor_public_key_extend(
      port_,
      opaque,
      path,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_public_key_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
                  ffi.Pointer<wire_cst_ffi_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_public_key_extend');
  late final _wire__crate__api__key__ffi_descriptor_public_key_extend =
      _wire__crate__api__key__ffi_descriptor_public_key_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_public_key>,
              ffi.Pointer<wire_cst_ffi_derivation_path>)>();

  void wire__crate__api__key__ffi_descriptor_public_key_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key,
  ) {
    return _wire__crate__api__key__ffi_descriptor_public_key_from_string(
      port_,
      public_key,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_public_key_from_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_public_key_from_string');
  late final _wire__crate__api__key__ffi_descriptor_public_key_from_string =
      _wire__crate__api__key__ffi_descriptor_public_key_from_stringPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__ffi_descriptor_secret_key_as_public(
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> opaque,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_as_public(
      opaque,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_as_publicPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_as_public');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_as_public =
      _wire__crate__api__key__ffi_descriptor_secret_key_as_publicPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__ffi_descriptor_secret_key_as_string(
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> that,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_as_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_as_string');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_as_string =
      _wire__crate__api__key__ffi_descriptor_secret_key_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>();

  void wire__crate__api__key__ffi_descriptor_secret_key_create(
    int port_,
    int network,
    ffi.Pointer<wire_cst_ffi_mnemonic> mnemonic,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> password,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_create(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_ffi_mnemonic>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_create');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_create =
      _wire__crate__api__key__ffi_descriptor_secret_key_createPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_cst_ffi_mnemonic>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__key__ffi_descriptor_secret_key_derive(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> opaque,
    ffi.Pointer<wire_cst_ffi_derivation_path> path,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_derive(
      port_,
      opaque,
      path,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Pointer<wire_cst_ffi_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_derive');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_derive =
      _wire__crate__api__key__ffi_descriptor_secret_key_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              ffi.Pointer<wire_cst_ffi_derivation_path>)>();

  void wire__crate__api__key__ffi_descriptor_secret_key_extend(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> opaque,
    ffi.Pointer<wire_cst_ffi_derivation_path> path,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_extend(
      port_,
      opaque,
      path,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
                  ffi.Pointer<wire_cst_ffi_derivation_path>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_extend');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_extend =
      _wire__crate__api__key__ffi_descriptor_secret_key_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_descriptor_secret_key>,
              ffi.Pointer<wire_cst_ffi_derivation_path>)>();

  void wire__crate__api__key__ffi_descriptor_secret_key_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> secret_key,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_from_string(
      port_,
      secret_key,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_from_stringPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_from_string');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_from_string =
      _wire__crate__api__key__ffi_descriptor_secret_key_from_stringPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco
      wire__crate__api__key__ffi_descriptor_secret_key_secret_bytes(
    ffi.Pointer<wire_cst_ffi_descriptor_secret_key> that,
  ) {
    return _wire__crate__api__key__ffi_descriptor_secret_key_secret_bytes(
      that,
    );
  }

  late final _wire__crate__api__key__ffi_descriptor_secret_key_secret_bytesPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncRust2DartDco Function(
                      ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_descriptor_secret_key_secret_bytes');
  late final _wire__crate__api__key__ffi_descriptor_secret_key_secret_bytes =
      _wire__crate__api__key__ffi_descriptor_secret_key_secret_bytesPtr
          .asFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>)>();

  WireSyncRust2DartDco wire__crate__api__key__ffi_mnemonic_as_string(
    ffi.Pointer<wire_cst_ffi_mnemonic> that,
  ) {
    return _wire__crate__api__key__ffi_mnemonic_as_string(
      that,
    );
  }

  late final _wire__crate__api__key__ffi_mnemonic_as_stringPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_mnemonic>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_mnemonic_as_string');
  late final _wire__crate__api__key__ffi_mnemonic_as_string =
      _wire__crate__api__key__ffi_mnemonic_as_stringPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_mnemonic>)>();

  void wire__crate__api__key__ffi_mnemonic_from_entropy(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> entropy,
  ) {
    return _wire__crate__api__key__ffi_mnemonic_from_entropy(
      port_,
      entropy,
    );
  }

  late final _wire__crate__api__key__ffi_mnemonic_from_entropyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_mnemonic_from_entropy');
  late final _wire__crate__api__key__ffi_mnemonic_from_entropy =
      _wire__crate__api__key__ffi_mnemonic_from_entropyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire__crate__api__key__ffi_mnemonic_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
  ) {
    return _wire__crate__api__key__ffi_mnemonic_from_string(
      port_,
      mnemonic,
    );
  }

  late final _wire__crate__api__key__ffi_mnemonic_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__key__ffi_mnemonic_from_string');
  late final _wire__crate__api__key__ffi_mnemonic_from_string =
      _wire__crate__api__key__ffi_mnemonic_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__key__ffi_mnemonic_new(
    int port_,
    int word_count,
  ) {
    return _wire__crate__api__key__ffi_mnemonic_new(
      port_,
      word_count,
    );
  }

  late final _wire__crate__api__key__ffi_mnemonic_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire__crate__api__key__ffi_mnemonic_new');
  late final _wire__crate__api__key__ffi_mnemonic_new =
      _wire__crate__api__key__ffi_mnemonic_newPtr
          .asFunction<void Function(int, int)>();

  void wire__crate__api__store__ffi_connection_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> path,
  ) {
    return _wire__crate__api__store__ffi_connection_new(
      port_,
      path,
    );
  }

  late final _wire__crate__api__store__ffi_connection_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__store__ffi_connection_new');
  late final _wire__crate__api__store__ffi_connection_new =
      _wire__crate__api__store__ffi_connection_newPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__api__store__ffi_connection_new_in_memory(
    int port_,
  ) {
    return _wire__crate__api__store__ffi_connection_new_in_memory(
      port_,
    );
  }

  late final _wire__crate__api__store__ffi_connection_new_in_memoryPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_bdk_flutter_wire__crate__api__store__ffi_connection_new_in_memory');
  late final _wire__crate__api__store__ffi_connection_new_in_memory =
      _wire__crate__api__store__ffi_connection_new_in_memoryPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__tx_builder__finish_bump_fee_tx_builder(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> txid,
    ffi.Pointer<wire_cst_fee_rate> fee_rate,
    ffi.Pointer<wire_cst_ffi_wallet> wallet,
    bool enable_rbf,
    ffi.Pointer<ffi.Uint32> n_sequence,
  ) {
    return _wire__crate__api__tx_builder__finish_bump_fee_tx_builder(
      port_,
      txid,
      fee_rate,
      wallet,
      enable_rbf,
      n_sequence,
    );
  }

  late final _wire__crate__api__tx_builder__finish_bump_fee_tx_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_fee_rate>,
                  ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Bool,
                  ffi.Pointer<ffi.Uint32>)>>(
      'frbgen_bdk_flutter_wire__crate__api__tx_builder__finish_bump_fee_tx_builder');
  late final _wire__crate__api__tx_builder__finish_bump_fee_tx_builder =
      _wire__crate__api__tx_builder__finish_bump_fee_tx_builderPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_fee_rate>,
              ffi.Pointer<wire_cst_ffi_wallet>,
              bool,
              ffi.Pointer<ffi.Uint32>)>();

  void wire__crate__api__tx_builder__tx_builder_finish(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> wallet,
    ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64> recipients,
    ffi.Pointer<wire_cst_list_out_point> utxos,
    ffi.Pointer<wire_cst_list_out_point> un_spendable,
    int change_policy,
    bool manually_selected_only,
    ffi.Pointer<wire_cst_fee_rate> fee_rate,
    ffi.Pointer<ffi.Uint64> fee_absolute,
    bool drain_wallet,
    ffi.Pointer<wire_cst_ffi_script_buf> drain_to,
    ffi.Pointer<wire_cst_rbf_value> rbf,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> data,
  ) {
    return _wire__crate__api__tx_builder__tx_builder_finish(
      port_,
      wallet,
      recipients,
      utxos,
      un_spendable,
      change_policy,
      manually_selected_only,
      fee_rate,
      fee_absolute,
      drain_wallet,
      drain_to,
      rbf,
      data,
    );
  }

  late final _wire__crate__api__tx_builder__tx_builder_finishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64>,
                  ffi.Pointer<wire_cst_list_out_point>,
                  ffi.Pointer<wire_cst_list_out_point>,
                  ffi.Int32,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_fee_rate>,
                  ffi.Pointer<ffi.Uint64>,
                  ffi.Bool,
                  ffi.Pointer<wire_cst_ffi_script_buf>,
                  ffi.Pointer<wire_cst_rbf_value>,
                  ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire__crate__api__tx_builder__tx_builder_finish');
  late final _wire__crate__api__tx_builder__tx_builder_finish =
      _wire__crate__api__tx_builder__tx_builder_finishPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64>,
              ffi.Pointer<wire_cst_list_out_point>,
              ffi.Pointer<wire_cst_list_out_point>,
              int,
              bool,
              ffi.Pointer<wire_cst_fee_rate>,
              ffi.Pointer<ffi.Uint64>,
              bool,
              ffi.Pointer<wire_cst_ffi_script_buf>,
              ffi.Pointer<wire_cst_rbf_value>,
              ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire__crate__api__types__change_spend_policy_default(
    int port_,
  ) {
    return _wire__crate__api__types__change_spend_policy_default(
      port_,
    );
  }

  late final _wire__crate__api__types__change_spend_policy_defaultPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__change_spend_policy_default');
  late final _wire__crate__api__types__change_spend_policy_default =
      _wire__crate__api__types__change_spend_policy_defaultPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__types__ffi_full_scan_request_builder_build(
    int port_,
    ffi.Pointer<wire_cst_ffi_full_scan_request_builder> that,
  ) {
    return _wire__crate__api__types__ffi_full_scan_request_builder_build(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__ffi_full_scan_request_builder_buildPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_full_scan_request_builder>)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__ffi_full_scan_request_builder_build');
  late final _wire__crate__api__types__ffi_full_scan_request_builder_build =
      _wire__crate__api__types__ffi_full_scan_request_builder_buildPtr
          .asFunction<
              void Function(
                  int, ffi.Pointer<wire_cst_ffi_full_scan_request_builder>)>();

  void
      wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychains(
    int port_,
    ffi.Pointer<wire_cst_ffi_full_scan_request_builder> that,
    ffi.Pointer<ffi.Void> inspector,
  ) {
    return _wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychains(
      port_,
      that,
      inspector,
    );
  }

  late final _wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychainsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_full_scan_request_builder>,
                      ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychains');
  late final _wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychains =
      _wire__crate__api__types__ffi_full_scan_request_builder_inspect_spks_for_all_keychainsPtr
          .asFunction<
              void Function(
                  int,
                  ffi.Pointer<wire_cst_ffi_full_scan_request_builder>,
                  ffi.Pointer<ffi.Void>)>();

  void wire__crate__api__types__ffi_sync_request_builder_build(
    int port_,
    ffi.Pointer<wire_cst_ffi_sync_request_builder> that,
  ) {
    return _wire__crate__api__types__ffi_sync_request_builder_build(
      port_,
      that,
    );
  }

  late final _wire__crate__api__types__ffi_sync_request_builder_buildPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_ffi_sync_request_builder>)>>(
      'frbgen_bdk_flutter_wire__crate__api__types__ffi_sync_request_builder_build');
  late final _wire__crate__api__types__ffi_sync_request_builder_build =
      _wire__crate__api__types__ffi_sync_request_builder_buildPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_sync_request_builder>)>();

  void wire__crate__api__types__ffi_sync_request_builder_inspect_spks(
    int port_,
    ffi.Pointer<wire_cst_ffi_sync_request_builder> that,
    ffi.Pointer<ffi.Void> inspector,
  ) {
    return _wire__crate__api__types__ffi_sync_request_builder_inspect_spks(
      port_,
      that,
      inspector,
    );
  }

  late final _wire__crate__api__types__ffi_sync_request_builder_inspect_spksPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64,
                      ffi.Pointer<wire_cst_ffi_sync_request_builder>,
                      ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__ffi_sync_request_builder_inspect_spks');
  late final _wire__crate__api__types__ffi_sync_request_builder_inspect_spks =
      _wire__crate__api__types__ffi_sync_request_builder_inspect_spksPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_cst_ffi_sync_request_builder>,
                  ffi.Pointer<ffi.Void>)>();

  void wire__crate__api__types__network_default(
    int port_,
  ) {
    return _wire__crate__api__types__network_default(
      port_,
    );
  }

  late final _wire__crate__api__types__network_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__network_default');
  late final _wire__crate__api__types__network_default =
      _wire__crate__api__types__network_defaultPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__types__sign_options_default(
    int port_,
  ) {
    return _wire__crate__api__types__sign_options_default(
      port_,
    );
  }

  late final _wire__crate__api__types__sign_options_defaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bdk_flutter_wire__crate__api__types__sign_options_default');
  late final _wire__crate__api__types__sign_options_default =
      _wire__crate__api__types__sign_options_defaultPtr
          .asFunction<void Function(int)>();

  void wire__crate__api__wallet__ffi_wallet_apply_update(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> that,
    ffi.Pointer<wire_cst_ffi_update> update,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_apply_update(
      port_,
      that,
      update,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_apply_updatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_update>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_apply_update');
  late final _wire__crate__api__wallet__ffi_wallet_apply_update =
      _wire__crate__api__wallet__ffi_wallet_apply_updatePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_update>)>();

  void wire__crate__api__wallet__ffi_wallet_calculate_fee(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> opaque,
    ffi.Pointer<wire_cst_ffi_transaction> tx,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_calculate_fee(
      port_,
      opaque,
      tx,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_calculate_feePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_calculate_fee');
  late final _wire__crate__api__wallet__ffi_wallet_calculate_fee =
      _wire__crate__api__wallet__ffi_wallet_calculate_feePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  void wire__crate__api__wallet__ffi_wallet_calculate_fee_rate(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> opaque,
    ffi.Pointer<wire_cst_ffi_transaction> tx,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_calculate_fee_rate(
      port_,
      opaque,
      tx,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_calculate_fee_ratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_transaction>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_calculate_fee_rate');
  late final _wire__crate__api__wallet__ffi_wallet_calculate_fee_rate =
      _wire__crate__api__wallet__ffi_wallet_calculate_fee_ratePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_transaction>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_get_balance(
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_get_balance(
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_get_balancePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_get_balance');
  late final _wire__crate__api__wallet__ffi_wallet_get_balance =
      _wire__crate__api__wallet__ffi_wallet_get_balancePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>();

  void wire__crate__api__wallet__ffi_wallet_get_tx(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> txid,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_get_tx(
      port_,
      that,
      txid,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_get_txPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_get_tx');
  late final _wire__crate__api__wallet__ffi_wallet_get_tx =
      _wire__crate__api__wallet__ffi_wallet_get_txPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_is_mine(
    ffi.Pointer<wire_cst_ffi_wallet> that,
    ffi.Pointer<wire_cst_ffi_script_buf> script,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_is_mine(
      that,
      script,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_is_minePtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_script_buf>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_is_mine');
  late final _wire__crate__api__wallet__ffi_wallet_is_mine =
      _wire__crate__api__wallet__ffi_wallet_is_minePtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_script_buf>)>();

  void wire__crate__api__wallet__ffi_wallet_list_output(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_list_output(
      port_,
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_list_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_list_output');
  late final _wire__crate__api__wallet__ffi_wallet_list_output =
      _wire__crate__api__wallet__ffi_wallet_list_outputPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_wallet>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_list_unspent(
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_list_unspent(
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_list_unspentPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_list_unspent');
  late final _wire__crate__api__wallet__ffi_wallet_list_unspent =
      _wire__crate__api__wallet__ffi_wallet_list_unspentPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>();

  void wire__crate__api__wallet__ffi_wallet_load(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor> descriptor,
    ffi.Pointer<wire_cst_ffi_descriptor> change_descriptor,
    ffi.Pointer<wire_cst_ffi_connection> connection,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_load(
      port_,
      descriptor,
      change_descriptor,
      connection,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_loadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor>,
                  ffi.Pointer<wire_cst_ffi_descriptor>,
                  ffi.Pointer<wire_cst_ffi_connection>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_load');
  late final _wire__crate__api__wallet__ffi_wallet_load =
      _wire__crate__api__wallet__ffi_wallet_loadPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_descriptor>,
              ffi.Pointer<wire_cst_ffi_descriptor>,
              ffi.Pointer<wire_cst_ffi_connection>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_network(
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_network(
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_networkPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_network');
  late final _wire__crate__api__wallet__ffi_wallet_network =
      _wire__crate__api__wallet__ffi_wallet_networkPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>();

  void wire__crate__api__wallet__ffi_wallet_new(
    int port_,
    ffi.Pointer<wire_cst_ffi_descriptor> descriptor,
    ffi.Pointer<wire_cst_ffi_descriptor> change_descriptor,
    int network,
    ffi.Pointer<wire_cst_ffi_connection> connection,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_new(
      port_,
      descriptor,
      change_descriptor,
      network,
      connection,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_descriptor>,
                  ffi.Pointer<wire_cst_ffi_descriptor>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_ffi_connection>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_new');
  late final _wire__crate__api__wallet__ffi_wallet_new =
      _wire__crate__api__wallet__ffi_wallet_newPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_descriptor>,
              ffi.Pointer<wire_cst_ffi_descriptor>,
              int,
              ffi.Pointer<wire_cst_ffi_connection>)>();

  void wire__crate__api__wallet__ffi_wallet_persist(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> opaque,
    ffi.Pointer<wire_cst_ffi_connection> connection,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_persist(
      port_,
      opaque,
      connection,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_persistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_connection>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_persist');
  late final _wire__crate__api__wallet__ffi_wallet_persist =
      _wire__crate__api__wallet__ffi_wallet_persistPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_connection>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_reveal_next_address(
    ffi.Pointer<wire_cst_ffi_wallet> opaque,
    int keychain_kind,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_reveal_next_address(
      opaque,
      keychain_kind,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_reveal_next_addressPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_ffi_wallet>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_reveal_next_address');
  late final _wire__crate__api__wallet__ffi_wallet_reveal_next_address =
      _wire__crate__api__wallet__ffi_wallet_reveal_next_addressPtr.asFunction<
          WireSyncRust2DartDco Function(
              ffi.Pointer<wire_cst_ffi_wallet>, int)>();

  void wire__crate__api__wallet__ffi_wallet_sign(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> opaque,
    ffi.Pointer<wire_cst_ffi_psbt> psbt,
    ffi.Pointer<wire_cst_sign_options> sign_options,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_sign(
      port_,
      opaque,
      psbt,
      sign_options,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_signPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_ffi_wallet>,
                  ffi.Pointer<wire_cst_ffi_psbt>,
                  ffi.Pointer<wire_cst_sign_options>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_sign');
  late final _wire__crate__api__wallet__ffi_wallet_sign =
      _wire__crate__api__wallet__ffi_wallet_signPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_cst_ffi_wallet>,
              ffi.Pointer<wire_cst_ffi_psbt>,
              ffi.Pointer<wire_cst_sign_options>)>();

  void wire__crate__api__wallet__ffi_wallet_start_full_scan(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_start_full_scan(
      port_,
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_start_full_scanPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_start_full_scan');
  late final _wire__crate__api__wallet__ffi_wallet_start_full_scan =
      _wire__crate__api__wallet__ffi_wallet_start_full_scanPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_wallet>)>();

  void wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spks(
    int port_,
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spks(
      port_,
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spksPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Int64, ffi.Pointer<wire_cst_ffi_wallet>)>>(
          'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spks');
  late final _wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spks =
      _wire__crate__api__wallet__ffi_wallet_start_sync_with_revealed_spksPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_ffi_wallet>)>();

  WireSyncRust2DartDco wire__crate__api__wallet__ffi_wallet_transactions(
    ffi.Pointer<wire_cst_ffi_wallet> that,
  ) {
    return _wire__crate__api__wallet__ffi_wallet_transactions(
      that,
    );
  }

  late final _wire__crate__api__wallet__ffi_wallet_transactionsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>>(
      'frbgen_bdk_flutter_wire__crate__api__wallet__ffi_wallet_transactions');
  late final _wire__crate__api__wallet__ffi_wallet_transactions =
      _wire__crate__api__wallet__ffi_wallet_transactionsPtr.asFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_ffi_wallet>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddress');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddress =
      _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddress');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddress =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransaction(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransaction');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransaction =
      _rust_arc_increment_strong_count_RustOpaque_bdk_corebitcoinTransactionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransaction(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransaction(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransactionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransaction');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransaction =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_corebitcoinTransactionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClientPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient =
      _rust_arc_increment_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClientPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClientPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClient =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_electrumBdkElectrumClientbdk_electrumelectrum_clientClientPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClientPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient =
      _rust_arc_increment_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClientPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClientPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClient =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_esploraesplora_clientBlockingClientPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdate(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdate');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdate =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletUpdatePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdate(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdate(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdate');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdate =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletUpdatePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPath =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptor =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletdescriptorExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKey =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKey =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMap');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMap =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMap');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMap =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic');
  late final _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic =
      _rust_arc_increment_strong_count_RustOpaque_bdk_walletkeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic');
  late final _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39Mnemonic =
      _rust_arc_decrement_strong_count_RustOpaque_bdk_walletkeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKindPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKind =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestBuilderbdk_walletKeychainKindPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKindPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKind =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientFullScanRequestbdk_walletKeychainKindPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32 =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32 =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestBuilderbdk_walletKeychainKindu32Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32 =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32 =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexOptionbdk_corespk_clientSyncRequestbdk_walletKeychainKindu32Ptr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbtPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbt =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_corebitcoinpsbtPsbtPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnection =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletPersistedWalletbdk_walletrusqliteConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection');
  late final _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection =
      _rust_arc_increment_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection');
  late final _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnection =
      _rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexbdk_walletrusqliteConnectionPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_confirmation_block_time>
      cst_new_box_autoadd_confirmation_block_time() {
    return _cst_new_box_autoadd_confirmation_block_time();
  }

  late final _cst_new_box_autoadd_confirmation_block_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_confirmation_block_time> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_confirmation_block_time');
  late final _cst_new_box_autoadd_confirmation_block_time =
      _cst_new_box_autoadd_confirmation_block_timePtr.asFunction<
          ffi.Pointer<wire_cst_confirmation_block_time> Function()>();

  ffi.Pointer<wire_cst_fee_rate> cst_new_box_autoadd_fee_rate() {
    return _cst_new_box_autoadd_fee_rate();
  }

  late final _cst_new_box_autoadd_fee_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_fee_rate> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_fee_rate');
  late final _cst_new_box_autoadd_fee_rate = _cst_new_box_autoadd_fee_ratePtr
      .asFunction<ffi.Pointer<wire_cst_fee_rate> Function()>();

  ffi.Pointer<wire_cst_ffi_address> cst_new_box_autoadd_ffi_address() {
    return _cst_new_box_autoadd_ffi_address();
  }

  late final _cst_new_box_autoadd_ffi_addressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_address> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_address');
  late final _cst_new_box_autoadd_ffi_address =
      _cst_new_box_autoadd_ffi_addressPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_address> Function()>();

  ffi.Pointer<wire_cst_ffi_canonical_tx>
      cst_new_box_autoadd_ffi_canonical_tx() {
    return _cst_new_box_autoadd_ffi_canonical_tx();
  }

  late final _cst_new_box_autoadd_ffi_canonical_txPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_ffi_canonical_tx> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_canonical_tx');
  late final _cst_new_box_autoadd_ffi_canonical_tx =
      _cst_new_box_autoadd_ffi_canonical_txPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_canonical_tx> Function()>();

  ffi.Pointer<wire_cst_ffi_connection> cst_new_box_autoadd_ffi_connection() {
    return _cst_new_box_autoadd_ffi_connection();
  }

  late final _cst_new_box_autoadd_ffi_connectionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_connection> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_connection');
  late final _cst_new_box_autoadd_ffi_connection =
      _cst_new_box_autoadd_ffi_connectionPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_connection> Function()>();

  ffi.Pointer<wire_cst_ffi_derivation_path>
      cst_new_box_autoadd_ffi_derivation_path() {
    return _cst_new_box_autoadd_ffi_derivation_path();
  }

  late final _cst_new_box_autoadd_ffi_derivation_pathPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_derivation_path> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_derivation_path');
  late final _cst_new_box_autoadd_ffi_derivation_path =
      _cst_new_box_autoadd_ffi_derivation_pathPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_derivation_path> Function()>();

  ffi.Pointer<wire_cst_ffi_descriptor> cst_new_box_autoadd_ffi_descriptor() {
    return _cst_new_box_autoadd_ffi_descriptor();
  }

  late final _cst_new_box_autoadd_ffi_descriptorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_descriptor> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_descriptor');
  late final _cst_new_box_autoadd_ffi_descriptor =
      _cst_new_box_autoadd_ffi_descriptorPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_descriptor> Function()>();

  ffi.Pointer<wire_cst_ffi_descriptor_public_key>
      cst_new_box_autoadd_ffi_descriptor_public_key() {
    return _cst_new_box_autoadd_ffi_descriptor_public_key();
  }

  late final _cst_new_box_autoadd_ffi_descriptor_public_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_descriptor_public_key> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_descriptor_public_key');
  late final _cst_new_box_autoadd_ffi_descriptor_public_key =
      _cst_new_box_autoadd_ffi_descriptor_public_keyPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_descriptor_public_key> Function()>();

  ffi.Pointer<wire_cst_ffi_descriptor_secret_key>
      cst_new_box_autoadd_ffi_descriptor_secret_key() {
    return _cst_new_box_autoadd_ffi_descriptor_secret_key();
  }

  late final _cst_new_box_autoadd_ffi_descriptor_secret_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_descriptor_secret_key> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_descriptor_secret_key');
  late final _cst_new_box_autoadd_ffi_descriptor_secret_key =
      _cst_new_box_autoadd_ffi_descriptor_secret_keyPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_descriptor_secret_key> Function()>();

  ffi.Pointer<wire_cst_ffi_electrum_client>
      cst_new_box_autoadd_ffi_electrum_client() {
    return _cst_new_box_autoadd_ffi_electrum_client();
  }

  late final _cst_new_box_autoadd_ffi_electrum_clientPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_electrum_client> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_electrum_client');
  late final _cst_new_box_autoadd_ffi_electrum_client =
      _cst_new_box_autoadd_ffi_electrum_clientPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_electrum_client> Function()>();

  ffi.Pointer<wire_cst_ffi_esplora_client>
      cst_new_box_autoadd_ffi_esplora_client() {
    return _cst_new_box_autoadd_ffi_esplora_client();
  }

  late final _cst_new_box_autoadd_ffi_esplora_clientPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_ffi_esplora_client> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_esplora_client');
  late final _cst_new_box_autoadd_ffi_esplora_client =
      _cst_new_box_autoadd_ffi_esplora_clientPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_esplora_client> Function()>();

  ffi.Pointer<wire_cst_ffi_full_scan_request>
      cst_new_box_autoadd_ffi_full_scan_request() {
    return _cst_new_box_autoadd_ffi_full_scan_request();
  }

  late final _cst_new_box_autoadd_ffi_full_scan_requestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_full_scan_request> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_full_scan_request');
  late final _cst_new_box_autoadd_ffi_full_scan_request =
      _cst_new_box_autoadd_ffi_full_scan_requestPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_full_scan_request> Function()>();

  ffi.Pointer<wire_cst_ffi_full_scan_request_builder>
      cst_new_box_autoadd_ffi_full_scan_request_builder() {
    return _cst_new_box_autoadd_ffi_full_scan_request_builder();
  }

  late final _cst_new_box_autoadd_ffi_full_scan_request_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_full_scan_request_builder> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_full_scan_request_builder');
  late final _cst_new_box_autoadd_ffi_full_scan_request_builder =
      _cst_new_box_autoadd_ffi_full_scan_request_builderPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_full_scan_request_builder> Function()>();

  ffi.Pointer<wire_cst_ffi_mnemonic> cst_new_box_autoadd_ffi_mnemonic() {
    return _cst_new_box_autoadd_ffi_mnemonic();
  }

  late final _cst_new_box_autoadd_ffi_mnemonicPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_mnemonic> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_mnemonic');
  late final _cst_new_box_autoadd_ffi_mnemonic =
      _cst_new_box_autoadd_ffi_mnemonicPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_mnemonic> Function()>();

  ffi.Pointer<wire_cst_ffi_psbt> cst_new_box_autoadd_ffi_psbt() {
    return _cst_new_box_autoadd_ffi_psbt();
  }

  late final _cst_new_box_autoadd_ffi_psbtPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_psbt> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_psbt');
  late final _cst_new_box_autoadd_ffi_psbt = _cst_new_box_autoadd_ffi_psbtPtr
      .asFunction<ffi.Pointer<wire_cst_ffi_psbt> Function()>();

  ffi.Pointer<wire_cst_ffi_script_buf> cst_new_box_autoadd_ffi_script_buf() {
    return _cst_new_box_autoadd_ffi_script_buf();
  }

  late final _cst_new_box_autoadd_ffi_script_bufPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_script_buf> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_script_buf');
  late final _cst_new_box_autoadd_ffi_script_buf =
      _cst_new_box_autoadd_ffi_script_bufPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_script_buf> Function()>();

  ffi.Pointer<wire_cst_ffi_sync_request>
      cst_new_box_autoadd_ffi_sync_request() {
    return _cst_new_box_autoadd_ffi_sync_request();
  }

  late final _cst_new_box_autoadd_ffi_sync_requestPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_ffi_sync_request> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_sync_request');
  late final _cst_new_box_autoadd_ffi_sync_request =
      _cst_new_box_autoadd_ffi_sync_requestPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_sync_request> Function()>();

  ffi.Pointer<wire_cst_ffi_sync_request_builder>
      cst_new_box_autoadd_ffi_sync_request_builder() {
    return _cst_new_box_autoadd_ffi_sync_request_builder();
  }

  late final _cst_new_box_autoadd_ffi_sync_request_builderPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_ffi_sync_request_builder> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_sync_request_builder');
  late final _cst_new_box_autoadd_ffi_sync_request_builder =
      _cst_new_box_autoadd_ffi_sync_request_builderPtr.asFunction<
          ffi.Pointer<wire_cst_ffi_sync_request_builder> Function()>();

  ffi.Pointer<wire_cst_ffi_transaction> cst_new_box_autoadd_ffi_transaction() {
    return _cst_new_box_autoadd_ffi_transaction();
  }

  late final _cst_new_box_autoadd_ffi_transactionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_transaction> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_transaction');
  late final _cst_new_box_autoadd_ffi_transaction =
      _cst_new_box_autoadd_ffi_transactionPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_transaction> Function()>();

  ffi.Pointer<wire_cst_ffi_update> cst_new_box_autoadd_ffi_update() {
    return _cst_new_box_autoadd_ffi_update();
  }

  late final _cst_new_box_autoadd_ffi_updatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_update> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_update');
  late final _cst_new_box_autoadd_ffi_update =
      _cst_new_box_autoadd_ffi_updatePtr
          .asFunction<ffi.Pointer<wire_cst_ffi_update> Function()>();

  ffi.Pointer<wire_cst_ffi_wallet> cst_new_box_autoadd_ffi_wallet() {
    return _cst_new_box_autoadd_ffi_wallet();
  }

  late final _cst_new_box_autoadd_ffi_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ffi_wallet> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_ffi_wallet');
  late final _cst_new_box_autoadd_ffi_wallet =
      _cst_new_box_autoadd_ffi_walletPtr
          .asFunction<ffi.Pointer<wire_cst_ffi_wallet> Function()>();

  ffi.Pointer<wire_cst_lock_time> cst_new_box_autoadd_lock_time() {
    return _cst_new_box_autoadd_lock_time();
  }

  late final _cst_new_box_autoadd_lock_timePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_lock_time> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_lock_time');
  late final _cst_new_box_autoadd_lock_time = _cst_new_box_autoadd_lock_timePtr
      .asFunction<ffi.Pointer<wire_cst_lock_time> Function()>();

  ffi.Pointer<wire_cst_rbf_value> cst_new_box_autoadd_rbf_value() {
    return _cst_new_box_autoadd_rbf_value();
  }

  late final _cst_new_box_autoadd_rbf_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_rbf_value> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_rbf_value');
  late final _cst_new_box_autoadd_rbf_value = _cst_new_box_autoadd_rbf_valuePtr
      .asFunction<ffi.Pointer<wire_cst_rbf_value> Function()>();

  ffi.Pointer<wire_cst_sign_options> cst_new_box_autoadd_sign_options() {
    return _cst_new_box_autoadd_sign_options();
  }

  late final _cst_new_box_autoadd_sign_optionsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_sign_options> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sign_options');
  late final _cst_new_box_autoadd_sign_options =
      _cst_new_box_autoadd_sign_optionsPtr
          .asFunction<ffi.Pointer<wire_cst_sign_options> Function()>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 = _cst_new_box_autoadd_u_32Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 = _cst_new_box_autoadd_u_64Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_cst_list_ffi_canonical_tx> cst_new_list_ffi_canonical_tx(
    int len,
  ) {
    return _cst_new_list_ffi_canonical_tx(
      len,
    );
  }

  late final _cst_new_list_ffi_canonical_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_ffi_canonical_tx> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_ffi_canonical_tx');
  late final _cst_new_list_ffi_canonical_tx = _cst_new_list_ffi_canonical_txPtr
      .asFunction<ffi.Pointer<wire_cst_list_ffi_canonical_tx> Function(int)>();

  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_new_list_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_list_prim_u_8_strict');
  late final _cst_new_list_list_prim_u_8_strict =
      _cst_new_list_list_prim_u_8_strictPtr.asFunction<
          ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_local_output> cst_new_list_local_output(
    int len,
  ) {
    return _cst_new_list_local_output(
      len,
    );
  }

  late final _cst_new_list_local_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_local_output> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_local_output');
  late final _cst_new_list_local_output = _cst_new_list_local_outputPtr
      .asFunction<ffi.Pointer<wire_cst_list_local_output> Function(int)>();

  ffi.Pointer<wire_cst_list_out_point> cst_new_list_out_point(
    int len,
  ) {
    return _cst_new_list_out_point(
      len,
    );
  }

  late final _cst_new_list_out_pointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_out_point> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_out_point');
  late final _cst_new_list_out_point = _cst_new_list_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_list_out_point> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64>
      cst_new_list_record_ffi_script_buf_u_64(
    int len,
  ) {
    return _cst_new_list_record_ffi_script_buf_u_64(
      len,
    );
  }

  late final _cst_new_list_record_ffi_script_buf_u_64Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_record_ffi_script_buf_u_64');
  late final _cst_new_list_record_ffi_script_buf_u_64 =
      _cst_new_list_record_ffi_script_buf_u_64Ptr.asFunction<
          ffi.Pointer<wire_cst_list_record_ffi_script_buf_u_64> Function(
              int)>();

  ffi.Pointer<wire_cst_list_tx_in> cst_new_list_tx_in(
    int len,
  ) {
    return _cst_new_list_tx_in(
      len,
    );
  }

  late final _cst_new_list_tx_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_in> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_in');
  late final _cst_new_list_tx_in = _cst_new_list_tx_inPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_in> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_out> cst_new_list_tx_out(
    int len,
  ) {
    return _cst_new_list_tx_out(
      len,
    );
  }

  late final _cst_new_list_tx_outPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_out> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_out');
  late final _cst_new_list_tx_out = _cst_new_list_tx_outPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_out> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;
typedef DartPostCObjectFnTypeFunction = ffi.Bool Function(
    DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction = bool Function(
    DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

final class wire_cst_ffi_address extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_ffi_script_buf extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bytes;
}

final class wire_cst_ffi_psbt extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_transaction extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_LockTime_Blocks extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class wire_cst_LockTime_Seconds extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class LockTimeKind extends ffi.Union {
  external wire_cst_LockTime_Blocks Blocks;

  external wire_cst_LockTime_Seconds Seconds;
}

final class wire_cst_lock_time extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LockTimeKind kind;
}

final class wire_cst_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_list_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_in extends ffi.Struct {
  external wire_cst_out_point previous_output;

  external wire_cst_ffi_script_buf script_sig;

  @ffi.Uint32()
  external int sequence;

  external ffi.Pointer<wire_cst_list_list_prim_u_8_strict> witness;
}

final class wire_cst_list_tx_in extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_in> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_out extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external wire_cst_ffi_script_buf script_pubkey;
}

final class wire_cst_list_tx_out extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_out> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_ffi_descriptor extends ffi.Struct {
  @ffi.UintPtr()
  external int extended_descriptor;

  @ffi.UintPtr()
  external int key_map;
}

final class wire_cst_ffi_descriptor_secret_key extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_descriptor_public_key extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_electrum_client extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_full_scan_request extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_ffi_sync_request extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_ffi_esplora_client extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_derivation_path extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_ffi_mnemonic extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_fee_rate extends ffi.Struct {
  @ffi.Uint64()
  external int sat_kwu;
}

final class wire_cst_ffi_wallet extends ffi.Struct {
  @ffi.UintPtr()
  external int opaque;
}

final class wire_cst_record_ffi_script_buf_u_64 extends ffi.Struct {
  external wire_cst_ffi_script_buf field0;

  @ffi.Uint64()
  external int field1;
}

final class wire_cst_list_record_ffi_script_buf_u_64 extends ffi.Struct {
  external ffi.Pointer<wire_cst_record_ffi_script_buf_u_64> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_out_point> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_RbfValue_Value extends ffi.Struct {
  @ffi.Uint32()
  external int field0;
}

final class RbfValueKind extends ffi.Union {
  external wire_cst_RbfValue_Value Value;
}

final class wire_cst_rbf_value extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external RbfValueKind kind;
}

final class wire_cst_ffi_full_scan_request_builder extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_ffi_sync_request_builder extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_ffi_update extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_ffi_connection extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_sign_options extends ffi.Struct {
  @ffi.Bool()
  external bool trust_witness_utxo;

  external ffi.Pointer<ffi.Uint32> assume_height;

  @ffi.Bool()
  external bool allow_all_sighashes;

  @ffi.Bool()
  external bool try_finalize;

  @ffi.Bool()
  external bool sign_with_tap_internal_key;

  @ffi.Bool()
  external bool allow_grinding;
}

final class wire_cst_block_id extends ffi.Struct {
  @ffi.Uint32()
  external int height;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hash;
}

final class wire_cst_confirmation_block_time extends ffi.Struct {
  external wire_cst_block_id block_id;

  @ffi.Uint64()
  external int confirmation_time;
}

final class wire_cst_ChainPosition_Confirmed extends ffi.Struct {
  external ffi.Pointer<wire_cst_confirmation_block_time>
      confirmation_block_time;
}

final class wire_cst_ChainPosition_Unconfirmed extends ffi.Struct {
  @ffi.Uint64()
  external int timestamp;
}

final class ChainPositionKind extends ffi.Union {
  external wire_cst_ChainPosition_Confirmed Confirmed;

  external wire_cst_ChainPosition_Unconfirmed Unconfirmed;
}

final class wire_cst_chain_position extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ChainPositionKind kind;
}

final class wire_cst_ffi_canonical_tx extends ffi.Struct {
  external wire_cst_ffi_transaction transaction;

  external wire_cst_chain_position chain_position;
}

final class wire_cst_list_ffi_canonical_tx extends ffi.Struct {
  external ffi.Pointer<wire_cst_ffi_canonical_tx> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_local_output extends ffi.Struct {
  external wire_cst_out_point outpoint;

  external wire_cst_tx_out txout;

  @ffi.Int32()
  external int keychain;

  @ffi.Bool()
  external bool is_spent;
}

final class wire_cst_list_local_output extends ffi.Struct {
  external ffi.Pointer<wire_cst_local_output> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_address_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external wire_cst_ffi_address address;

  @ffi.Int32()
  external int keychain;
}

final class wire_cst_AddressParseError_WitnessVersion extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_AddressParseError_WitnessProgram extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class AddressParseErrorKind extends ffi.Union {
  external wire_cst_AddressParseError_WitnessVersion WitnessVersion;

  external wire_cst_AddressParseError_WitnessProgram WitnessProgram;
}

final class wire_cst_address_parse_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AddressParseErrorKind kind;
}

final class wire_cst_balance extends ffi.Struct {
  @ffi.Uint64()
  external int immature;

  @ffi.Uint64()
  external int trusted_pending;

  @ffi.Uint64()
  external int untrusted_pending;

  @ffi.Uint64()
  external int confirmed;

  @ffi.Uint64()
  external int spendable;

  @ffi.Uint64()
  external int total;
}

final class wire_cst_Bip32Error_Secp256k1 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_Bip32Error_InvalidChildNumber extends ffi.Struct {
  @ffi.Uint32()
  external int child_number;
}

final class wire_cst_Bip32Error_UnknownVersion extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> version;
}

final class wire_cst_Bip32Error_WrongExtendedKeyLength extends ffi.Struct {
  @ffi.Uint32()
  external int length;
}

final class wire_cst_Bip32Error_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_Bip32Error_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_Bip32Error_InvalidPublicKeyHexLength extends ffi.Struct {
  @ffi.Uint32()
  external int length;
}

final class wire_cst_Bip32Error_UnknownError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class Bip32ErrorKind extends ffi.Union {
  external wire_cst_Bip32Error_Secp256k1 Secp256k1;

  external wire_cst_Bip32Error_InvalidChildNumber InvalidChildNumber;

  external wire_cst_Bip32Error_UnknownVersion UnknownVersion;

  external wire_cst_Bip32Error_WrongExtendedKeyLength WrongExtendedKeyLength;

  external wire_cst_Bip32Error_Base58 Base58;

  external wire_cst_Bip32Error_Hex Hex;

  external wire_cst_Bip32Error_InvalidPublicKeyHexLength
      InvalidPublicKeyHexLength;

  external wire_cst_Bip32Error_UnknownError UnknownError;
}

final class wire_cst_bip_32_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external Bip32ErrorKind kind;
}

final class wire_cst_Bip39Error_BadWordCount extends ffi.Struct {
  @ffi.Uint64()
  external int word_count;
}

final class wire_cst_Bip39Error_UnknownWord extends ffi.Struct {
  @ffi.Uint64()
  external int index;
}

final class wire_cst_Bip39Error_BadEntropyBitCount extends ffi.Struct {
  @ffi.Uint64()
  external int bit_count;
}

final class wire_cst_Bip39Error_AmbiguousLanguages extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> languages;
}

final class Bip39ErrorKind extends ffi.Union {
  external wire_cst_Bip39Error_BadWordCount BadWordCount;

  external wire_cst_Bip39Error_UnknownWord UnknownWord;

  external wire_cst_Bip39Error_BadEntropyBitCount BadEntropyBitCount;

  external wire_cst_Bip39Error_AmbiguousLanguages AmbiguousLanguages;
}

final class wire_cst_bip_39_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external Bip39ErrorKind kind;
}

final class wire_cst_CalculateFeeError_Generic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CalculateFeeError_MissingTxOut extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_out_point> out_points;
}

final class wire_cst_CalculateFeeError_NegativeFee extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> amount;
}

final class CalculateFeeErrorKind extends ffi.Union {
  external wire_cst_CalculateFeeError_Generic Generic;

  external wire_cst_CalculateFeeError_MissingTxOut MissingTxOut;

  external wire_cst_CalculateFeeError_NegativeFee NegativeFee;
}

final class wire_cst_calculate_fee_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CalculateFeeErrorKind kind;
}

final class wire_cst_CannotConnectError_Include extends ffi.Struct {
  @ffi.Uint32()
  external int height;
}

final class CannotConnectErrorKind extends ffi.Union {
  external wire_cst_CannotConnectError_Include Include;
}

final class wire_cst_cannot_connect_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CannotConnectErrorKind kind;
}

final class wire_cst_CreateTxError_Generic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateTxError_Descriptor extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateTxError_Policy extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateTxError_SpendingPolicyRequired extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> kind;
}

final class wire_cst_CreateTxError_LockTime extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> requested_time;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> required_time;
}

final class wire_cst_CreateTxError_RbfSequenceCsv extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> rbf;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> csv;
}

final class wire_cst_CreateTxError_FeeTooLow extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> fee_required;
}

final class wire_cst_CreateTxError_FeeRateTooLow extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> fee_rate_required;
}

final class wire_cst_CreateTxError_OutputBelowDustLimit extends ffi.Struct {
  @ffi.Uint64()
  external int index;
}

final class wire_cst_CreateTxError_CoinSelection extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateTxError_InsufficientFunds extends ffi.Struct {
  @ffi.Uint64()
  external int needed;

  @ffi.Uint64()
  external int available;
}

final class wire_cst_CreateTxError_Psbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateTxError_MissingKeyOrigin extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> key;
}

final class wire_cst_CreateTxError_UnknownUtxo extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> outpoint;
}

final class wire_cst_CreateTxError_MissingNonWitnessUtxo extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> outpoint;
}

final class wire_cst_CreateTxError_MiniscriptPsbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class CreateTxErrorKind extends ffi.Union {
  external wire_cst_CreateTxError_Generic Generic;

  external wire_cst_CreateTxError_Descriptor Descriptor;

  external wire_cst_CreateTxError_Policy Policy;

  external wire_cst_CreateTxError_SpendingPolicyRequired SpendingPolicyRequired;

  external wire_cst_CreateTxError_LockTime LockTime;

  external wire_cst_CreateTxError_RbfSequenceCsv RbfSequenceCsv;

  external wire_cst_CreateTxError_FeeTooLow FeeTooLow;

  external wire_cst_CreateTxError_FeeRateTooLow FeeRateTooLow;

  external wire_cst_CreateTxError_OutputBelowDustLimit OutputBelowDustLimit;

  external wire_cst_CreateTxError_CoinSelection CoinSelection;

  external wire_cst_CreateTxError_InsufficientFunds InsufficientFunds;

  external wire_cst_CreateTxError_Psbt Psbt;

  external wire_cst_CreateTxError_MissingKeyOrigin MissingKeyOrigin;

  external wire_cst_CreateTxError_UnknownUtxo UnknownUtxo;

  external wire_cst_CreateTxError_MissingNonWitnessUtxo MissingNonWitnessUtxo;

  external wire_cst_CreateTxError_MiniscriptPsbt MiniscriptPsbt;
}

final class wire_cst_create_tx_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CreateTxErrorKind kind;
}

final class wire_cst_CreateWithPersistError_Persist extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_CreateWithPersistError_Descriptor extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class CreateWithPersistErrorKind extends ffi.Union {
  external wire_cst_CreateWithPersistError_Persist Persist;

  external wire_cst_CreateWithPersistError_Descriptor Descriptor;
}

final class wire_cst_create_with_persist_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external CreateWithPersistErrorKind kind;
}

final class wire_cst_DescriptorError_Key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Generic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Policy extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_InvalidDescriptorCharacter
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> charector;
}

final class wire_cst_DescriptorError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Pk extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Miniscript extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class DescriptorErrorKind extends ffi.Union {
  external wire_cst_DescriptorError_Key Key;

  external wire_cst_DescriptorError_Generic Generic;

  external wire_cst_DescriptorError_Policy Policy;

  external wire_cst_DescriptorError_InvalidDescriptorCharacter
      InvalidDescriptorCharacter;

  external wire_cst_DescriptorError_Bip32 Bip32;

  external wire_cst_DescriptorError_Base58 Base58;

  external wire_cst_DescriptorError_Pk Pk;

  external wire_cst_DescriptorError_Miniscript Miniscript;

  external wire_cst_DescriptorError_Hex Hex;
}

final class wire_cst_descriptor_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DescriptorErrorKind kind;
}

final class wire_cst_DescriptorKeyError_Parse extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_DescriptorKeyError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class DescriptorKeyErrorKind extends ffi.Union {
  external wire_cst_DescriptorKeyError_Parse Parse;

  external wire_cst_DescriptorKeyError_Bip32 Bip32;
}

final class wire_cst_descriptor_key_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DescriptorKeyErrorKind kind;
}

final class wire_cst_ElectrumError_IOError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_Json extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_Protocol extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_Bitcoin extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_InvalidResponse extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_Message extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_InvalidDNSNameError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> domain;
}

final class wire_cst_ElectrumError_SharedIOError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_ElectrumError_CouldNotCreateConnection extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class ElectrumErrorKind extends ffi.Union {
  external wire_cst_ElectrumError_IOError IOError;

  external wire_cst_ElectrumError_Json Json;

  external wire_cst_ElectrumError_Hex Hex;

  external wire_cst_ElectrumError_Protocol Protocol;

  external wire_cst_ElectrumError_Bitcoin Bitcoin;

  external wire_cst_ElectrumError_InvalidResponse InvalidResponse;

  external wire_cst_ElectrumError_Message Message;

  external wire_cst_ElectrumError_InvalidDNSNameError InvalidDNSNameError;

  external wire_cst_ElectrumError_SharedIOError SharedIOError;

  external wire_cst_ElectrumError_CouldNotCreateConnection
      CouldNotCreateConnection;
}

final class wire_cst_electrum_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ElectrumErrorKind kind;
}

final class wire_cst_EsploraError_Minreq extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_HttpResponse extends ffi.Struct {
  @ffi.Uint16()
  external int status;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_Parsing extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_StatusCode extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_BitcoinEncoding extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_HexToArray extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_HexToBytes extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_EsploraError_HeaderHeightNotFound extends ffi.Struct {
  @ffi.Uint32()
  external int height;
}

final class wire_cst_EsploraError_InvalidHttpHeaderName extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;
}

final class wire_cst_EsploraError_InvalidHttpHeaderValue extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class EsploraErrorKind extends ffi.Union {
  external wire_cst_EsploraError_Minreq Minreq;

  external wire_cst_EsploraError_HttpResponse HttpResponse;

  external wire_cst_EsploraError_Parsing Parsing;

  external wire_cst_EsploraError_StatusCode StatusCode;

  external wire_cst_EsploraError_BitcoinEncoding BitcoinEncoding;

  external wire_cst_EsploraError_HexToArray HexToArray;

  external wire_cst_EsploraError_HexToBytes HexToBytes;

  external wire_cst_EsploraError_HeaderHeightNotFound HeaderHeightNotFound;

  external wire_cst_EsploraError_InvalidHttpHeaderName InvalidHttpHeaderName;

  external wire_cst_EsploraError_InvalidHttpHeaderValue InvalidHttpHeaderValue;
}

final class wire_cst_esplora_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external EsploraErrorKind kind;
}

final class wire_cst_ExtractTxError_AbsurdFeeRate extends ffi.Struct {
  @ffi.Uint64()
  external int fee_rate;
}

final class ExtractTxErrorKind extends ffi.Union {
  external wire_cst_ExtractTxError_AbsurdFeeRate AbsurdFeeRate;
}

final class wire_cst_extract_tx_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ExtractTxErrorKind kind;
}

final class wire_cst_FromScriptError_WitnessProgram extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_FromScriptError_WitnessVersion extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class FromScriptErrorKind extends ffi.Union {
  external wire_cst_FromScriptError_WitnessProgram WitnessProgram;

  external wire_cst_FromScriptError_WitnessVersion WitnessVersion;
}

final class wire_cst_from_script_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external FromScriptErrorKind kind;
}

final class wire_cst_LoadWithPersistError_Persist extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_LoadWithPersistError_InvalidChangeSet extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class LoadWithPersistErrorKind extends ffi.Union {
  external wire_cst_LoadWithPersistError_Persist Persist;

  external wire_cst_LoadWithPersistError_InvalidChangeSet InvalidChangeSet;
}

final class wire_cst_load_with_persist_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LoadWithPersistErrorKind kind;
}

final class wire_cst_PsbtError_InvalidKey extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> key;
}

final class wire_cst_PsbtError_DuplicateKey extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> key;
}

final class wire_cst_PsbtError_NonStandardSighashType extends ffi.Struct {
  @ffi.Uint32()
  external int sighash;
}

final class wire_cst_PsbtError_InvalidHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> hash;
}

final class wire_cst_PsbtError_CombineInconsistentKeySources
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> xpub;
}

final class wire_cst_PsbtError_ConsensusEncoding extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> encoding_error;
}

final class wire_cst_PsbtError_InvalidPublicKey extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtError_InvalidSecp256k1PublicKey extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> secp256k1_error;
}

final class wire_cst_PsbtError_InvalidEcdsaSignature extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtError_InvalidTaprootSignature extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtError_TapTree extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtError_Version extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtError_Io extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class PsbtErrorKind extends ffi.Union {
  external wire_cst_PsbtError_InvalidKey InvalidKey;

  external wire_cst_PsbtError_DuplicateKey DuplicateKey;

  external wire_cst_PsbtError_NonStandardSighashType NonStandardSighashType;

  external wire_cst_PsbtError_InvalidHash InvalidHash;

  external wire_cst_PsbtError_CombineInconsistentKeySources
      CombineInconsistentKeySources;

  external wire_cst_PsbtError_ConsensusEncoding ConsensusEncoding;

  external wire_cst_PsbtError_InvalidPublicKey InvalidPublicKey;

  external wire_cst_PsbtError_InvalidSecp256k1PublicKey
      InvalidSecp256k1PublicKey;

  external wire_cst_PsbtError_InvalidEcdsaSignature InvalidEcdsaSignature;

  external wire_cst_PsbtError_InvalidTaprootSignature InvalidTaprootSignature;

  external wire_cst_PsbtError_TapTree TapTree;

  external wire_cst_PsbtError_Version Version;

  external wire_cst_PsbtError_Io Io;
}

final class wire_cst_psbt_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PsbtErrorKind kind;
}

final class wire_cst_PsbtParseError_PsbtEncoding extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_PsbtParseError_Base64Encoding extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class PsbtParseErrorKind extends ffi.Union {
  external wire_cst_PsbtParseError_PsbtEncoding PsbtEncoding;

  external wire_cst_PsbtParseError_Base64Encoding Base64Encoding;
}

final class wire_cst_psbt_parse_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PsbtParseErrorKind kind;
}

final class wire_cst_SignerError_SighashP2wpkh extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_SignerError_SighashTaproot extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_SignerError_TxInputsIndexError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_SignerError_MiniscriptPsbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_SignerError_External extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class wire_cst_SignerError_Psbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error_message;
}

final class SignerErrorKind extends ffi.Union {
  external wire_cst_SignerError_SighashP2wpkh SighashP2wpkh;

  external wire_cst_SignerError_SighashTaproot SighashTaproot;

  external wire_cst_SignerError_TxInputsIndexError TxInputsIndexError;

  external wire_cst_SignerError_MiniscriptPsbt MiniscriptPsbt;

  external wire_cst_SignerError_External External;

  external wire_cst_SignerError_Psbt Psbt;
}

final class wire_cst_signer_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external SignerErrorKind kind;
}

final class wire_cst_SqliteError_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> rusqlite_error;
}

final class SqliteErrorKind extends ffi.Union {
  external wire_cst_SqliteError_Sqlite Sqlite;
}

final class wire_cst_sqlite_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external SqliteErrorKind kind;
}

final class wire_cst_TransactionError_InvalidChecksum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> expected;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> actual;
}

final class wire_cst_TransactionError_UnsupportedSegwitFlag extends ffi.Struct {
  @ffi.Uint8()
  external int flag;
}

final class TransactionErrorKind extends ffi.Union {
  external wire_cst_TransactionError_InvalidChecksum InvalidChecksum;

  external wire_cst_TransactionError_UnsupportedSegwitFlag
      UnsupportedSegwitFlag;
}

final class wire_cst_transaction_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external TransactionErrorKind kind;
}

final class wire_cst_TxidParseError_InvalidTxid extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;
}

final class TxidParseErrorKind extends ffi.Union {
  external wire_cst_TxidParseError_InvalidTxid InvalidTxid;
}

final class wire_cst_txid_parse_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external TxidParseErrorKind kind;
}
